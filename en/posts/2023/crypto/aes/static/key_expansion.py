import numpy as np
from pwn import xor
import binascii

# D'après le standard NIST le Rcon commence toujours par 1, mais dans certaines implémentations de AES, on trouve Rcon(0) = 0x8d (je ne sais toujours pas comment ça s'obtient), ici je le mets mais faut savoir qu'on l'atteindra jamais car nos i commence à 1 donc voilà
RCON_TABLE = [0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3,0x7D,0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D]
S_BOX = [  [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],  
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],  
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],  
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],  
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],  
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],  
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],  
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],  
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],  
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],  
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],  
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],  
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],  
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],  
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],  
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16],  
]  

def rotword(word=[]):
    if len(word) != 4:
        raise ValueError(f"Wrong length: {len(word)}")
    return bytes(np.roll(list(word), -1).tolist())
  
def get_sbox_map():  
    sbox_map = {}  
    for i in range(0x100):  
        msb = i >> 4  
        lsb = i & 0x0f  
        sbox_map[i] = S_BOX[msb][lsb]  
    return sbox_map  

def subword(word=[], sbox_map=get_sbox_map()):
    if len(word) != 4:
        raise ValueError(f"Wrong length: {len(word)}")
    return [sbox_map[i] for i in word]

# on utilisera directement un mapping comme Sbox
def rcon(n):
    if not 0 <= n < 256:
        raise ValueError(f"Wrong n: {n}")
    return bytes([RCON_TABLE[n], 0, 0, 0])

# code inspiré de https://github.com/thomasperrot/aes-square-attack/
def key_expension(key=b'', rounds=11):
    if len(key) != 16:
        raise ValueError(f"Wrong key length: {len(key)}")
    key_mat = [key[i : i + 4] for i in range(0, len(key), 4)]
    expended_key = key_mat
    for r in range(1, rounds):
        rot = rotword(expended_key[-1])
        sub = subword(rot)
        first_column = xor(sub, expended_key[-4], rcon(r))
        expended_key.append(first_column)
        for _ in range(3):
            expended_key.append(xor(expended_key[-1], expended_key[-4]))
    return expended_key

def reverse_key_expension(expended_key=b'', rounds=1):
    for r in reversed(range(1, rounds)):
        for _ in range(3):
            expended_key.insert(0, xor(expended_key[2], expended_key[3]))
        rot= rotword(expended_key[2])
        sub = subword(rot)
        first_column = xor(expended_key[3], rcon(r), sub)
        expended_key.insert(0, first_column)
    return expended_key
    
# get key from known round_keys and round
def get_first_key(key=b'', rounds=1):
    if len(key) != 16:
        raise ValueError(f"Wrong key length: {len(key)}")
    expended_key = [key[i : i + 4] for i in range(0, len(key), 4)]
    fully_expended_key = reverse_key_expension(expended_key, rounds)
    return b"".join(fully_expended_key[:4])

## test
if __name__ == "__main__":
    key = "2b7e151628aed2a6abf7158809cf4f3c"
    bytes_key = binascii.unhexlify(key)

    a = key_expension(bytes_key, 11)
    for i in range(0, len(a), 4):
        round_key = b"".join(a[i:i+4])
        print(binascii.hexlify(round_key))

    b = get_first_key(binascii.unhexlify("ac7766f319fadc2128d12941575c006e"), 10)
    print(binascii.hexlify(b))


'''
Expected round_key
2b7e151628aed2a6abf7158809cf4f3c
a0fafe1788542cb123a339392a6c7605
f2c295f27a96b9435935807a7359f67f
3d80477d4716fe3e1e237e446d7a883b
ef44a541a8525b7fb671253bdb0bad00
d4d1c6f87c839d87caf2b8bc11f915bc
6d88a37a110b3efddbf98641ca0093fd
4e54f70e5f5fc9f384a64fb24ea6dc4f
ead27321b58dbad2312bf5607f8d292f
ac7766f319fadc2128d12941575c006e
d014f9a8c9ee2589e13f0cc8b6630ca6
'''